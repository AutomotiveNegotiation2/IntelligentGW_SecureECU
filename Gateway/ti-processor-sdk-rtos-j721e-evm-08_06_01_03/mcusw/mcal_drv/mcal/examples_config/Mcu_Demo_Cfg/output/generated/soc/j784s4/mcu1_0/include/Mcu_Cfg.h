/*
*
* Copyright (C) 2023 Texas Instruments Incorporated
*
* All rights reserved not granted herein.
*
* Limited License.
*
* Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
* license under copyrights and patents it now or hereafter owns or controls to make,
* have made, use, import, offer to sell and sell ("Utilize") this software subject to the
* terms herein.  With respect to the foregoing patent license, such license is granted
* solely to the extent that any such patent is necessary to Utilize the software alone.
* The patent license shall not apply to any combinations which include this software,
* other than combinations with devices manufactured by or for TI ("TI Devices").
* No hardware patent is licensed hereunder.
*
* Redistributions must preserve existing copyright notices and reproduce this license
* (including the above copyright notice and the disclaimer and (if applicable) source
* code license limitations below) in the documentation and/or other materials provided
* with the distribution
*
* Redistribution and use in binary form, without modification, are permitted provided
* that the following conditions are met:
*
* *       No reverse engineering, decompilation, or disassembly of this software is
* permitted with respect to any software provided in binary form.
*
* *       any redistribution and use are licensed by TI for use only with TI Devices.
*
* *       Nothing shall obligate TI to provide you with source code for the software
* licensed and provided to you in object code.
*
* If software source code is provided to you, modification and redistribution of the
* source code are permitted provided that the following conditions are met:
*
* *       any redistribution and use of the source code, including any resulting derivative
* works, are licensed by TI for use only with TI Devices.
*
* *       any redistribution and use of any object code compiled from the source code
* and any resulting derivative works, are licensed by TI for use only with TI Devices.
*
* Neither the name of Texas Instruments Incorporated nor the names of its suppliers
*
* may be used to endorse or promote products derived from this software without
* specific prior written permission.
*
* DISCLAIMER.
*
* THIS SOFTWARE IS PROVIDED BY TI AND TI'S LICENSORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL TI AND TI'S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

  /****************************************************************************
    Project: MCU_CONFIG_J784S4
    Date   : 2023-02-09 09:02:15

    This file is generated by EB Tresos
    Do not modify this file,otherwise the software may behave in unexpected way.

 ******************************************************************************/

/**
 *  \file     Mcu_Cfg.h
 *
 *  \brief    This file contains generated pre compile configuration file
 *            for MCU MCAL driver.
 *
 */

/**
 *  \defgroup MCAL_MCU_CFG MCU Configuration
 *
 *  This files defines MCU MCAL configuration structures
 *  @{
 */

#ifndef MCU_CFG_H
#define MCU_CFG_H

/*********************************************************************************************************************
 * Standard Header Files
 *********************************************************************************************************************/

/*********************************************************************************************************************
 * Other Header Files
 *********************************************************************************************************************/


#ifdef __cplusplus
extern "C" {
#endif

/**
*  \brief MCU Build Variant.
*   Build variants.(i.e Pre Compile,Post Build)
*/

#define MCU_VARIANT_PRE_COMPILE (STD_ON)

/**********************************************************************************************************************
 * Version Check
 *********************************************************************************************************************/
/** \brief MCU Config ID */
#define MCU_CFG_ID                      (0x1U)



/* Requirements: SWS_Mcu_00129 */
/**
 *  \name Mcu Driver Configuration SW Version Info
 *
 *  Defines for Mcu Driver configuration version
 *  @{
 */
/** \brief Mcu configuration Major Version */
#define MCU_CFG_MAJOR_VERSION           (3U)
/** \brief Mcu configuration Minor Version */
#define MCU_CFG_MINOR_VERSION           (0U)
/** \brief Mcu configuration Patch Version */
#define MCU_CFG_PATCH_VERSION           (0U)
/* @} */

/*********************************************************************************************************************
 * Exported enums
 *********************************************************************************************************************/


/*********************************************************************************************************************
 * Exported Preprocessor #define Constants
 *********************************************************************************************************************/
/** \brief Enable/Disable Development Error Detection */
#define MCU_DEV_ERROR_DETECT       (STD_ON)
/** \brief Enable/Disable Mcu_CheckRamState() API */
#define MCU_GET_RAM_STATE_API      (STD_OFF)
/** \brief Enable/Disable Mcu_InitClock() API */
#define MCU_INIT_CLOCK_API         (STD_ON)
/** \brief Enable/Disable Mcu_PerformReset() API */
#define MCU_PERFORM_RESET_API      (STD_ON)
/** \brief Enable/Disable Mcu_GetVersionInfo() API */
#define MCU_GET_VERSION_INFO_API   (STD_ON)
/** \brief Enable/Disable Mcu_InitRamSection() API */
#define MCU_INIT_RAM_API           (STD_OFF)
/** \brief Enable/Disable PLL support */
#define MCU_NO_PLL                 (STD_OFF)
/** \brief Enable/Disable Mcu_ClearResetReason() API */
#define MCU_REGISTER_READBACK_API  (STD_OFF)
/** \brief Enable/Disable MCU_REGISTER_READBACK_API() API */

#define MCU_PERFORM_RESET_MASK                  ((uint32) 0x00060000U)
#define MCU_PERFORM_RESET_CLEAR_MASK            ((uint32) 0xFFFFFFFFU)
#define MCU_RST_SRC_STAT_CLEAR                  ((uint32) 0x190B0BU)
#define rstaddr                                 ((LLD_wkup_ctrl_mmr_cfg0Regs*)0x43000000U)
#define SW_MCU_WARM_RST                         ((uint32) 0x1U)
#define SW_MAIN_WARM_RST                        ((uint32) 0x2U)
#define SW_MAIN_POR                             ((uint32) 0x8U)
#define MCU_RESETZ                              ((uint32) 0x100U)
#define WARM_OUT_RST                            ((uint32) 0x10000U)
#define COLD_OUT_RST                            ((uint32) 0x80000U)
#define DEBUG_RST_OCCURED                       ((uint32) 0x100000U)

/** \brief Reset Reason Error Mask */
#define MCU_ERRORRST_MASK                       ((Mcu_RawResetType)0xFFFF0000U)

#define ARRAYSIZE(array)             ((sizeof (array) / \
                                         sizeof ((array)[0])))




/**
 *  \brief Pre Compile config macro name.
 */


#define MCU_INIT_CONFIG_PC       McuModuleConfiguration_0



/*
 * The following defines shall be used as input
 * parameter for: Mcu_SetMode(),
 *                Mcu_InitClock()
 *                Mcu_InitRamSection()
 */

/*<MCU_CFG_MODEUSERCONFIG_LIST>*/

#define McuConf_McuModeSettingConf_McuModeSettingConf_0 MCU_MODE_NOMINAL
/*</MCU_CFG_MODEUSERCONFIG_LIST>*/

/*<MCU_CFG_CLOCKUSERCONFIG_LIST>*/
/*
* Clock configuration
*/
/* The nomenclature is as per AUTOSAR_TPS_ECUConfiguration.pdf
*/
#define McuConf_McuClockSettingConfig_MCU_MCAN (0U)
#define McuConf_McuClockSettingConfig_MCU_SPI (1U)
#define McuConf_McuClockSettingConfig_TIMER (2U)
#define McuConf_McuClockSettingConfig_ECAP (3U)

/*</MCU_CFG_CLOCKUSERCONFIG_LIST>*/




/*********************************************************************************************************************
 * Exported Preprocessor #define Macros
 *********************************************************************************************************************/

/*********************************************************************************************************************
 * Exported Type Declarations
 *********************************************************************************************************************/

/* Requirements: SWS_Mcu_00252,SWS_Mcu_00234 */
/**
 *  \brief  This is the type of the reset enumerator containing the subset of
 *  reset types. <br>
 *  It is not required that all reset types are supported by hardware
 *
 */
typedef enum
{
    /* Requirements: SWS_Mcu_00134 */
    MCU_POWER_ON_RESET = 0,        /*!< POR Reset */
	MCU_WATCHDOG_RESET,            /*!< WatchDog reset */
    MCU_COLD_SW_RESET,             /*!< Cold Reset */
    MCU_SW_RESET,                  /*!< SW Warm reset */
    MCU_DEBUG_RESET,               /*!< Debug reset */
    MCU_RESET_UNDEFINED,           /*!< UNDEFINED  reset */
	MCU_RESET_CLEAR                /*!< Reset Reason Cleared */
} Mcu_ResetType;

/* Requirements: SWS_Mcu_00250,SWS_Mcu_00231 */
/**
 *  \enum Mcu_PllStatusType
 *  \brief  This is a status value returned by the function Mcu_GetPllStatus()
 *  of the MCU module.
 */
typedef enum
{
    MCU_PLL_LOCKED = 0,
    MCU_PLL_UNLOCKED,
    MCU_PLL_STATUS_UNDEFINED
} Mcu_PllStatusType;

/* Requirements : SWS_Mcu_00256 */
/**
 *  \enum Mcu_RamStateType
 *  \brief  Enumeration of ranstate queried by Mcu_GetRamState()
 */
typedef enum
{
    MCU_RAMSTATE_INVALID,
    MCU_RAMSTATE_VALID
} Mcu_RamStateType;

typedef enum
{
    MCU,
    /**< MCU Domain */
    MAIN,
    /**< MAIN Domain */
    WKUP
    /**< WKUP Domain */
} Mcu_DomainType;

typedef enum
{
	McuMcan,
    /**< MCU_CLKSRC_MODULE_ID_MCU_MCAN */
	Mcan,
    /**< MCU_CLKSRC_MODULE_ID_MCAN */
	McuSpi,
    /**<MCU_CLKSRC_MODULE_ID_MCU_SPI */
	Spi,
    /**< MCU_CLKSRC_MODULE_ID_SPI */
	Adc,
    /**< MCU_CLKSRC_MODULE_ID_ADC */
	McuCpsw,
    /**< MCU_CLKSRC_MODULE_ID_MCU_CPSW */
	Cpsw,
    /**< MCU_CLKSRC_MODULE_ID_CPSW */
	McuTimer,
    /**< MCU_CLKSRC_MODULE_ID_MCU_TIMER */
	Timer,
    /**< MCU_CLKSRC_MODULE_ID_TIMER */
	Ecap,
    /**< MCU_CLKSRC_MODULE_ID_ECAP */
} Mcu_ModuleName;

/**
 *  \enum Mcu_ClkModuleIdType
 *  \brief Clock source config modules id enum
 *
 *  Clock source config ids defines are used to set clock source for specific
 *  modules
 */
typedef enum
{
    MCU_CLKSRC_MODULE_ID_MCU_MCAN,        /* MCU_MCAN clock*/
    MCU_CLKSRC_MODULE_ID_MCAN,            /* MCAN clock */
    MCU_CLKSRC_MODULE_ID_MCU_SPI,         /* MCU_SPI clock */
    MCU_CLKSRC_MODULE_ID_SPI,             /* SPI clock */
    MCU_CLKSRC_MODULE_ID_ADC,             /* ADC clock */
    MCU_CLKSRC_MODULE_ID_MCU_CPSW,        /* MCU_CPSW clock */
    MCU_CLKSRC_MODULE_ID_CPSW,            /* CPSW clock */
    MCU_CLKSRC_MODULE_ID_MCU_TIMER,       /* MCU_TIMER clock */
    MCU_CLKSRC_MODULE_ID_TIMER,           /* TIMER clock */
    MCU_CLKSRC_MODULE_ID_ECAP,            /* ECAP clock */
    MCU_CLKSRC_MODULE_ID_MAX
} Mcu_ClkModuleIdType;


/**
 * \brief  This is the type of the clock source in clock tree that is selectable
 *         for  peripheral. Please see TRM to map clock source to module.
 */
typedef enum
{
    MCU_CLKSRC_HFOSC0_CLK = 0, 			  /* MCU Domain, Freq range = 19.2, 20, 24, 25, 26 or 27 MHz */
	MCU_CLKSRC_LFOSC0_CLKOUT,             /* MCU Domain, 32.768 KHz */
	MCU_CLKSRC_EXT_REFCLK0,               /* MCU Domain, upto 100 MHz */
	MCU_CLKSRC_HFOSC1_CLK,                /* MAIN Domain, Freq range = 19.2, 20, 24, 25, 26 or 27 MHz */
	MCU_CLKSRC_REFCLK1,                   /* MAIN Domain, upto 100 MHz */
	MCU_CLKSRC_RCOSC_12M,                 /* WKUP Domain, 12.5 MHz (Internal RC Oscillator) */
    MCU_CLKSRC_MAX
}Mcu_ClkSourceIdType;

/**
 * \brief  This is the type of the parent clock source in clock tree that is selectable
 *         for  peripheral. Please see TRM to map clock source to module.
 */
typedef enum
{
    MCU_ParentSRC_0 = 0,
    MCU_ParentSRC_1,
    MCU_ParentSRC_2,
    MCU_ParentSRC_3,
    MCU_ParentSRC_4,
    MCU_ParentSRC_5,
    MCU_MCU_ParentSRC_MAX
}Mcu_ParentSourceIdType;

/**
 *  \brief Type for PLL source selection
 */
typedef enum
{
    MCU_CLKSRC_DPLL = 0,
    MCU_CLKSRC_APLL
} Mcu_PllSourceIdType;

#ifdef __cplusplus
}
#endif

#endif /* #ifndef MCU_CFG_H */
/**********************************************************************************************************************
 *  End of File: Mcu_Cfg.h
 *********************************************************************************************************************/
