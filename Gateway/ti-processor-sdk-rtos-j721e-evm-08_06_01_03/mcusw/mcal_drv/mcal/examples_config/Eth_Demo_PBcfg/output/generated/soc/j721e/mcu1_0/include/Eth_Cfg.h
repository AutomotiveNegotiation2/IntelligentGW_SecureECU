/*
*
* Copyright (c) 2023 Texas Instruments Incorporated
*
* All rights reserved not granted herein.
*
* Limited License.
*
* Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
* license under copyrights and patents it now or hereafter owns or controls to make,
* have made, use, import, offer to sell and sell ("Utilize") this software subject to the
* terms herein.  With respect to the foregoing patent license, such license is granted
* solely to the extent that any such patent is necessary to Utilize the software alone.
* The patent license shall not apply to any combinations which include this software,
* other than combinations with devices manufactured by or for TI ("TI Devices").
* No hardware patent is licensed hereunder.
*
* Redistributions must preserve existing copyright notices and reproduce this license
* (including the above copyright notice and the disclaimer and (if applicable) source
* code license limitations below) in the documentation and/or other materials provided
* with the distribution
*
* Redistribution and use in binary form, without modification, are permitted provided
* that the following conditions are met:
*
* *       No reverse engineering, decompilation, or disassembly of this software is
* permitted with respect to any software provided in binary form.
*
* *       any redistribution and use are licensed by TI for use only with TI Devices.
*
* *       Nothing shall obligate TI to provide you with source code for the software
* licensed and provided to you in object code.
*
* If software source code is provided to you, modification and redistribution of the
* source code are permitted provided that the following conditions are met:
*
* *       any redistribution and use of the source code, including any resulting derivative
* works, are licensed by TI for use only with TI Devices.
*
* *       any redistribution and use of any object code compiled from the source code
* and any resulting derivative works, are licensed by TI for use only with TI Devices.
*
* Neither the name of Texas Instruments Incorporated nor the names of its suppliers
*
* may be used to endorse or promote products derived from this software without
* specific prior written permission.
*
* DISCLAIMER.
*
* THIS SOFTWARE IS PROVIDED BY TI AND TI'S LICENSORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL TI AND TI'S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

/**
 *  \file     Eth_Cfg.h
 *
 *  \brief    This file contains generated configuration for ETH MCAL driver
 *
 */
/*******************************************************************************
    Project         : J721E_Pcfg
    Date            : 2023-02-14 09:12:40
    SW Ver          : 2.1.0
    Module Rele Ver : AUTOSAR 4.3.1 0

    This file is generated by EB Tresos
    Do not modify this file,otherwise the software may behave in unexpected way.
*******************************************************************************/

/**
 *  \defgroup MCAL_ETH_CFG Eth Configuration
 *
 *  This files defines ETH MCAL configuration structures
 *  @{
 */

#ifndef ETH_CFG_H_
#define ETH_CFG_H_

/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */
#include "Dem.h"
#include "Os.h"
#include "Eth_Types.h"
#include "Eth_LL_Types.h"
#include "Udma_Types.h"
#include "EthIf_Cbk.h"

#ifdef __cplusplus
extern "C" {
#endif

/* ========================================================================== */
/*                           Macros & Typedefs                                */
/* ========================================================================== */
/** \brief Enable/disable SPI get version info API */
#define ETH_VERSION_INFO_API                       (STD_ON)

/** \brief Enable/disable Eth time sync related API  */
#define ETH_GLOBALTIMESUPPORT_API                  (STD_ON)

/** \brief Enable/Disable Development Error Detection */
#define ETH_DEV_ERROR_DETECT                       (STD_ON)

/** \brief Enable/disable Eth get counter values API  */
#define ETH_GET_COUNTER_VALUES_API                 (STD_ON)

/** \brief Enable/disable Eth get RX stats count API  */
#define ETH_GET_RX_STATS_API                       (STD_ON)

/** \brief Enable/disable Eth get TX stats count API  */
#define ETH_GET_TX_STATS_API                       (STD_ON)

/** \brief Enable/disable Eth get TX error stats count API  */
#define ETH_GET_TX_ERROR_COUNTERSVALUES_API        (STD_ON)


/** \brief Enable/disable Hardware Offloading for ICMP checksums */
#define ETH_CTRL_ENABLE_OFFLOAD_CHECKSUM_ICMP      (STD_OFF)

/** \brief Enable/disable Hardware offloading for IPv4 Header checksums */
#define ETH_CTRL_ENABLE_OFFLOAD_CHECKSUM_IPV4      (STD_OFF)

/** \brief Enable/disable Hardware offloading for TCP checksums */
#define ETH_CTRL_ENABLE_OFFLOAD_CHECKSUM_TCP       (STD_OFF)

/** \brief Enable/disable Hardware offloading for UDP checksums */
#define ETH_CTRL_ENABLE_OFFLOAD_CHECKSUM_UDP       (STD_OFF)


/** \brief Enable/disable Eth MII related API  */
#define ETH_ENABLE_MII_API                         (STD_ON)

/** \brief Enable/disable optional API Eth_UpdatePhysAddrFilter */
#define ETH_UPDATE_PHYS_ADDR_FILTER_API            (STD_ON)

/** \brief Enable/disable optional API Eth_NotifyVirtmacMsgReceived */
#define ETH_VIRTUALMAC_NOTIFYMSGRECEIVED_API       (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacSubscribeAllTraffic */
#define ETH_VIRTUALMAC_SUBSCRIBEALLTRAFFIC_API     (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacUnsubscribeAllTraffic */
#define ETH_VIRTUALMAC_UNSUBSCRIBEALLTRAFFIC_API   (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacSubscribeDstMac */
#define ETH_VIRTUALMAC_SUBSCRIBEDSTMAC_API         (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacUnsubscribeDstMac */
#define ETH_VIRTUALMAC_UNSUBSCRIBEDSTMAC_API       (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacAssociateIPv4Macaddr */
#define ETH_VIRTUALMAC_ASSOCIATEIPV4MACADDR_API    (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacDisassociateIPv4Macaddr */
#define ETH_VIRTUALMAC_DISASSOCIATEIPV4MACADDR_API (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacAddUnicastAddr */
#define ETH_VIRTUALMAC_ADD_UNICAST_MACADDR_API     (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacAddMcastAddr */
#define ETH_VIRTUALMAC_ADD_MCAST_MACADDR_API       (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacDelAddr */
#define ETH_VIRTUALMAC_DEL_MACADDR_API             (STD_OFF)

/** \brief Enable/disable optional API Eth_SendCustomNotify */
#define ETH_VIRTUALMAC_SEND_CUSTOM_NOTIFY_API      (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacAddVlan */
#define ETH_VIRTUALMAC_ADD_VLAN_API                (STD_OFF)

/** \brief Enable/disable optional API Eth_DispatchVirtmacDelVlan */
#define ETH_VIRTUALMAC_DEL_VLAN_API                (STD_OFF)


/** \brief ISR type */
#define ETH_ISR_TYPE                               (ETH_ISR_CAT2)
/** \brief Counter ID for counter used to count wait ticks */
#define ETH_OS_COUNTER_ID                          ((CounterType)OsCounter_0)
/** \brief Frequency in Hz of the counter specified in ETH_OS_COUNTER_ID */
#define ETH_OS_COUNTER_FREQ                        (1000000000U)

/** \brief Enable/disable Virtual MAC support */
#define ETH_VIRTUALMAC_SUPPORT         (STD_OFF)
/** \brief Timeout value for Firmware Attach msg received from server */
#define ETH_VIRTUALMAC_FWINFO_TIMEOUT (0U)

/**
*  \brief Eth controller ID
*   Configured controller ID(s)
*/
#define EthConf_EthCtrlConfig_EthConfig_0                                  (0U)
/**< Controller config */

/**
*  \brief Eth configuration variant
*  @{
*/
#define ETH_PRE_COMPILE_VARIANT                                            (STD_OFF)
#define ETH_LINK_TIME_VARIANT                                              (STD_OFF)
#define ETH_POST_BUILD_VARIANT                                             (STD_ON)
/* @} */

/**
*  \brief Eth max controller ID
*/
#define ETH_CTRL_ID_MAX                                                    (1u)

/**
*  \brief Eth DMA feature flag support
*  @{
*/
#define ETH_DMA_IR_SUPPORT                                                 (STD_ON)
#define ETH_DMA_CQ_RING_SUPPORT                                            (STD_ON)
#define ETH_DMA_TEARDOWN_SUPPORT                                           (STD_ON)
/* @} */

/**
*  \brief Eth DMA devices ID
*  @{
*/
#define UDMA_DEVICE_ID_RING                                                (235U)
#define UDMA_DEVICE_ID_UDMA                                                (236U)
#define UDMA_DEVICE_ID_PSIL                                                (232U)
#define UDMA_DEVICE_ID_IA                                                  (233U)
#define UDMA_DEVICE_ID_IR                                                  (237U)
#define UDMA_DEVICE_ID_CORE                                                (250U)
/* @} */

/**
*  \brief Eth DMA peer and thread offset
*  @{
*/
#define UDMA_TX_CHANNEL_PEER_OFFSET                                        (0xf000U)
#define UDMA_RX_CHANNEL_PEER_OFFSET                                        (0x7000U)
#define UDMA_SOURCE_THREAD_OFFSET                                          (0x6000U)
#define UDMA_DEST_THREAD_OFFSET                                            (0xe000U)
/* @} */

/**
*  \brief Eth DMA base register address
*  @{
*/
#define ETH_DMA_TX_BASE_REG                                                (0x2aa00000U)
#define ETH_DMA_RX_BASE_REG                                                (0x2a800000U)
#define ETH_DMA_RINGRT_BASE                                                (0x2b800000U)
#define ETH_DMA_RINGCFG_BASE                                               (0x28440000U)
#define ETH_DMA_INTAGGR_INTR_BASE                                          (0x2a700000U)
/* @} */

/**
*  \brief Eth DMA macro to calculate register address for DMA register address
*  @{
*/
#define ETH_DMA_TXCRT_CHAN_CTL(CHAN)                                       (0x00000000U + ((CHAN) * 0x1000U))
#define ETH_DMA_TXCRT_CHAN_PEER8(CHAN)                                     (0x00000220U + ((CHAN) * 0x1000U))
#define ETH_DMA_RXCRT_CHAN_CTL(CHAN)                                       (0x00000000U + ((CHAN) * 0x1000U))
#define ETH_DMA_RXCRT_CHAN_PEER8(CHAN)                                     (0x00000220U + ((CHAN) * 0x1000U))

#define ETH_DMA_RINGRT_RING_FDB(RING)                                      (0x00000010U + ((RING) * 0x1000U))
#define ETH_DMA_RINGRT_RING_FOCC(RING)                                     (0x00000018U + ((RING) * 0x1000U))
#define ETH_DMA_RINGRT_RING_RDB(RING)                                      (0x00000010U + ((RING) * 0x1000U))
#define ETH_DMA_RINGRT_RING_ROCC(RING)                                     (0x00000018U + ((RING) * 0x1000U))
#define ETH_DMA_RINGCFG_RING_SIZE(RING)                                    (0x00000048U + ((RING) * 0x100U))

#define ETH_DMA_INTAGGR_INTR_VINT_ENABLE_SET(VINT)                         (ETH_DMA_INTAGGR_INTR_BASE + 0x00000000U + ((VINT) * 0x1000U))
#define ETH_DMA_INTAGGR_INTR_VINT_ENABLE_CLEAR(VINT)                       (ETH_DMA_INTAGGR_INTR_BASE + 0x00000008U + ((VINT) * 0x1000U))
#define ETH_DMA_INTAGGR_INTR_VINT_STATUS_SET(VINT)                         (ETH_DMA_INTAGGR_INTR_BASE + 0x00000010U + ((VINT) * 0x1000U))
#define ETH_DMA_INTAGGR_INTR_VINT_STATUS_CLEAR(VINT)                       (ETH_DMA_INTAGGR_INTR_BASE + 0x00000018U + ((VINT) * 0x1000U))
#define ETH_DMA_INTAGGR_INTR_VINT_STATUSM(VINT)                            (ETH_DMA_INTAGGR_INTR_BASE + 0x00000020U + ((VINT) * 0x1000U))

#define Eth_GetRingFDBReg(RingNum)                                         (ETH_DMA_RINGRT_BASE + ETH_DMA_RINGRT_RING_FDB((RingNum)))
#define Eth_GetRingFOCCReg(RingNum)                                        (ETH_DMA_RINGRT_BASE + ETH_DMA_RINGRT_RING_FOCC((RingNum)))
#define Eth_GetRingRDBReg(RingNum)                                         (ETH_DMA_RINGRT_BASE + ETH_DMA_RINGRT_RING_RDB((RingNum)))
#define Eth_GetRingROCCReg(RingNum)                                        (ETH_DMA_RINGRT_BASE + ETH_DMA_RINGRT_RING_ROCC((RingNum)))
#define Eth_GetRingSizeReg(RingNum)                                        (ETH_DMA_RINGCFG_BASE + ETH_DMA_RINGCFG_RING_SIZE((RingNum)))

#define Eth_GetTxChannelCtlRegAddress(ChanId)                              (ETH_DMA_TX_BASE_REG + ETH_DMA_TXCRT_CHAN_CTL((ChanId)))
#define Eth_GetTxChannelPeer8RegAddress(ChanId)                            (ETH_DMA_TX_BASE_REG + ETH_DMA_TXCRT_CHAN_PEER8((ChanId)))
#define Eth_GetRxChannelCtlRegAddress(ChanId)                              (ETH_DMA_RX_BASE_REG + ETH_DMA_RXCRT_CHAN_CTL((ChanId)))
#define Eth_GetRxChannelPeer8RegAddress(ChanId)                            (ETH_DMA_RX_BASE_REG + ETH_DMA_RXCRT_CHAN_PEER8((ChanId)))
/* @} */

/**
*  \brief Eth DMA max teardown timeout
*/
#define UDMA_WAIT_TEARDOWN_COUNTER                                         (10000u)

/**
 *  \brief ETH DEM Error codes to report
 *  @{
 */
#define Eth_GetDem_E_HARDWARE_ERROR(CtrlIndex)                             ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[0u] )
#define Eth_GetDem_E_LATECOLLISION(CtrlIndex)                              ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[1u] )
#define Eth_GetDem_E_MULTIPLECOLLISION(CtrlIndex)                          ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[2u] )
#define Eth_GetDem_E_SINGLECOLLISION(CtrlIndex)                            ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[3u] )
#define Eth_GetDem_E_ALIGNMENT(CtrlIndex)                                  ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[4u] )
#define Eth_GetDem_E_OVERSIZEFRAME(CtrlIndex)                              ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[5u] )
#define Eth_GetDem_E_UNDERSIZEFRAME(CtrlIndex)                             ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[6u] )
#define Eth_GetDem_E_CRC(CtrlIndex)                                        ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[7u] )
#define Eth_GetDem_E_RX_FRAMES_LOST(CtrlIndex)                             ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[8u] )
#define Eth_GetDem_E_ACCESS(CtrlIndex)                                     ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[9u] )
#define Eth_GetDem_E_TX_INTERNAL(CtrlIndex)                                ( Eth_CfgPtr->pControler[(CtrlIndex)]->demEventCfg[10u] )
/* @} */

/**
 *  \brief Eth function like macro to access controler configuration
 *  @{
 */
#define Eth_IsVirtualMacModeEnable(CtrlIndex)                              ( Eth_CfgPtr->pControler[(CtrlIndex)]->enableVirtualMac )
#define Eth_GetTxChannelThreadOffset(CtrlIndex)                            ( 0xf000U )
#define Eth_VirtMacGetEthFwRpcComChannelId(CtrlIndex)                      ( Eth_CfgPtr->pControler[(CtrlIndex)]->virtualMacCfg->ethfwRpcComChId )
#define Eth_VirtMacGetEthPollRecvMsgInEthMain(CtrlIndex)                   ( Eth_CfgPtr->pControler[(CtrlIndex)]->virtualMacCfg->pollRecvMsgInEthMain )
#define Eth_VirtMacGetRpcCmdCompleteFuncPtr(CtrlIndex)                     ( Eth_CfgPtr->pControler[(CtrlIndex)]->virtualMacCfg->rpcCmdComplete )
#define Eth_VirtMacGetFwRegisterFuncPtr(CtrlIndex)                         ( Eth_CfgPtr->pControler[(CtrlIndex)]->virtualMacCfg->fwRegisteredCb )

#define Eth_GetTxEnableInterrupt(CtrlIndex)                                ( Eth_CfgPtr->pControler[(CtrlIndex)]->enableTxIrq )
#define Eth_GetRxEnableInterrupt(CtrlIndex)                                ( Eth_CfgPtr->pControler[(CtrlIndex)]->enableRxIrq )
#define Eth_GetEnetType(CtrlIndex)                                         ( Eth_CfgPtr->pControler[(CtrlIndex)]->enetType )
#define Eth_GetMacPortNum(CtrlIndex)                                       ( Eth_CfgPtr->pControler[(CtrlIndex)]->macPort )
#define Eth_GetMacAddressHigh(CtrlIndex)                                   ( Eth_CfgPtr->pControler[(CtrlIndex)]->macAddrHigh )
#define Eth_GetMacAddressLow(CtrlIndex)                                    ( Eth_CfgPtr->pControler[(CtrlIndex)]->macAddrLow )
#define Eth_UseDefaultMacAddress(CtrlIndex)                                ( Eth_CfgPtr->pControler[(CtrlIndex)]->useDefaultMac )
#define Eth_GetRxMaxFrameLength(CtrlIndex)                                 ( Eth_CfgPtr->pControler[(CtrlIndex)]->rxMaxFrameLength )
#define Eth_GetTxMaxFrameLength(CtrlIndex)                                 ( Eth_CfgPtr->pControler[(CtrlIndex)]->txMaxFrameLength )
#define Eth_GetMiiConnectionType(CtrlIndex)                                ( Eth_CfgPtr->pControler[(CtrlIndex)]->connType )
#define Eth_GetLoopBackMode(CtrlIndex)                                     ( Eth_CfgPtr->pControler[(CtrlIndex)]->loopback )
#define Eth_GetHardwareLoopTimeout(CtrlIndex)                              ( Eth_CfgPtr->pControler[(CtrlIndex)]->hwLoopTimeout )
#define Eth_GetEnableCacheOps(CtrlIndex)                                   ( Eth_CfgPtr->pControler[(CtrlIndex)]->enableCacheOps )
#define Eth_GetCacheWritebackInvalidateFuncPtr(CtrlIndex)                  ( Eth_CfgPtr->pControler[(CtrlIndex)]->cacheWbInv )
#define Eth_GetCacheWritebackFuncPtr(CtrlIndex)                            ( Eth_CfgPtr->pControler[(CtrlIndex)]->cacheWb )
#define Eth_GetCacheInvalidateFuncPtr(CtrlIndex)                           ( Eth_CfgPtr->pControler[(CtrlIndex)]->cacheInv )
#define Eth_DescriptorGetCacheWritebackInvalidateFuncPtr(CtrlIndex)        ( Eth_CfgPtr->pControler[(CtrlIndex)]->descCacheWbInv )
#define Eth_DescriptorGetCacheWritebackFuncPtr(CtrlIndex)                  ( Eth_CfgPtr->pControler[(CtrlIndex)]->descCacheWb )
#define Eth_DescriptorGetCacheInvalidateFuncPtr(CtrlIndex)                 ( Eth_CfgPtr->pControler[(CtrlIndex)]->descCacheInv )
#define Eth_RingGetCacheWritebackInvalidateFuncPtr(CtrlIndex)              ( Eth_CfgPtr->pControler[(CtrlIndex)]->ringCacheWbInv )
#define Eth_RingGetCacheWritebackFuncPtr(CtrlIndex)                        ( Eth_CfgPtr->pControler[(CtrlIndex)]->ringCacheWb )
#define Eth_RingGetCacheInvalidateFuncPtr(CtrlIndex)                       ( Eth_CfgPtr->pControler[(CtrlIndex)]->ringCacheInv )

#define Eth_Cpsw_GetPhyMacRegAddr()                                        ( Eth_CfgPtr->pControler[(0U)]->cpswCfg->phyMacAddr )
#define Eth_Cpsw_GetAleRegAddr()                                           ( Eth_CfgPtr->pControler[(0U)]->cpswCfg->aleAddr )
#define Eth_Cpsw_GetCptsRegAddr()                                          ( Eth_CfgPtr->pControler[(0U)]->cpswCfg->cptsAddr )
#define Eth_Cpsw_GetMdioRegAddr()                                          ( Eth_CfgPtr->pControler[(0U)]->cpswCfg->mdioAddr )
#define Eth_Cpsw_GetCtrlRegAddr()                                          ( Eth_CfgPtr->pControler[(0U)]->cpswCfg->ctrlAddr )
#define Eth_Cpsw_GetCptsRefClockFreq()                                     ( Eth_CfgPtr->pControler[(0U)]->cpswCfg->cptsRefClockFreq )
#define Eth_Cpsw_GetCppiClockFreq()                                        ( Eth_CfgPtr->pControler[(0U)]->cpswCfg->cppiClockFreqHz )

#define Eth_Cpsw_GetMdioBusClockFreq(CtrlIndex)                            ( Eth_CfgPtr->pControler[(CtrlIndex)]->mdioBusFreqHz )
#define Eth_Cpsw_GetMdioOpMode(CtrlIndex)                                  ( Eth_CfgPtr->pControler[(CtrlIndex)]->mdioOpMode )

#define Eth_GetUdmaCfgAddress(CtrlIndex)                                   ( Eth_CfgPtr->pControler[(CtrlIndex)]->dmaCfgPtr )

#define Eth_GetRxMtuLength(CtrlIndex)                                      ( Eth_GetUdmaCfgAddress(CtrlIndex)->rxMtuLength )
#define Eth_GetTxChanStartNum(CtrlIndex)                                   ( Eth_GetUdmaCfgAddress(CtrlIndex)->startTxNum )
#define Eth_GetRxChanStartNum(CtrlIndex)                                   ( Eth_GetUdmaCfgAddress(CtrlIndex)->startRxNum )
#define Eth_GetEgressFifoTotalNum(CtrlIndex)                               ( Eth_GetUdmaCfgAddress(CtrlIndex)->totalEgressFifoNum )
#define Eth_GetIngressFifoTotalNum(CtrlIndex)                              ( Eth_GetUdmaCfgAddress(CtrlIndex)->totalIngressFifoNum )
#define Eth_GetRingTotalNum(CtrlIndex)                                     ( Eth_GetUdmaCfgAddress(CtrlIndex)->totalRingNum)
#define Eth_GetEventTotalNum(CtrlIndex)                                    ( Eth_GetUdmaCfgAddress(CtrlIndex)->totalEventNum)
#define Eth_GetTxChanTotalNum(CtrlIndex)                                   ( Eth_GetUdmaCfgAddress(CtrlIndex)->totalTxChanNum)
#define Eth_GetRxChanTotalNum(CtrlIndex)                                   ( Eth_GetUdmaCfgAddress(CtrlIndex)->totalRxChanNum)
#define Eth_GetRingEventTotalNum(CtrlIndex)                                ( Eth_GetUdmaCfgAddress(CtrlIndex)->totalRingEventNum)

#define Eth_GetEgressFifoPacketNum(CtrlIndex, FifoIdx)                     ( Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].fifoNum )
#define Eth_GetEgressFifoPacketSize(CtrlIndex, FifoIdx)                    ( Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].elemSize )

#define Eth_GetIngressFifoPacketNum(CtrlIndex, FifoIdx)                    ( Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].fifoNum )
#define Eth_GetIngressFifoPacketSize(CtrlIndex, FifoIdx)                   ( Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].elemSize )

#define Eth_GetEgressFifoTotalBufferSize(CtrlIndex, FifoIdx)               ( Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].totalSize )
#define Eth_GetEgressFifoDescAddress(CtrlIndex, FifoIdx, DescIdx)          (&Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].descPtr[(DescIdx)] )
#define Eth_GetEgressFifoDescUserInfoAddress(CtrlIndex, FifoIdx, DescIdx)  (&Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].descPtr[(DescIdx)].bufferInfo)
#define Eth_GetEgressFifoBufferDataAddress(CtrlIndex, FifoIdx, DescIdx)    (&Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].fifoBufferPtr[(DescIdx) * Eth_GetEgressFifoPacketSize(CtrlIndex, FifoIdx)] )
#define Eth_GetEgressFifoQueueAddress(CtrlIndex, FifoIdx)                  ( Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].queuePtr)
#define Eth_GetEgressFifoBufferState(CtrlIndex, FifoIdx, BufferIdx)        ( Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].bufferState[(BufferIdx)] )
#define Eth_SetEgressFifoBufferState(CtrlIndex, FifoIdx, BufferIdx, Val)   ( Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoCfgPtr[(FifoIdx)].bufferState[(BufferIdx)] = Val )

#define Eth_GetIngressFifoTotalBufferSize(CtrlIndex, FifoIdx)              ( Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].totalSize )
#define Eth_GetIngressFifoDescAddress(CtrlIndex, FifoIdx, DescIdx)         (&Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].descPtr[(DescIdx)] )
#define Eth_GetIngressFifoDescUserInfoAddress(CtrlIndex, FifoIdx, DescIdx) (&Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].descPtr[(DescIdx)].bufferInfo )
#define Eth_GetIngressFifoBufferDataAddress(CtrlIndex, FifoIdx, DescIdx)   (&Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].fifoBufferPtr[(DescIdx) * Eth_GetIngressFifoPacketSize(CtrlIndex, FifoIdx)] )
#define Eth_GetIngressFifoQueueAddress(CtrlIndex, FifoIdx)                 ( Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].queuePtr)
#define Eth_GetIngressFifoBufferState(CtrlIndex, FifoIdx, BufferIdx)       ( Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].bufferState[(BufferIdx)] )
#define Eth_SetIngressFifoBufferState(CtrlIndex, FifoIdx, BufferIdx, Val)  ( Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoCfgPtr[(FifoIdx)].bufferState[(BufferIdx)] = Val )

#define Eth_GetIngressFifoCqIdx(CtrlIndex, FifoIdx)                        ( Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoRingMapCfgPtr[(FifoIdx)].cqRingIdx )
#define Eth_GetIngressFifoFqIdx(CtrlIndex, FifoIdx)                        ( Eth_GetUdmaCfgAddress(CtrlIndex)->ingressFifoRingMapCfgPtr[(FifoIdx)].fqRingIdx )
#define Eth_GetEgressFifoCqIdx(CtrlIndex, FifoIdx)                         ( Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoRingMapCfgPtr[(FifoIdx)].cqRingIdx )
#define Eth_GetEgressFifoFqIdx(CtrlIndex, FifoIdx)                         ( Eth_GetUdmaCfgAddress(CtrlIndex)->egressFifoRingMapCfgPtr[(FifoIdx)].fqRingIdx )

#define Eth_GetTxChanId(CtrlIndex, ChIdx)                                  ( Eth_GetUdmaCfgAddress(CtrlIndex)->txChanCfgPtr[(ChIdx)].chId )
#define Eth_GetTxChanTdCqRingIdx(CtrlIndex, ChIdx)                         ( Eth_GetUdmaCfgAddress(CtrlIndex)->txChanCfgPtr[(ChIdx)].tdCqRingIdx )
#define Eth_GetTxChanDepth(CtrlIndex, ChIdx)                               ( 128U )

#define Eth_GetRxChanId(CtrlIndex, ChIdx)                                  ( Eth_GetUdmaCfgAddress(CtrlIndex)->rxChanCfgPtr[(ChIdx)].chId )
#define Eth_GetRxChanTdCqRingIdx(CtrlIndex, ChIdx)                         ( Eth_GetUdmaCfgAddress(CtrlIndex)->rxChanCfgPtr[(ChIdx)].tdCqRingIdx )
#define Eth_GetRxChanFlowTotalNum(CtrlIndex, ChIdx)                        ( Eth_GetUdmaCfgAddress(CtrlIndex)->rxChanFlowCfgPtr[(ChIdx)].flowNum )
#define Eth_GetRxChanFlowStartNum(CtrlIndex, ChIdx)                        ( Eth_GetUdmaCfgAddress(CtrlIndex)->rxChanFlowCfgPtr[(ChIdx)].startFlowId )

#define Eth_GetFlowTotalNumber(CtrlIndex)                                  ( Eth_GetUdmaCfgAddress(CtrlIndex)->totalFlowNum )
#define Eth_GetFlowId(CtrlIndex, FlowIdx)                                  ( Eth_GetUdmaCfgAddress(CtrlIndex)->flowCfgPtr[(FlowIdx)].flowId )
#define Eth_GetFlowCqRingIdx(CtrlIndex, FlowIdx)                           ( Eth_GetUdmaCfgAddress(CtrlIndex)->flowCfgPtr[(FlowIdx)].cqRingIdx )
#define Eth_GetFlowFqRingIdx(CtrlIndex, FlowIdx)                           ( Eth_GetUdmaCfgAddress(CtrlIndex)->flowCfgPtr[(FlowIdx)].fqRingIdx )

#define Eth_GetDynRingElemAddress(CtrlIndex, RingIdx)                      (&Eth_GetUdmaCfgAddress(CtrlIndex)->ringDynPtr[(RingIdx)])

#define Eth_GetRingHwId(CtrlIndex, RingIdx)                                ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringCfgPtr[(RingIdx)].hwId )
#define Eth_GetRingTotalElemNum(CtrlIndex, RingIdx)                        ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringCfgPtr[(RingIdx)].size )
#define Eth_GetRingPriority(CtrlIndex, RingIdx)                            ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringCfgPtr[(RingIdx)].priority )
#define Eth_GetRingMemBaseAddress(CtrlIndex, RingIdx)                      ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringCfgPtr[(RingIdx)].memPtr )

#define Eth_GetRingEventRingIdx(CtrlIndex, RingEvtIdx)                     ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringEvenCfgPtr[(RingEvtIdx)].ringIdx )
#define Eth_GetRingEventGlobalEventNum(CtrlIndex, RingEvtIdx)              ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringEvenCfgPtr[(RingEvtIdx)].globalEvent )
#define Eth_GetRingEventVirtBitNum(CtrlIndex, RingEvtIdx)                  ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringEvenCfgPtr[(RingEvtIdx)].virtBitNum )
#define Eth_GetRingEventEventIdx(CtrlIndex, RingEvtIdx)                    ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringEvenCfgPtr[(RingEvtIdx)].eventIdx )
#define Eth_GetRingEventSrcOffsetNum(CtrlIndex, RingEvtIdx)                ( Eth_GetUdmaCfgAddress(CtrlIndex)->ringEvenCfgPtr[(RingEvtIdx)].srcOffset )

#define Eth_GetEventCoreIntrNum(CtrlIndex, EvtIdx)                         ( Eth_GetUdmaCfgAddress(CtrlIndex)->eventCfgPtr[(EvtIdx)].coreIntrNum )
#define Eth_GetEventVirtIntrNum(CtrlIndex, EvtIdx)                         ( Eth_GetUdmaCfgAddress(CtrlIndex)->eventCfgPtr[(EvtIdx)].virtIntrNum )
#define Eth_GetEventIrIntrNum(CtrlIndex, EvtIdx)                           ( Eth_GetUdmaCfgAddress(CtrlIndex)->eventCfgPtr[(EvtIdx)].IrIntrNum )

#define Eth_GetTxEventCoreIntrNum(CtrlIndex)                               ( Eth_GetUdmaCfgAddress(CtrlIndex)->txCoreIrq )
#define Eth_GetRxEventCoreIntrNum(CtrlIndex)                               ( Eth_GetUdmaCfgAddress(CtrlIndex)->rxCoreIrq )

#define Eth_GetHwTimerTotalNum(CtrlIndex)                                  ( Eth_CfgPtr->pControler[(CtrlIndex)]->totalHwTimerNum)
#define Eth_GetHwTimerId(CtrlIndex, Index)                                 ( Eth_CfgPtr->pControler[(CtrlIndex)]->hwTimerCfgPtr[(Index)].hwTimerId )
#define Eth_GetHwTimerCounter(CtrlIndex, Index)                            ( Eth_CfgPtr->pControler[(CtrlIndex)]->hwTimerCfgPtr[(Index)].hwTimerCounter )
#define Eth_GetHwTimerIntervalMs(CtrlIndex, Index)                         ( Eth_CfgPtr->pControler[(CtrlIndex)]->hwTimerCfgPtr[(Index)].hwTimerIntervalMs )
#define Eth_GetHwTimerBaseAddr(CtrlIndex, Index)                           ( 0x40400000U + (0x10000U * Eth_GetHwTimerId(CtrlIndex, Index)) )

#define Eth_GetHwTimerDynRunningState(CtrlIndex, Index)                    ( Eth_CfgPtr->pControler[(CtrlIndex)]->hwTimerDynPtr[(Index)] )
#define Eth_SetHwTimerDynRunningState(CtrlIndex, Index, Val)               ( Eth_CfgPtr->pControler[(CtrlIndex)]->hwTimerDynPtr[(Index)] = (Val) )

#define Eth_GetRxIrqPacingEnable(CtrlIndex)                                ( Eth_CfgPtr->pControler[(CtrlIndex)]->enableRxIrqPacing )
#define Eth_GetTxIrqPacingEnable(CtrlIndex)                                ( Eth_CfgPtr->pControler[(CtrlIndex)]->enableTxIrqPacing )
#define Eth_GetRxHwTimerIdx(CtrlIndex)                                     ( Eth_CfgPtr->pControler[(CtrlIndex)]->rxHwTimerIdx )
#define Eth_GetTxHwTimerIdx(CtrlIndex)                                     ( Eth_CfgPtr->pControler[(CtrlIndex)]->txHwTimerIdx )
#define Eth_GetIrqPacingEnable(CtrlIndex)                                  ( Eth_GetTxIrqPacingEnable(CtrlIndex) || Eth_GetRxIrqPacingEnable(CtrlIndex) )

/* @} */

/* ========================================================================== */
/*                         Structures and Enums                               */
/* ========================================================================== */

/**
 *  \brief MDIO operating mode.
 *
 *  MDIO operating mode enumeration.
 */
typedef enum
{
    ETH_MDIO_OPMODE_NORMAL    = 0x00U,
    /**< Normal mode */
    ETH_MDIO_OPMODE_MANUAL    = 0x01U,
    /**< Manual mode (Used for software-emulated MDIO operations) */
} Eth_MdioOperModeType;

/**
 *  \brief Eth Cpsw Configurations type
 *  Configuration related to Cpsw data
 */
typedef struct Eth_CpswConfigType_s
{
    uint32 phyMacAddr;
    /**< Mac address register address */
    uint32 aleAddr;
    /**< Address lookup engine register address */
    uint32 cptsAddr;
    /**< Common platform time sync register address */
    uint32 mdioAddr;
    /**< Mdio resgister address */
    uint32 ctrlAddr;
    /**< control register addresss */
    uint32 cptsRefClockFreq;
    /**< Cpts clock frequency reference value*/
    uint32 cppiClockFreqHz;
    /**< Cpts clock frequency HZ*/
} Eth_CpswConfigType;

typedef struct Eth_Udma_RingCfgType_s
{
    uint64 *memPtr;
    /**< Eth Udma ring memory */
    uint32  hwId;
    /**< Eth Udma ring hw number */
    uint32  size;
    /**< Eth Udma ring size */
    uint32  priority;
    /**< Eth Udma ring priority */
} Eth_Udma_RingCfgType;

typedef struct Eth_Udma_EventCfgType_s
{
    uint32  coreIntrNum;
    /**< Eth Udma core interrupt number */
    uint32  virtIntrNum;
    /**< Eth Udma virtual number */
    uint32  IrIntrNum;
    /**< Eth Udma Ir Interrupt number */
} Eth_Udma_EventCfgType;

/**
 *  \brief Eth ring event configuration type
 *  Configuration related to ring event
 */
typedef struct Eth_Udma_RingEventCfgType_s
{
    uint8  ringIdx;
    /**< Ring index */
    uint8  eventIdx;
    /**< Event index */
    uint8  virtBitNum;
    /**< Virtual bit number */
    uint32 globalEvent;
    /**< Global event number */
    uint32 srcOffset;
    /**< Source Irq offset */
} Eth_Udma_RingEventCfgType;

/**
 *  \brief Eth Fifo ring map configuration type
 *  Configuration related to fifo map to ring
 */
typedef struct Eth_FifoRingMapCfgType_s
{
    uint8 cqRingIdx;
    /**< Completion queue index */
    uint8 fqRingIdx;
    /**< Free queue index */
} Eth_FifoRingMapCfgType;

/**
 *  \brief Eth channel configuration type
 *  Configuration related to channel
 */
typedef struct Eth_ChannelCfgType_s
{
    uint8 tdCqRingIdx;
    /**< Teardown completion queue index */
    uint16 chId;
    /**< Channel hardware Id */
} Eth_ChannelCfgType;

/**
 *  \brief Eth flow configuration type
 *  Configuration related to flow
 */
typedef struct Eth_FlowCfgType_s
{
    uint8  cqRingIdx;
    /**< Completion queue index */
    uint8  fqRingIdx;
    /**< Free queue index */
    uint16 flowId;
    /**< Flow hardware Id */
} Eth_FlowCfgType;

/**
 *  \brief Eth channel flow configuration type
 *  Configuration related to channel flow
 */
typedef struct Eth_ChannelFlowCfgType_s
{
    uint8            flowNum;
    /**< Eth flow number */
    uint16           startFlowId;
    /**< Eth Flow start ID */
} Eth_ChannelFlowCfgType;

/**
 *  \brief Eth Fifo configuration type
 *  Configuration related to Fifo
 */
typedef struct Eth_FifoHandleType_s
{
    uint8         *fifoBufferPtr;
    /**< Eth Fifo memory buffer */
    Eth_DescType  *descPtr;
    /**< Eth Fifo descriptor memory buffer */
    Eth_QueueType *queuePtr;
    /**< Eth Fifo descriptor queue memory buffer */
    uint8         *bufferState;
    /**< Eth Fifo buffer state memory buffer */
    uint8         fifoNum;
    /**< Eth Fifo number */
    uint16        elemSize;
    /**< Eth Fifo element size */
    uint32        totalSize;
    /**< Eth Fifo total memory buffer size */
} Eth_FifoHandleType;

/**
 *  \brief Eth Udma configuration type
 *  Configuration related to Udma
 */
typedef struct Eth_Udma_CfgType_s
{
    Eth_Udma_EventCfgType     *eventCfgPtr;
    /**< Eth Udma event configuration pointer */
    Eth_Udma_RingCfgType      *ringCfgPtr;
    /**< Eth Udma ring configuration pointer */
    Eth_Udma_RingDynType      *ringDynPtr;
    /**< Eth Udma ring dynamic pointer */
    Eth_Udma_RingEventCfgType *ringEvenCfgPtr;
    /**< Eth Udma ring event configuration pointer */
    Eth_FifoHandleType        *egressFifoCfgPtr;
    /**< Eth egress configuration pointer */
    Eth_FifoHandleType        *ingressFifoCfgPtr;
    /**< Eth ingress configuration pointer */
    Eth_FifoRingMapCfgType    *egressFifoRingMapCfgPtr;
    /**< Eth egress fifo ring map configuration pointer */
    Eth_FifoRingMapCfgType    *ingressFifoRingMapCfgPtr;
    /**< Eth ingress fifo ring map configuration pointer */
    Eth_ChannelCfgType        *txChanCfgPtr;
    /**< Eth tx channel configuration pointer */
    Eth_ChannelCfgType        *rxChanCfgPtr;
    /**< Eth rx channel configuration pointer */
    Eth_ChannelFlowCfgType    *rxChanFlowCfgPtr;
    /**< Eth rx channel configuration pointer */
    Eth_FlowCfgType    *flowCfgPtr;
    /**< Eth flow configuration pointer */
    uint16 startTxNum;
    /**< Eth Udma Tx channel start */
    uint16 startRxNum;
    /**< Eth Udma Rx channel start */
    uint8 totalEventNum;
    /**< Eth Udma total event number */
    uint8 totalRingNum;
    /**< Eth Udma total ring number */
    uint8 totalRingEventNum;
    /**< Eth Udma total ring event number */
    uint8 totalEgressFifoNum;
    /**< Eth Udma total egress number */
    uint8 totalIngressFifoNum;
    /**< Eth Udma total ingress number */
    uint8 totalTxChanNum;
    /**< Eth Udma total tx channel number */
    uint8 totalRxChanNum;
    /**< Eth Udma total rx channel number */
    uint8 totalFlowNum;
    /**< Eth Udma total flow number */
    uint8 txCoreIrq;
    /**< Eth Udma TX Core Irq number */
    uint8 rxCoreIrq;
    /**< Eth Udma RX Core Irq number */
    uint16 rxMtuLength;
    /**< Eth Rx MTU length */
} Eth_Udma_CfgType;

/**
 *  \brief Eth driver virtual mac configuration data
 *  Configuration related to virtual MAC configuration.
 */
typedef struct Eth_VirtualMacConfigType_s
{
    uint32 ethfwRpcComChId;
    /**< CddIpc Communication channel */
    Eth_RpcCmdComplete rpcCmdComplete;
    /**< Callback to inidcate completion of prior Eth_dispatchVirtmacXXX API */
    boolean pollRecvMsgInEthMain;
    /**< Flag to enable Eth Rpc recv msg polling in Eth_main */
    Eth_RpcFwRegistered fwRegisteredCb;
    /**< App Callback invoked on ethernet firmware registration is done  */
} Eth_VirtualMacConfigType;

/**
 *  \brief Eth driver hardware timer configuration data
 *  Configuration related to hardware timer.
 */
typedef struct Eth_HwTimerConfigType_s
{
    uint8  hwTimerId;
    /**< hw timer id */
    uint32 hwTimerCounter;
    /**< hw timer counter */
    uint32 hwTimerIntervalMs;
    /**< hw timer interval in Ms */
} Eth_HwTimerConfigType;

/**
 *  \brief Eth controller configuration type
 * Configuration related to Eth controller configuration.
 */
typedef struct Eth_ControlerConfigType_s
{
    uint32 ctrlIdx;
    /**< Controller index */
    Eth_EnetType enetType;
    /**< CPSW Type identifier */
    Eth_PortType macPort;
    /**< In native MAC mode ethDriver supports control of only one MAC port */
    uint32 macAddrHigh;
    /**< 4 high bytes Mac address */
    uint32 macAddrLow;
    /**< 2 low bytes Mac address */
    boolean useDefaultMac;
    /**< use default Mac */
    Eth_MacConnectionType connType;
    /**< MII connection type */
    boolean loopback;
    /**< Loopback enable */
    uint32 hwLoopTimeout;
    /**< hardware loop timeout */
    uint32 mdioBusFreqHz;
    /**< Mdio Bus frequency HZ*/
    Eth_MdioOperModeType mdioOpMode;
    /**< MDIO Operating Mode (Normal/Manual) */
    boolean enableTxIrq;
    /**< enable tx IRQ */
    boolean enableRxIrq;
    /**< enable Rx IRQ */
    boolean enableCacheOps;
    /**< Packet memory is cacheable */
    Eth_CacheWbInv cacheWbInv;
    /**< Cache write-back invalidate function */
    Eth_CacheWb cacheWb;
    /**< Cache write-back function */
    Eth_CacheInv cacheInv;
    /**< Cache invalidate function */
    Eth_CacheWbInv descCacheWbInv;
    /**< Cache write-back invalidate function for descriptor memory*/
    Eth_CacheWb descCacheWb;
    /**< Cache write-back function for descriptor memory */
    Eth_CacheInv descCacheInv;
    /**< Cache invalidate function for descriptor memory */
    Eth_CacheWbInv ringCacheWbInv;
    /**< Cache write-back invalidate function for ring memory */
    Eth_CacheWb ringCacheWb;
    /**< Cache write-back function for ring memory */
    Eth_CacheInv ringCacheInv;
    /**< Cache invalidate function for ring memory */
    boolean enableVirtualMac;
    /**< Enable Virtual MAC mode of operation*/
    uint16 demEventNum;
    /**< Dem event configuration number */
    boolean enableRxIrqPacing;
    /**< enable tx IRQ pacing */
    boolean enableTxIrqPacing;
    /**< enable Rx IRQ pacing */
    uint8 totalHwTimerNum;
    /**< Eth total hardware number */
    uint8 rxHwTimerIdx;
    /**< Rx Hardware timer Idx  */
    uint8 txHwTimerIdx;
    /**< Tx Hardware timer Idx  */
    Eth_VirtualMacConfigType *virtualMacCfg;
    /**< Virtual MAC config */
    uint16 *demEventCfg;
    /**< DEM list pointer */
    Eth_CpswConfigType *cpswCfg;
    /**< Cpsw configuration pointer */
    Eth_Udma_CfgType *dmaCfgPtr;
    /**< Cpsw configuration pointer */
    Eth_HwTimerConfigType *hwTimerCfgPtr;
    /**< Hardware timer configuration pointer */
    boolean *hwTimerDynPtr;
    /**< Hardware timer dynamic data pointer */
} Eth_ControlerConfigType;

/**
 *  \brief Eth configuration type
 *  Configuration data of all controller
 */
typedef struct Eth_ConfigType_s
{
    Eth_ControlerConfigType *pControler[ETH_CTRL_ID_MAX];
    /**< Controller pointer list  */
} Eth_ConfigType;

/* ========================================================================== */
/*                         Generate Configuration                             */
/* ========================================================================== */

#define  ETH_START_SEC_CONST_UNSPECIFIED
#include "Eth_MemMap.h"

extern CONST(Eth_ConfigType, ETH_VAR_NO_INIT) EthConfigSet_0;

#define  ETH_STOP_SEC_CONST_UNSPECIFIED
#include "Eth_MemMap.h"

#define  ETH_START_SEC_VAR_INIT_UNSPECIFIED
#include "Eth_MemMap.h"

extern P2CONST(Eth_ConfigType, ETH_VAR_NO_INIT, ETH_APPL_CONST) Eth_CfgPtr;

#define  ETH_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "Eth_MemMap.h"

/* ========================================================================== */
/*                          Function Declarations                             */
/* ========================================================================== */

/* ========================================================================== */
/*                          External Function Prototype                       */
/* ========================================================================== */

#define ETH_START_SEC_CODE
#include "Eth_MemMap.h"

/** \brief Function to write-back and invalidate cache */
extern void EthApp_wbInvCache(uint8 *buf, uint16 len);
/** \brief Function to write-back cache */
extern void EthApp_wbCache(uint8 *buf, uint16 len);
/** \brief Function to invalidate cache */
extern void EthApp_invCache(uint8 *buf, uint16 len);

#define ETH_STOP_SEC_CODE
#include "Eth_MemMap.h"

#ifdef __cplusplus
}
#endif

#endif  /* #ifndef ETH_CFG_H_ */

/* @} */
