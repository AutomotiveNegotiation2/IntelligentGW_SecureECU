/*
*
* Copyright (C) 2023 Texas Instruments Incorporated
*
* All rights reserved not granted herein.
*
* Limited License.
*
* Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
* license under copyrights and patents it now or hereafter owns or controls to make,
* have made, use, import, offer to sell and sell ("Utilize") this software subject to the
* terms herein.  With respect to the foregoing patent license, such license is granted
* solely to the extent that any such patent is necessary to Utilize the software alone.
* The patent license shall not apply to any combinations which include this software,
* other than combinations with devices manufactured by or for TI ("TI Devices").
* No hardware patent is licensed hereunder.
*
* Redistributions must preserve existing copyright notices and reproduce this license
* (including the above copyright notice and the disclaimer and (if applicable) source
* code license limitations below) in the documentation and/or other materials provided
* with the distribution
*
* Redistribution and use in binary form, without modification, are permitted provided
* that the following conditions are met:
*
* *       No reverse engineering, decompilation, or disassembly of this software is
* permitted with respect to any software provided in binary form.
*
* *       any redistribution and use are licensed by TI for use only with TI Devices.
*
* *       Nothing shall obligate TI to provide you with source code for the software
* licensed and provided to you in object code.
*
* If software source code is provided to you, modification and redistribution of the
* source code are permitted provided that the following conditions are met:
*
* *       any redistribution and use of the source code, including any resulting derivative
* works, are licensed by TI for use only with TI Devices.
*
* *       any redistribution and use of any object code compiled from the source code
* and any resulting derivative works, are licensed by TI for use only with TI Devices.
*
* Neither the name of Texas Instruments Incorporated nor the names of its suppliers
*
* may be used to endorse or promote products derived from this software without
* specific prior written permission.
*
* DISCLAIMER.
*
* THIS SOFTWARE IS PROVIDED BY TI AND TI'S LICENSORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL TI AND TI'S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

  /****************************************************************************
    Project: PWM_CONFIG_J7200
    Date   : 2022-03-02 14:10:11

    This file is generated by EB Tresos
    Do not modify this file,otherwise the software may behave in unexpected way.

 ******************************************************************************/

/**
 *  \file     Pwm_Cfg.h
 *
 *  \brief    This file contains generated pre compile configuration file
 *            for PWM MCAL driver.
 *
 */

/**
 *  \defgroup MCAL_PWM_CFG PWM Configuration
 *
 *  This files defines PWM MCAL configuration structures
 *  @{
 */

#ifndef PWM_CFG_H
#define PWM_CFG_H

#ifdef __cplusplus
extern "C" {
#endif

/* ========================================================================== */
/*                           Macros & Typedefs                                */
/* ========================================================================== */
/**
 *  \brief PWM Build Variant.
 *   Build variants.(i.e Pre-compile,Post-build or Link time)
 */
#define PWM_PRE_COMPILE_VARIANT         (STD_ON )


 /** \brief Enable/Disable PWM DeInit API */
#define PWM_DEINIT_API                  (STD_ON)

/** \brief Enable/Disable PWM SetDutyCycle API */
#define PWM_SET_DUTY_CYCLE_API          (STD_ON)

/** \brief Enable/Disable PWM SetOutputToIdle API */
#define PWM_SET_OUTPUT_TO_IDLE_API      (STD_ON)

/** \brief Enable/Disable PWM SetPeriodAndDuty API */
#define PWM_SET_PERIOD_AND_DUTY_API     (STD_ON)

/** \brief Enable/Disable PWM VersionInfo API */
#define PWM_VERSION_INFO_API            (STD_ON)

/** \brief Enable/Disable PWM RegisterReadback API */
#define PWM_REGISTER_READBACK_API       (STD_ON)

/** \brief Enable/Disable PWM Dutycycle update always at the end of the period */
#define PWM_DUTYCYCLE_UPDATED_ENDPERIOD (STD_ON)

/** \brief Enable/Disable PWM Period update always at the end of the period */
#define PWM_PERIOD_UPDATED_ENDPERIOD    (STD_ON)

/** \brief ISR type */
#define PWM_ISR_TYPE                    (PWM_ISR_CAT1)

/** \brief Number of configured channels */
#define PWM_NUM_CHANNELS                (1U)

/** \brief Enable/Disable PWM dev detect error */
#define PWM_DEV_ERROR_DETECT            (STD_ON)

/** \brief Enable/Disable PWM notifications */
#define PWM_NOTIFICATION_SUPPORTED      (STD_ON)

/** \brief Counter ID for counter used to count wait ticks */
#define PWM_OS_COUNTER_ID               ((CounterType)OsCounter_0)

/** \brief Instance ID for driver module to toggle between GPT and EPWM usage */
#define PWM_INDEX                       (0U)

#define PWM_INSTANCE_ID                 (PWM_INDEX)

#define PWM_USE_EPWM

/**
 *  \brief timeout.
 *   Each tick is 31.25us (for 32K Counter). Wait for 5s which comes to
 *   below value
 */
#define PWM_TIMEOUT_DURATION            (32000U)

/**
*  \brief Channel ID
*  Symbolic Names Configured channel ID(s)
*/
#define PwmConf_PwmChannelConfiguration_PwmChannel_0          (1U)
/**< Channel identifiers */

/**
 *  \brief Pre Compile config macro name.
 */
#define PWM_INIT_CONFIG_PC              PwmChannelConfigSet




#define EHRPWM_BASE_OFFSET              0x8000U
#define PWM_MAX_NUM_CHANNELS            (6U)

/** \brief EPWM Channel 2, in MAIN DOMAIN */
#define PWM_CHANNEL2                    (1U)


extern CONST(uint32, PWM_CONST)Pwm_HwUnitBaseAddr[PWM_MAX_NUM_CHANNELS];

/* ========================================================================== */
/*                         Structures and Enums                               */
/* ========================================================================== */
/** \brief PWM Configuration structure declaration */
extern const struct Pwm_ConfigType_PC_s PwmChannelConfigSet_PC;
extern const struct Pwm_ConfigType_s PwmChannelConfigSet;







/* ========================================================================== */
/*                          Function Declarations                             */
/* ========================================================================== */
/* < Channel identifiers */




/** \brief EPWM Channel 2 ISR */
#if (STD_ON == PWM_NOTIFICATION_SUPPORTED)
#ifdef PWM_USE_EPWM
FUNC(void, PWM_CODE_FAST) Pwm_Ch2Notify(void);
#endif   /* End of PWM_USE_EPWM */
#endif   /* End of PWM_NOTIFICATION_SUPPORTED */


#ifdef __cplusplus
}
#endif

#endif /* PWM_CFG_H */

/* @} */
