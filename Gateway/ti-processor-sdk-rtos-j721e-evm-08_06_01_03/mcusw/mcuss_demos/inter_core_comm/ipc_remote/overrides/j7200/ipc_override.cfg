/*
*
* Copyright (c) 2023 Texas Instruments Incorporated
*
* All rights reserved not granted herein.
*
* Limited License.
*
* Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
* license under copyrights and patents it now or hereafter owns or controls to make,
* have made, use, import, offer to sell and sell ("Utilize") this software subject to the
* terms herein.  With respect to the foregoing patent license, such license is granted
* solely to the extent that any such patent is necessary to Utilize the software alone.
* The patent license shall not apply to any combinations which include this software,
* other than combinations with devices manufactured by or for TI ("TI Devices").
* No hardware patent is licensed hereunder.
*
* Redistributions must preserve existing copyright notices and reproduce this license
* (including the above copyright notice and the disclaimer and (if applicable) source
* code license limitations below) in the documentation and/or other materials provided
* with the distribution
*
* Redistribution and use in binary form, without modification, are permitted provided
* that the following conditions are met:
*
* *       No reverse engineering, decompilation, or disassembly of this software is
* permitted with respect to any software provided in binary form.
*
* *       any redistribution and use are licensed by TI for use only with TI Devices.
*
* *       Nothing shall obligate TI to provide you with source code for the software
* licensed and provided to you in object code.
*
* If software source code is provided to you, modification and redistribution of the
* source code are permitted provided that the following conditions are met:
*
* *       any redistribution and use of the source code, including any resulting derivative
* works, are licensed by TI for use only with TI Devices.
*
* *       any redistribution and use of any object code compiled from the source code
* and any resulting derivative works, are licensed by TI for use only with TI Devices.
*
* Neither the name of Texas Instruments Incorporated nor the names of its suppliers
*
* may be used to endorse or promote products derived from this software without
* specific prior written permission.
*
* DISCLAIMER.
*
* THIS SOFTWARE IS PROVIDED BY TI AND TI'S LICENSORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL TI AND TI'S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var GateSwi = xdc.useModule('ti.sysbios.gates.GateSwi');
var Clock = xdc.module('ti.sysbios.knl.Clock');

var SysMin = xdc.module('xdc.runtime.SysMin');
SysMin.bufSize = 0x80000; 

var coreId = java.lang.System.getenv("CORE");

if(coreId=="c7x_1" || coreId=="c66xdsp_1" || coreId =="c66xdsp_2")
{
    /* Idle function */
    var Idle = xdc.useModule ('ti.sysbios.knl.Idle');
    Idle.addFunc('&sysIdleLoop');

    var Task = xdc.useModule('ti.sysbios.knl.Task');
    Task.enableIdleTask = true;
}

if(coreId=="mcu1_0" || coreId=="mcu1_1" || coreId=="mcu2_0" || coreId=="mcu2_1")
{
    var MPU = xdc.useModule('ti.sysbios.family.arm.MPU');

    var attrs = new MPU.RegionAttrs();
    MPU.initRegionAttrsMeta(attrs);

    attrs.enable = true;
    attrs.bufferable = false;
    attrs.cacheable = false;
    attrs.shareable = true;
    attrs.noExecute = false;
    attrs.accPerm = 1;          /* RW at PL1 */
    attrs.tex = 0;
    attrs.subregionDisableMask = 0;
    MPU.setRegionMeta(7, 0xA4000000, MPU.RegionSize_8M, attrs);

    var Reset = xdc.useModule("xdc.runtime.Reset");
    Reset.fxns[Reset.fxns.length++] = "&utilsCopyVecs2ATcm";
}

if(coreId=="mcu3_0" || coreId=="mcu3_1")
{
    var MPU = xdc.useModule('ti.sysbios.family.arm.MPU');

    var attrs = new MPU.RegionAttrs();
    MPU.initRegionAttrsMeta(attrs);

    attrs.enable = true;
    attrs.bufferable = false;
    attrs.cacheable = false;
    attrs.shareable = true;
    attrs.noExecute = false;
    attrs.accPerm = 1;          /* RW at PL1 */
    attrs.tex = 0;
    attrs.subregionDisableMask = 0;
    MPU.setRegionMeta(7, 0xA4000000, MPU.RegionSize_8M, attrs);

    var Reset = xdc.useModule("xdc.runtime.Reset");
    Reset.fxns[Reset.fxns.length++] = "&utilsCopyVecs2ATcm";
}

/* Set ipc/VRing buffer as uncached */
if(coreId=="c66xdsp_1" || coreId =="c66xdsp_2" )
{
    var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
    Cache.setMarMeta(0xA4000000, 0x800000, Cache.Mar_DISABLE);
}

if(coreId=="mpu1_0")
{
    var Mmu = xdc.module('ti.sysbios.family.arm.v8a.Mmu');
    Mmu.initFunc = "&InitMmu";
}

if(coreId=="c7x_1")
{
    var Mmu = xdc.module('ti.sysbios.family.c7x.Mmu');
    Mmu.initFunc = "&InitMmu";
}

/* Dont use TI RTOS allocated vecs section. We keep in TCM, via linker cmd file */
Program.sectionsExclude = ".vecs";

