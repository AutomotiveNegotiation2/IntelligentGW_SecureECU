/*
*
* Copyright (c) 2023-2020 Texas Instruments Incorporated
*
* All rights reserved not granted herein.
*
* Limited License.
*
* Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
* license under copyrights and patents it now or hereafter owns or controls to make,
* have made, use, import, offer to sell and sell ("Utilize") this software subject to the
* terms herein.  With respect to the foregoing patent license, such license is granted
* solely to the extent that any such patent is necessary to Utilize the software alone.
* The patent license shall not apply to any combinations which include this software,
* other than combinations with devices manufactured by or for TI ("TI Devices").
* No hardware patent is licensed hereunder.
*
* Redistributions must preserve existing copyright notices and reproduce this license
* (including the above copyright notice and the disclaimer and (if applicable) source
* code license limitations below) in the documentation and/or other materials provided
* with the distribution
*
* Redistribution and use in binary form, without modification, are permitted provided
* that the following conditions are met:
*
* *       No reverse engineering, decompilation, or disassembly of this software is
* permitted with respect to any software provided in binary form.
*
* *       any redistribution and use are licensed by TI for use only with TI Devices.
*
* *       Nothing shall obligate TI to provide you with source code for the software
* licensed and provided to you in object code.
*
* If software source code is provided to you, modification and redistribution of the
* source code are permitted provided that the following conditions are met:
*
* *       any redistribution and use of the source code, including any resulting derivative
* works, are licensed by TI for use only with TI Devices.
*
* *       any redistribution and use of any object code compiled from the source code
* and any resulting derivative works, are licensed by TI for use only with TI Devices.
*
* Neither the name of Texas Instruments Incorporated nor the names of its suppliers
*
* may be used to endorse or promote products derived from this software without
* specific prior written permission.
*
* DISCLAIMER.
*
* THIS SOFTWARE IS PROVIDED BY TI AND TI'S LICENSORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL TI AND TI'S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/
 /***************************************************************************
  Project: CAN_CONFIG_J7200
  Date   : 2022-07-18 12:45:20
  This file is generated by EB Tresos
  Do not modify this file, otherwise the software may behave in unexpected way.

 *****************************************************************************/

/**
 *  \file     Can_Cfg.h
 *
 *  \brief    This file contains generated pre compile configuration file for
 *            CAN MCAL driver
 *
 */

/**
 *
 ******************************************************************************
 * \defgroup MCAL_CAN_CFG Can Configuration
 *
 * This files defines CAN MCAL configuration structures
 *  @{
 ******************************************************************************/

#ifndef CAN_CFG_H_
#define CAN_CFG_H_

#include "Dem.h"

#ifdef __cplusplus
extern "C" {
#endif


/**
*  \brief CAN Build Variant.
*   Build variants.(i.e Pre Compile,Post Build)
*/

#define CAN_VARIANT_PRE_COMPILE (STD_ON)

/**
 *  \name Can Driver Configuration SW Version Info
 *
 *  Pre-compile switches for enabling/disabling CAN MCAL APIs
 *  @{
 */
#define CAN_VERSION_INFO_API                (STD_ON)
/*!< Enable/Disable Can_GetVersionInfo() */

#define CAN_DEV_ERROR_DETECT                (STD_ON)
/*!< Enable/Disable DEV error detection */

#define CAN_SAFETY_DIAGNOSTIC               (STD_ON)
/*!< Enable/Disable Can Safety Diagnostic */

#define CAN_LOOPBACK_ENABLE                 (STD_ON)
/*!< Enable/Disable Can_TestLoopBackModeEnable() */
#define CAN_REGISTER_READBACK_API           (STD_ON)
/*!< Enable/Disable Can_ConfigRegReadBack() */
#define CAN_WAKEUP_FUNCTIONALITY_API        (STD_OFF)
/*!< Enable/Disable Can_CheckWakeup() */
#define CAN_MULTIPLEXED_TRANSMISSION_ENABLE (STD_ON)
/*!< Enable/Disable Multiplexed Transmission */

/**
 *  \brief Pre Compile config macro name.
 */


#define CAN_INIT_CONFIG_PC       CanConfigSet




/*Requirements: MCAL-2311 */
#define CAN_TX_POLLING      (STD_OFF)
/*!< Enable/Disable Can_MainFunction_Write */
#define CAN_RX_POLLING      (STD_OFF)
/*!< Enable/Disable Can_MainFunction_Read */
#define CAN_BUSOFF_POLLING  (STD_OFF)
/*!< Enable/Disable Can_MainFunction_BusOff */
#define CAN_WAKEUP_POLLING  (STD_OFF)
/*!< Enable/Disable Can_MainFunction_Wakeup */

/* @} */

#define CAN_NUM_CONTROLLER          (4U)
/*!< Number of controllers defined*/

#define CAN_NUM_MAILBOXES           (8U)
/*!< Number of mailboxes defined*/

#define CAN_MAX_CONTROLLER          (20U)
/*!< Max number of controller instances per SOC */

#define CAN_MAX_MAILBOXES   		(64U)
/*!< Max number of mailboxes per controller */

#define CAN_ISR_TYPE                (CAN_ISR_CAT1)
/*!< OSEK Category 1 ISR Type */

#define CLK_CAN_FD_FREQ             (80U)
/*!< Clock source frequency CAN FD */

/**
 *  \name Can Controller Id names
 *
 *  Defines for symbolic names for the CanControllerIds
 *  @{
 */
#define CanConf_CanController_CanController_0   (0U)
#define CanConf_CanController_CanController_1   (1U)
#define CanConf_CanController_CanController_2   (2U)
#define CanConf_CanController_CanController_3   (3U)
/* @} */

/* @} */







#define CAN_CONTROLLER_MCAN0
/*!< MCAN0 CONTROLLER INSTANCE */
























#define CAN_CONTROLLER_MCAN4
/*!< MCAN4 CONTROLLER INSTANCE */

#define CAN_CONTROLLER_MCAN8
/*!< MCAN8 CONTROLLER INSTANCE */

#define CAN_CONTROLLER_MCAN10
/*!< MCAN10 CONTROLLER INSTANCE */





































































































/**
 *  \name Can HW Object names
 *
 *  Defines for symbolic names for the CanHardwareObjectIds
 *  @{
 */

#define CanConf_CanHardwareObject_CanHardwareObject_0   (0U)
#define CAN_HTRH_0         (CanConf_CanHardwareObject_CanHardwareObject_0)

#define CanConf_CanHardwareObject_CanHardwareObject_1   (1U)
#define CAN_HTRH_1         (CanConf_CanHardwareObject_CanHardwareObject_1)

#define CanConf_CanHardwareObject_CanHardwareObject_2   (2U)
#define CAN_HTRH_2         (CanConf_CanHardwareObject_CanHardwareObject_2)

#define CanConf_CanHardwareObject_CanHardwareObject_3   (3U)
#define CAN_HTRH_3         (CanConf_CanHardwareObject_CanHardwareObject_3)

#define CanConf_CanHardwareObject_CanHardwareObject_4   (4U)
#define CAN_HTRH_4         (CanConf_CanHardwareObject_CanHardwareObject_4)

#define CanConf_CanHardwareObject_CanHardwareObject_5   (5U)
#define CAN_HTRH_5         (CanConf_CanHardwareObject_CanHardwareObject_5)

#define CanConf_CanHardwareObject_CanHardwareObject_6   (6U)
#define CAN_HTRH_6         (CanConf_CanHardwareObject_CanHardwareObject_6)

#define CanConf_CanHardwareObject_CanHardwareObject_7   (7U)
#define CAN_HTRH_7         (CanConf_CanHardwareObject_CanHardwareObject_7)

/* @} */

/* @} */

/** \brief Counter ID for counter used to count wait ticks */
#define CAN_OS_COUNTER_ID               ((CounterType)OsCounter_0)

/**
*  \brief CAN timeout - used in CAN IFCMD busy wait and Start/Stop busy wait.
*   Specifies the maximum time for blocking function until a timeout is detected.
*   Unit is milli seconds.
*/
#define CAN_TIMEOUT_DURATION            (10000U)

/**
 *  \name CAN DEM Error codes to report
 *
 *  Pre-compile switches for enabling/disabling DEM events
 *  @{
 */
#define DemConf_DemEventParameter_CAN_DEM_NO_EVENT (0xFFFFU)
#define CAN_DEM_NO_EVENT DemConf_DemEventParameter_CAN_DEM_NO_EVENT

#ifndef CAN_E_HARDWARE_ERROR
/** \brief Hardware failed */
#define CAN_E_HARDWARE_ERROR          (DemConf_DemEventParameter_CAN_E_HARDWARE_ERROR)
#endif

/* @} */

/* ========================================================================== */
/*                         Structures and Enums                               */
/* ========================================================================== */

/** \brief CAN Configuration struct declaration */
extern const struct Can_ConfigType_s CanConfigSet;


/** \brief CAN Controller Configuration Pre Compile struct declaration */
extern const struct Can_ControllerStruct_PC CanConfigSet_PC_CanController_0;

/** \brief CAN Controller Configuration Pre Compile struct declaration */
extern const struct Can_ControllerStruct_PC CanConfigSet_PC_CanController_1;

/** \brief CAN Controller Configuration Pre Compile struct declaration */
extern const struct Can_ControllerStruct_PC CanConfigSet_PC_CanController_2;

/** \brief CAN Controller Configuration Pre Compile struct declaration */
extern const struct Can_ControllerStruct_PC CanConfigSet_PC_CanController_3;


/** \brief CAN Controller Pre Compile Configuration List */
extern const struct Can_ControllerStruct_PC
    *CanConfigSet_CanController_List_PC[CAN_NUM_CONTROLLER];

/** \brief CAN Mailbox Pre Compile Configuration List */
extern const struct Can_MailboxStruct_PC
    *CanConfigSet_CanHardwareObject_List_PC[CAN_NUM_MAILBOXES];

/* Design :CAN_DesignId_004 */
/**
 * \brief Can Controller Instances enum
 */
typedef enum
{

   CAN_CONTROLLER_INSTANCE_MCAN0 = 2U,
    /**< MCAN0 Controller Instance */


   CAN_CONTROLLER_INSTANCE_MCAN4 = 6U,
    /**< MCAN4 Controller Instance */


   CAN_CONTROLLER_INSTANCE_MCAN8 = 10U,
    /**< MCAN8 Controller Instance */


   CAN_CONTROLLER_INSTANCE_MCAN10 = 12U,
    /**< MCAN10 Controller Instance */

} Can_ControllerInstance;

/* ========================================================================== */
/*                            Global Variables                                */
/* ========================================================================== */
/** \brief Base Address of the can peripherals */
extern CONST(uint32, CAN_CONST)
    Can_MsgmemRAMBaseAddr[CAN_MAX_CONTROLLER];

extern CONST(uint32, CAN_CONST)
    Can_MCANSSBaseAddr[CAN_MAX_CONTROLLER];

extern CONST(uint32, CAN_CONST)
    Can_MCANCoreRegBaseAddr[CAN_MAX_CONTROLLER];

extern CONST(uint32, CAN_CONST)
    Can_MCANECCAggrRegBaseAddr[CAN_MAX_CONTROLLER];
/* ========================================================================== */
/*                          Function Declarations                             */
/* ========================================================================== */




/** \brief MCAN0 Controller Instance ISR */
FUNC(void, CAN_CODE) Can_2_Int0ISR(void);




/** \brief MCAN4 Controller Instance ISR */
FUNC(void, CAN_CODE) Can_6_Int0ISR(void);




/** \brief MCAN8 Controller Instance ISR */
FUNC(void, CAN_CODE) Can_10_Int0ISR(void);




/** \brief MCAN10 Controller Instance ISR */
FUNC(void, CAN_CODE) Can_12_Int0ISR(void);

#ifdef __cplusplus
}
#endif

#endif /*CAN_CFG_H__*/

/* @} */
/**********************************************************************************************************************
 *  END OF FILE: Can_Cfg.h
 *********************************************************************************************************************/
