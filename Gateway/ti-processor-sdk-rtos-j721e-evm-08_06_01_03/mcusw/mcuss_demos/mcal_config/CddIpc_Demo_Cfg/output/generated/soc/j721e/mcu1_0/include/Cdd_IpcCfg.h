/*
*
* Copyright (c) 2023 Texas Instruments Incorporated
*
* All rights reserved not granted herein.
*
* Limited License.
*
* Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
* license under copyrights and patents it now or hereafter owns or controls to make,
* have made, use, import, offer to sell and sell ("Utilize") this software subject to the
* terms herein.  With respect to the foregoing patent license, such license is granted
* solely to the extent that any such patent is necessary to Utilize the software alone.
* The patent license shall not apply to any combinations which include this software,
* other than combinations with devices manufactured by or for TI ("TI Devices").
* No hardware patent is licensed hereunder.
*
* Redistributions must preserve existing copyright notices and reproduce this license
* (including the above copyright notice and the disclaimer and (if applicable) source
* code license limitations below) in the documentation and/or other materials provided
* with the distribution
*
* Redistribution and use in binary form, without modification, are permitted provided
* that the following conditions are met:
*
* *       No reverse engineering, decompilation, or disassembly of this software is
* permitted with respect to any software provided in binary form.
*
* *       any redistribution and use are licensed by TI for use only with TI Devices.
*
* *       Nothing shall obligate TI to provide you with source code for the software
* licensed and provided to you in object code.
*
* If software source code is provided to you, modification and redistribution of the
* source code are permitted provided that the following conditions are met:
*
* *       any redistribution and use of the source code, including any resulting derivative
* works, are licensed by TI for use only with TI Devices.
*
* *       any redistribution and use of any object code compiled from the source code
* and any resulting derivative works, are licensed by TI for use only with TI Devices.
*
* Neither the name of Texas Instruments Incorporated nor the names of its suppliers
*
* may be used to endorse or promote products derived from this software without
* specific prior written permission.
*
* DISCLAIMER.
*
* THIS SOFTWARE IS PROVIDED BY TI AND TI'S LICENSORS "AS IS" AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL TI AND TI'S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

/**
 *  \file     Cdd_IpcCfg.h
 *
 *  \brief    This file contains generated pre compile configurations
 *            for CDD IPC MCAL driver
 *
 */

/******************************************************************************
    Project         : CDD_IPC_CONFIG_J721E
    Date            : 2022-01-25 16:39:20
    SW Ver          : 1.3.3
    Module Rele Ver : AUTOSAR 4.3.1 0

    This file is generated by EB Tresos
    Do not modify this file,otherwise the software may behave in unexpected way.
******************************************************************************/

/**
 *  \defgroup MCAL_IPC_CFG CDD Ipc Configuration
 *
 *  This files defines CDD Ipc configuration structures
 *  @{
 */

#ifndef CDD_IPC_CFG_H_
#define CDD_IPC_CFG_H_
/* Generic requirements covered mapping */
/*
 * Design : DES_CDD_IPC_020
 */
/*
 * Requirements : MCAL-3698
 */

/* ========================================================================== */
/*                             Include Files                                  */
/* ========================================================================== */

#include "Dem.h"
#include "Os.h"
#include <CddIpc/ipc_baremetal_hw/include/ipc_config.h>


#ifdef __cplusplus
extern "C" {
#endif

/* ========================================================================== */
/*                           Macros & Typedefs                                */
/* ========================================================================== */
/*
 * Design : DES_CDD_IPC_004, DES_CDD_IPC_002, DES_CDD_IPC_017
 */
/*
 * Requirements : MCAL-921, MCAL-3703
 */
/**
*  \brief Pre-Compile Build Variant flag.
*   STD_ON for VariantPreCompile / STD_OFF for VariantPostBuild
*/
#define CDD_IPC_PRE_COMPILE_VARIANT    (STD_ON)
/*
 * Design : DES_CDD_IPC_012
 */
/*
 * Requirements : MCAL-3693
 */
/** \brief Enable/disable CDD Ipc dev detect error */
#define CDD_IPC_DEV_ERROR_DETECT       (STD_OFF)
/*
 * Design : DES_CDD_IPC_012
 */
/*
 * Requirements : MCAL-3692
 */
/** \brief ISR type */
#define CDD_IPC_ISR_TYPE               (CDD_IPC_ISR_CAT2)

/**
 *  \name Pre-Compile Switches for API Services
 *  @{
 */
/*
 * Design : DES_CDD_IPC_012
 */
/*
 * Requirements : MCAL-3741
 */
/** \brief Enable/disable version info API */
#define CDD_IPC_VERSION_INFO_API       (STD_ON)
/*
 * Design : DES_CDD_IPC_012
 */
/*
 * Requirements : MCAL-3688
 */
/** \brief Enable/disable De Initialization API */
#define CDD_IPC_DEINIT_API             (STD_ON)
/*
 * Design : DES_CDD_IPC_012
 */
/*
 * Requirements : MCAL-3689
 */
/** \brief Enable/disable Service Announcement API */
#define CDD_IPC_ANNOUNCE_API           (STD_ON)
/*
 * Design : DES_CDD_IPC_005, DES_CDD_IPC_012
 */
/*
 * Requirements : MCAL-3687
 */
/** \brief Enable/disable Critical Register read back API */
#define CDD_IPC_REGISTER_READBACK_API  (STD_ON)

/*
 * Design : DES_CDD_IPC_040
 */
/*
 * Requirements : MCAL-4452
 */

/** \brief Enable/disable Cdd_IpcIsInitDone API */
#define CDD_IPC_IS_INIT_DONE_API       (STD_ON)

/*
 * Design : DES_CDD_IPC_041
 */
/*
 * Requirements : MCAL-4453
 */

/** \brief Enable/disable Cdd_IpcGetMaxMsgSize API */
#define CDD_IPC_GET_MAX_MSG_SIZE_API   (STD_ON)


/* @} */

/**
 *  \name Dependency configurations
 *  @{
 */
/*
 * Design : DES_CDD_IPC_012
 */
/*
 * Requirements : MCAL-3694, MCAL-3694
 */
/** \brief Counter ID for counter used to count wait ticks */
#define CDD_IPC_OS_COUNTER_ID          ((CounterType)OsCounter_0)

/**
 *  \name Cdd Ipc DEM Error codes to report
 *
 *  Pre-compile switches for enabling/disabling DEM events
 *  @{
 */
/*
 * Design : DES_CDD_IPC_020
 */
/*
 * Requirements : MCAL-3693
 */
#define DemConf_DemEventParameter_CDD_IPC_DEM_NO_EVENT (0xFFFFU)
#define CDD_IPC_DEM_NO_EVENT DemConf_DemEventParameter_CDD_IPC_DEM_NO_EVENT

#ifndef CDD_IPC_E_HARDWARE_ERROR
/** \brief Hardware failed */
#define CDD_IPC_E_HARDWARE_ERROR       (DemConf_DemEventParameter_CDD_IPC_E_HARDWARE_ERROR)
#endif
/* @} */

/**
 *  \name CORE Names
 *  @{
 */
/*
 * Design : DES_CDD_IPC_018
 */
/*
 * Requirements : MCAL-3699, MCAL-3700
 */
#define    CDD_IPC_CORE_MCU1_0          (1U)
/**< ARM MCU  R5F - core0 */
#define    CDD_IPC_CORE_MCU1_1          (2U)
/**< ARM MCU  R5F - core1 */
#define    CDD_IPC_CORE_MCU2_0          (3U)
/**< ARM Main R5F - core0 */
#define    CDD_IPC_CORE_MCU2_1          (4U)
/**< ARM Main R5F - core1 */
#define    CDD_IPC_CORE_MCU3_0          (5U)
/**< ARM Main R5F - core2 */
#define    CDD_IPC_CORE_MCU3_1          (6U)
/**< ARM Main R5F - core3 */
#define    CDD_IPC_CORE_C66X_1          (7U)
/**< DSP C66x - core0 */
#define    CDD_IPC_CORE_C66X_2          (8U)
/**< DSP C66x - core1 */
#define    CDD_IPC_CORE_C7X_1           (9U)
/**< DSP C7x - core0 */
#define    CDD_IPC_CORE_MAX_PROCS       (11U)
/**< MAX processors */

/** \brief Used core identifiers */
#define CDD_IPC_OWN_CORE_ID    (CDD_IPC_CORE_MCU1_0)
/**< Own core ID */
#define CDD_IPC_REMOTE_CORE_MCU2_0_USED
/**< Remote core MCU 2 0 is being used */
#define CDD_IPC_REMOTE_CORE_MCU2_1_USED
/**< Remote core MCU 2 1 is being used */

/* @} */


/**
 *  \name VirtIO Object
 *  @{
 */
/*
 * Design : DES_CDD_IPC_005, DES_CDD_IPC_016
 */
/*
 * Requirements : MCAL-3686,
 */
#define CDD_IPC_VERTIO_OBJECT_SIZE     (0x1000U)
 /* @} */

/**
 *  \name Communication Channel ID & Configured Buffer sizes
 *  @{
 */
/*
 * Design : DES_CDD_IPC_016
 */
/*
 * Requirements : MCAL-3686,
 */
#define CddIpcConf_IpcComChanId_Cdd_IpcMcu20      (0U)
/**< Channel identifiers */
#define CddIpcConf_IpcComChanId_Cdd_IpcMcu21      (1U)
/**< Channel identifiers */

/*
 * Design : DES_CDD_IPC_016
 */
/*
 * Requirements : MCAL-3755, MCAL-3682
 */
#define CDD_IPC_RPMSG_OBJ_SIZE      (256U)
/**< Size of RP Message Object */
#define CDD_IPC_CH_0_BUFF_SIZE   ((256U * (496U + 32U)) + CDD_IPC_RPMSG_OBJ_SIZE)
/**< Size of buffer allocated to the channel */
#define CDD_IPC_CH_1_BUFF_SIZE   ((256U * (496U + 32U)) + CDD_IPC_RPMSG_OBJ_SIZE)
/**< Size of buffer allocated to the channel */
#define CDD_IPC_MAX_CHANNEL_CFG  (2U)
/**< Maximum number of communication channels configured */

/**
 * \brief VRing Buffer Size required for all core
 * combinations.
 */
#define IPC_VRING_BUFFER_SIZE   (0x1C00000U)

/** \brief Core definitions */
#define    IPC_MPU1_0           (0U)    /**< ARM A72 - VM0 */
#define    IPC_MCU1_0           (1U)    /**< ARM MCU  R5F - core0 */
#define    IPC_MCU1_1           (2U)    /**< ARM MCU  R5F - core1 */
#define    IPC_MCU2_0           (3U)    /**< ARM Main R5F - core0 */
#define    IPC_MCU2_1           (4U)    /**< ARM Main R5F - core1 */
#define    IPC_MCU3_0           (5U)    /**< ARM Main R5F - core2 */
#define    IPC_MCU3_1           (6U)    /**< ARM Main R5F - core3 */
#define    IPC_C66X_1           (7U)    /**< DSP C66x - core0 */
#define    IPC_C66X_2           (8U)    /**< DSP C66x - core1 */
#define    IPC_C7X_1            (9U)    /**< DSP C7x - core0 */
#define    IPC_MPU1_1          (10U)    /**< ARM A72 - VM1 */
#define    IPC_MAX_PROCS       (11U)    /**< Maximum Processors */

/** \brief IPC maximum possible core ID
 */
#define CDD_IPC_CORE_ID_MAX         (11U)

#define IPC_MAILBOX_CLUSTER_CNT     (12U)

/* @} */
/* ========================================================================== */
/*                           Globals Variables                                */
/* ========================================================================== */
/* Mailbox Cluster Base Address */
extern const uint32 IPC_Mailbox_BasePhyAddr[IPC_MAILBOX_CLUSTER_CNT];

/**
 *  \brief Processor IDs to name mapping for all processor in Jacinto7
 */
extern Ipc_ProcInfo g_Ipc_mp_procInfo[IPC_MAX_PROCS];

extern Ipc_MailboxInfo   g_IPC_MailboxInfo[IPC_MAX_PROCS][IPC_MAX_PROCS];

/* ========================================================================== */
/*                          Function Declarations                             */
/* ========================================================================== */
/*
 * Design : DES_CDD_IPC_002, DES_CDD_IPC_017
 */
/*
 * Requirements : MCAL-3703
 */
extern const struct Cdd_IpcConfigType_s CddIpcConfiguraions_PC;

/**
 * \brief New Message notification function
 *
 */
/*
 * Design : DES_CDD_IPC_012, DES_CDD_IPC_026
 */
/*
 * Requirements : MCAL-3701, MCAL-3691
 */
extern void Cdd_IpcNewMessageNotify(uint32 comId);

#define CDD_IPC_NEW_MSG_NTFY_FXN Cdd_IpcNewMessageNotify

#if (STD_ON == CDD_IPC_ANNOUNCE_API)

/**
 * \brief New Control Message notification function
 *
 */
/*
 * Design : DES_CDD_IPC_039
 */
/*
 * Requirements : MCAL-4067, MCAL-4066
 */
extern void Cdd_IpcNewCtrlMessageNotify(uint32 remoteProcId);

#define CDD_IPC_NEW_CTRL_MSG_NTFY_FXN Cdd_IpcNewCtrlMessageNotify

#endif /* STD_ON == CDD_IPC_ANNOUNCE_API */

/*
 * Design : DES_CDD_IPC_013
 */
/*
 * Requirements : MCAL-3674
 */
/**
 *  \brief Communication Channels configured
 *
 */
extern uint8 Cdd_IpcDrvVertIoObj[CDD_IPC_VERTIO_OBJECT_SIZE];

/** \brief A Mailbox can raise multiple interrupts. In this implementation, the
 *          Mailbox new message interrupt is used determine presence of data
 *          from the remote core in the vring.
 *
 *          Typically, we would have 1 interrupt for each remote core. Due to
 *          system resource needs, multiple remote cores could use a single
 *          interrupt.
 *
 *          Depending on the SoC variant, the isr to registered with interrupt
 *          will change. Please refer CDD IPC example application to associate
 *          right ISR with interrupt.
 */

/** \brief ISR for New Message, from MCU 2 0*/
ISR( Cdd_IpcIrqMbxFromMcu_20 );
/** \brief ISR for New Message, from MCU 2 1*/
ISR( Cdd_IpcIrqMbxFromMcu_21 );

#ifdef __cplusplus
}
#endif

#endif  /* #ifndef CDD_IPC_CFG_H_ */

/* @} */
