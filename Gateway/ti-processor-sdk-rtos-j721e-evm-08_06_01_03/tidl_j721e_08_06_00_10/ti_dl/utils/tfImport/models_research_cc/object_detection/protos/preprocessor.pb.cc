// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/preprocessor.proto

#include "object_detection/protos/preprocessor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvertClassLogitsToSoftmax_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAdjustBrightness_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAdjustContrast_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAdjustHue_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAdjustSaturation_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomBlackPatches_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomCropImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomCropPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomCropToAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomDistortColor_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomHorizontalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomImageScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomJitterBoxes_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomPixelValueScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomRGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomResizeMethod_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomRotation90_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomVerticalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSDRandomCrop_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSDRandomCropFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSDRandomCropPad_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSDRandomCropPadFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropPadFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropPadOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScaleBoxesToPixelCoordinates_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubtractChannelMean_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
namespace object_detection {
namespace protos {
class PreprocessingStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreprocessingStep> _instance;
  const ::object_detection::protos::NormalizeImage* normalize_image_;
  const ::object_detection::protos::RandomHorizontalFlip* random_horizontal_flip_;
  const ::object_detection::protos::RandomPixelValueScale* random_pixel_value_scale_;
  const ::object_detection::protos::RandomImageScale* random_image_scale_;
  const ::object_detection::protos::RandomRGBtoGray* random_rgb_to_gray_;
  const ::object_detection::protos::RandomAdjustBrightness* random_adjust_brightness_;
  const ::object_detection::protos::RandomAdjustContrast* random_adjust_contrast_;
  const ::object_detection::protos::RandomAdjustHue* random_adjust_hue_;
  const ::object_detection::protos::RandomAdjustSaturation* random_adjust_saturation_;
  const ::object_detection::protos::RandomDistortColor* random_distort_color_;
  const ::object_detection::protos::RandomJitterBoxes* random_jitter_boxes_;
  const ::object_detection::protos::RandomCropImage* random_crop_image_;
  const ::object_detection::protos::RandomPadImage* random_pad_image_;
  const ::object_detection::protos::RandomCropPadImage* random_crop_pad_image_;
  const ::object_detection::protos::RandomCropToAspectRatio* random_crop_to_aspect_ratio_;
  const ::object_detection::protos::RandomBlackPatches* random_black_patches_;
  const ::object_detection::protos::RandomResizeMethod* random_resize_method_;
  const ::object_detection::protos::ScaleBoxesToPixelCoordinates* scale_boxes_to_pixel_coordinates_;
  const ::object_detection::protos::ResizeImage* resize_image_;
  const ::object_detection::protos::SubtractChannelMean* subtract_channel_mean_;
  const ::object_detection::protos::SSDRandomCrop* ssd_random_crop_;
  const ::object_detection::protos::SSDRandomCropPad* ssd_random_crop_pad_;
  const ::object_detection::protos::SSDRandomCropFixedAspectRatio* ssd_random_crop_fixed_aspect_ratio_;
  const ::object_detection::protos::SSDRandomCropPadFixedAspectRatio* ssd_random_crop_pad_fixed_aspect_ratio_;
  const ::object_detection::protos::RandomVerticalFlip* random_vertical_flip_;
  const ::object_detection::protos::RandomRotation90* random_rotation90_;
  const ::object_detection::protos::RGBtoGray* rgb_to_gray_;
  const ::object_detection::protos::ConvertClassLogitsToSoftmax* convert_class_logits_to_softmax_;
} _PreprocessingStep_default_instance_;
class NormalizeImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizeImage> _instance;
} _NormalizeImage_default_instance_;
class RandomHorizontalFlipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomHorizontalFlip> _instance;
} _RandomHorizontalFlip_default_instance_;
class RandomVerticalFlipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomVerticalFlip> _instance;
} _RandomVerticalFlip_default_instance_;
class RandomRotation90DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomRotation90> _instance;
} _RandomRotation90_default_instance_;
class RandomPixelValueScaleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomPixelValueScale> _instance;
} _RandomPixelValueScale_default_instance_;
class RandomImageScaleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomImageScale> _instance;
} _RandomImageScale_default_instance_;
class RandomRGBtoGrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomRGBtoGray> _instance;
} _RandomRGBtoGray_default_instance_;
class RandomAdjustBrightnessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomAdjustBrightness> _instance;
} _RandomAdjustBrightness_default_instance_;
class RandomAdjustContrastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomAdjustContrast> _instance;
} _RandomAdjustContrast_default_instance_;
class RandomAdjustHueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomAdjustHue> _instance;
} _RandomAdjustHue_default_instance_;
class RandomAdjustSaturationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomAdjustSaturation> _instance;
} _RandomAdjustSaturation_default_instance_;
class RandomDistortColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomDistortColor> _instance;
} _RandomDistortColor_default_instance_;
class RandomJitterBoxesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomJitterBoxes> _instance;
} _RandomJitterBoxes_default_instance_;
class RandomCropImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomCropImage> _instance;
} _RandomCropImage_default_instance_;
class RandomPadImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomPadImage> _instance;
} _RandomPadImage_default_instance_;
class RandomCropPadImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomCropPadImage> _instance;
} _RandomCropPadImage_default_instance_;
class RandomCropToAspectRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomCropToAspectRatio> _instance;
} _RandomCropToAspectRatio_default_instance_;
class RandomBlackPatchesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomBlackPatches> _instance;
} _RandomBlackPatches_default_instance_;
class RandomResizeMethodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomResizeMethod> _instance;
} _RandomResizeMethod_default_instance_;
class RGBtoGrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RGBtoGray> _instance;
} _RGBtoGray_default_instance_;
class ScaleBoxesToPixelCoordinatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScaleBoxesToPixelCoordinates> _instance;
} _ScaleBoxesToPixelCoordinates_default_instance_;
class ResizeImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResizeImage> _instance;
} _ResizeImage_default_instance_;
class SubtractChannelMeanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubtractChannelMean> _instance;
} _SubtractChannelMean_default_instance_;
class SSDRandomCropOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCropOperation> _instance;
} _SSDRandomCropOperation_default_instance_;
class SSDRandomCropDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCrop> _instance;
} _SSDRandomCrop_default_instance_;
class SSDRandomCropPadOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCropPadOperation> _instance;
} _SSDRandomCropPadOperation_default_instance_;
class SSDRandomCropPadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCropPad> _instance;
} _SSDRandomCropPad_default_instance_;
class SSDRandomCropFixedAspectRatioOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCropFixedAspectRatioOperation> _instance;
} _SSDRandomCropFixedAspectRatioOperation_default_instance_;
class SSDRandomCropFixedAspectRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCropFixedAspectRatio> _instance;
} _SSDRandomCropFixedAspectRatio_default_instance_;
class SSDRandomCropPadFixedAspectRatioOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCropPadFixedAspectRatioOperation> _instance;
} _SSDRandomCropPadFixedAspectRatioOperation_default_instance_;
class SSDRandomCropPadFixedAspectRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSDRandomCropPadFixedAspectRatio> _instance;
} _SSDRandomCropPadFixedAspectRatio_default_instance_;
class ConvertClassLogitsToSoftmaxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvertClassLogitsToSoftmax> _instance;
} _ConvertClassLogitsToSoftmax_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_ConvertClassLogitsToSoftmax_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ConvertClassLogitsToSoftmax_default_instance_;
    new (ptr) ::object_detection::protos::ConvertClassLogitsToSoftmax();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ConvertClassLogitsToSoftmax::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvertClassLogitsToSoftmax_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConvertClassLogitsToSoftmax_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_NormalizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_NormalizeImage_default_instance_;
    new (ptr) ::object_detection::protos::NormalizeImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::NormalizeImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NormalizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_PreprocessingStep_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_PreprocessingStep_default_instance_;
    new (ptr) ::object_detection::protos::PreprocessingStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::PreprocessingStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_PreprocessingStep_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 28, 0, InitDefaultsscc_info_PreprocessingStep_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {
      &scc_info_NormalizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomHorizontalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomPixelValueScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomImageScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomRGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomAdjustBrightness_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomAdjustContrast_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomAdjustHue_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomAdjustSaturation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomDistortColor_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomJitterBoxes_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomCropImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomCropPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomCropToAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomBlackPatches_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomResizeMethod_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_ScaleBoxesToPixelCoordinates_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_ResizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_SubtractChannelMean_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_SSDRandomCrop_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_SSDRandomCropPad_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_SSDRandomCropFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_SSDRandomCropPadFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomVerticalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RandomRotation90_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_RGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_ConvertClassLogitsToSoftmax_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_RGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RGBtoGray_default_instance_;
    new (ptr) ::object_detection::protos::RGBtoGray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RGBtoGray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomAdjustBrightness_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomAdjustBrightness_default_instance_;
    new (ptr) ::object_detection::protos::RandomAdjustBrightness();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomAdjustBrightness::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAdjustBrightness_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomAdjustBrightness_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomAdjustContrast_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomAdjustContrast_default_instance_;
    new (ptr) ::object_detection::protos::RandomAdjustContrast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomAdjustContrast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAdjustContrast_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomAdjustContrast_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomAdjustHue_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomAdjustHue_default_instance_;
    new (ptr) ::object_detection::protos::RandomAdjustHue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomAdjustHue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAdjustHue_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomAdjustHue_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomAdjustSaturation_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomAdjustSaturation_default_instance_;
    new (ptr) ::object_detection::protos::RandomAdjustSaturation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomAdjustSaturation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomAdjustSaturation_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomAdjustSaturation_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomBlackPatches_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomBlackPatches_default_instance_;
    new (ptr) ::object_detection::protos::RandomBlackPatches();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomBlackPatches::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomBlackPatches_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomBlackPatches_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomCropImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomCropImage_default_instance_;
    new (ptr) ::object_detection::protos::RandomCropImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomCropImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomCropImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomCropImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomCropPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomCropPadImage_default_instance_;
    new (ptr) ::object_detection::protos::RandomCropPadImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomCropPadImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomCropPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomCropPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomCropToAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomCropToAspectRatio_default_instance_;
    new (ptr) ::object_detection::protos::RandomCropToAspectRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomCropToAspectRatio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomCropToAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomCropToAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomDistortColor_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomDistortColor_default_instance_;
    new (ptr) ::object_detection::protos::RandomDistortColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomDistortColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomDistortColor_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomDistortColor_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomHorizontalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomHorizontalFlip_default_instance_;
    new (ptr) ::object_detection::protos::RandomHorizontalFlip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomHorizontalFlip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomHorizontalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomHorizontalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomImageScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomImageScale_default_instance_;
    new (ptr) ::object_detection::protos::RandomImageScale();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomImageScale::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomImageScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomImageScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomJitterBoxes_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomJitterBoxes_default_instance_;
    new (ptr) ::object_detection::protos::RandomJitterBoxes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomJitterBoxes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomJitterBoxes_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomJitterBoxes_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomPadImage_default_instance_;
    new (ptr) ::object_detection::protos::RandomPadImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomPadImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomPixelValueScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomPixelValueScale_default_instance_;
    new (ptr) ::object_detection::protos::RandomPixelValueScale();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomPixelValueScale::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomPixelValueScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomPixelValueScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomRGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomRGBtoGray_default_instance_;
    new (ptr) ::object_detection::protos::RandomRGBtoGray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomRGBtoGray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomRGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomRGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomResizeMethod_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomResizeMethod_default_instance_;
    new (ptr) ::object_detection::protos::RandomResizeMethod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomResizeMethod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomResizeMethod_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomResizeMethod_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomRotation90_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomRotation90_default_instance_;
    new (ptr) ::object_detection::protos::RandomRotation90();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomRotation90::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomRotation90_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomRotation90_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_RandomVerticalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_RandomVerticalFlip_default_instance_;
    new (ptr) ::object_detection::protos::RandomVerticalFlip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::RandomVerticalFlip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomVerticalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RandomVerticalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_ResizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ResizeImage_default_instance_;
    new (ptr) ::object_detection::protos::ResizeImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ResizeImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_SSDRandomCrop_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SSDRandomCrop_default_instance_;
    new (ptr) ::object_detection::protos::SSDRandomCrop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SSDRandomCrop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSDRandomCrop_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSDRandomCrop_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {
      &scc_info_SSDRandomCropOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_SSDRandomCropFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SSDRandomCropFixedAspectRatio_default_instance_;
    new (ptr) ::object_detection::protos::SSDRandomCropFixedAspectRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SSDRandomCropFixedAspectRatio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSDRandomCropFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSDRandomCropFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {
      &scc_info_SSDRandomCropFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_SSDRandomCropFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SSDRandomCropFixedAspectRatioOperation_default_instance_;
    new (ptr) ::object_detection::protos::SSDRandomCropFixedAspectRatioOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SSDRandomCropFixedAspectRatioOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSDRandomCropFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_SSDRandomCropOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SSDRandomCropOperation_default_instance_;
    new (ptr) ::object_detection::protos::SSDRandomCropOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SSDRandomCropOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSDRandomCropOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_SSDRandomCropPad_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SSDRandomCropPad_default_instance_;
    new (ptr) ::object_detection::protos::SSDRandomCropPad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SSDRandomCropPad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSDRandomCropPad_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSDRandomCropPad_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {
      &scc_info_SSDRandomCropPadOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_SSDRandomCropPadFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SSDRandomCropPadFixedAspectRatio_default_instance_;
    new (ptr) ::object_detection::protos::SSDRandomCropPadFixedAspectRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SSDRandomCropPadFixedAspectRatio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSDRandomCropPadFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSDRandomCropPadFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {
      &scc_info_SSDRandomCropPadFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_SSDRandomCropPadFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SSDRandomCropPadFixedAspectRatioOperation_default_instance_;
    new (ptr) ::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropPadFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSDRandomCropPadFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_SSDRandomCropPadOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SSDRandomCropPadOperation_default_instance_;
    new (ptr) ::object_detection::protos::SSDRandomCropPadOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SSDRandomCropPadOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSDRandomCropPadOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSDRandomCropPadOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_ScaleBoxesToPixelCoordinates_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ScaleBoxesToPixelCoordinates_default_instance_;
    new (ptr) ::object_detection::protos::ScaleBoxesToPixelCoordinates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ScaleBoxesToPixelCoordinates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScaleBoxesToPixelCoordinates_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScaleBoxesToPixelCoordinates_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_SubtractChannelMean_object_5fdetection_2fprotos_2fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SubtractChannelMean_default_instance_;
    new (ptr) ::object_detection::protos::SubtractChannelMean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SubtractChannelMean::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubtractChannelMean_object_5fdetection_2fprotos_2fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubtractChannelMean_object_5fdetection_2fprotos_2fpreprocessor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fpreprocessor_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_5fdetection_2fprotos_2fpreprocessor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fpreprocessor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fpreprocessor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PreprocessingStep, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PreprocessingStep, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PreprocessingStep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, normalize_image_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_horizontal_flip_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_pixel_value_scale_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_image_scale_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_rgb_to_gray_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_adjust_brightness_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_adjust_contrast_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_adjust_hue_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_adjust_saturation_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_distort_color_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_jitter_boxes_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_crop_image_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_pad_image_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_crop_pad_image_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_crop_to_aspect_ratio_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_black_patches_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_resize_method_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, scale_boxes_to_pixel_coordinates_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, resize_image_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, subtract_channel_mean_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, ssd_random_crop_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, ssd_random_crop_pad_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, ssd_random_crop_fixed_aspect_ratio_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, ssd_random_crop_pad_fixed_aspect_ratio_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_vertical_flip_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, random_rotation90_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, rgb_to_gray_),
  offsetof(::object_detection::protos::PreprocessingStepDefaultTypeInternal, convert_class_logits_to_softmax_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::PreprocessingStep, preprocessing_step_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::NormalizeImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::NormalizeImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::NormalizeImage, original_minval_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::NormalizeImage, original_maxval_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::NormalizeImage, target_minval_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::NormalizeImage, target_maxval_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomHorizontalFlip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomHorizontalFlip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomHorizontalFlip, keypoint_flip_permutation_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomVerticalFlip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomVerticalFlip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomVerticalFlip, keypoint_flip_permutation_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomRotation90, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomRotation90, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPixelValueScale, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPixelValueScale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPixelValueScale, minval_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPixelValueScale, maxval_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomImageScale, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomImageScale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomImageScale, min_scale_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomImageScale, max_scale_ratio_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomRGBtoGray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomRGBtoGray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomRGBtoGray, probability_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustBrightness, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustBrightness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustBrightness, max_delta_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustContrast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustContrast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustContrast, min_delta_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustContrast, max_delta_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustHue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustHue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustHue, max_delta_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustSaturation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustSaturation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustSaturation, min_delta_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomAdjustSaturation, max_delta_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomDistortColor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomDistortColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomDistortColor, color_ordering_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomJitterBoxes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomJitterBoxes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomJitterBoxes, ratio_),
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, min_object_covered_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, min_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, max_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, min_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, max_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, overlap_thresh_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, clip_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropImage, random_coef_),
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPadImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPadImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPadImage, min_image_height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPadImage, min_image_width_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPadImage, max_image_height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPadImage, max_image_width_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomPadImage, pad_color_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, min_object_covered_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, min_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, max_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, min_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, max_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, overlap_thresh_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, clip_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, random_coef_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, min_padded_size_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, max_padded_size_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropPadImage, pad_color_),
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropToAspectRatio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropToAspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropToAspectRatio, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropToAspectRatio, overlap_thresh_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomCropToAspectRatio, clip_boxes_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomBlackPatches, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomBlackPatches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomBlackPatches, max_black_patches_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomBlackPatches, probability_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomBlackPatches, size_to_image_ratio_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomResizeMethod, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomResizeMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomResizeMethod, target_height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RandomResizeMethod, target_width_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RGBtoGray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::RGBtoGray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ScaleBoxesToPixelCoordinates, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ScaleBoxesToPixelCoordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ResizeImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ResizeImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ResizeImage, new_height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ResizeImage, new_width_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ResizeImage, method_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SubtractChannelMean, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SubtractChannelMean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SubtractChannelMean, means_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, min_object_covered_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, min_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, max_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, min_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, max_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, overlap_thresh_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, clip_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropOperation, random_coef_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCrop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCrop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCrop, operations_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, min_object_covered_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, min_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, max_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, min_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, max_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, overlap_thresh_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, clip_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, random_coef_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, min_padded_size_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, max_padded_size_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, pad_color_r_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, pad_color_g_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadOperation, pad_color_b_),
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  6,
  ~0u,
  ~0u,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPad, operations_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation, min_object_covered_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation, min_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation, max_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation, overlap_thresh_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation, clip_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation, random_coef_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatio, operations_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropFixedAspectRatio, aspect_ratio_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, min_object_covered_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, min_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, max_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, min_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, max_area_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, overlap_thresh_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, clip_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation, random_coef_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatio, operations_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatio, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatio, min_padded_size_ratio_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SSDRandomCropPadFixedAspectRatio, max_padded_size_ratio_),
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvertClassLogitsToSoftmax, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvertClassLogitsToSoftmax, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ConvertClassLogitsToSoftmax, temperature_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 34, sizeof(::object_detection::protos::PreprocessingStep)},
  { 62, 71, sizeof(::object_detection::protos::NormalizeImage)},
  { 75, 81, sizeof(::object_detection::protos::RandomHorizontalFlip)},
  { 82, 88, sizeof(::object_detection::protos::RandomVerticalFlip)},
  { 89, 94, sizeof(::object_detection::protos::RandomRotation90)},
  { 94, 101, sizeof(::object_detection::protos::RandomPixelValueScale)},
  { 103, 110, sizeof(::object_detection::protos::RandomImageScale)},
  { 112, 118, sizeof(::object_detection::protos::RandomRGBtoGray)},
  { 119, 125, sizeof(::object_detection::protos::RandomAdjustBrightness)},
  { 126, 133, sizeof(::object_detection::protos::RandomAdjustContrast)},
  { 135, 141, sizeof(::object_detection::protos::RandomAdjustHue)},
  { 142, 149, sizeof(::object_detection::protos::RandomAdjustSaturation)},
  { 151, 157, sizeof(::object_detection::protos::RandomDistortColor)},
  { 158, 164, sizeof(::object_detection::protos::RandomJitterBoxes)},
  { 165, 178, sizeof(::object_detection::protos::RandomCropImage)},
  { 186, 196, sizeof(::object_detection::protos::RandomPadImage)},
  { 201, 217, sizeof(::object_detection::protos::RandomCropPadImage)},
  { 228, 236, sizeof(::object_detection::protos::RandomCropToAspectRatio)},
  { 239, 247, sizeof(::object_detection::protos::RandomBlackPatches)},
  { 250, 257, sizeof(::object_detection::protos::RandomResizeMethod)},
  { 259, 264, sizeof(::object_detection::protos::RGBtoGray)},
  { 264, 269, sizeof(::object_detection::protos::ScaleBoxesToPixelCoordinates)},
  { 269, 277, sizeof(::object_detection::protos::ResizeImage)},
  { 280, 286, sizeof(::object_detection::protos::SubtractChannelMean)},
  { 287, 300, sizeof(::object_detection::protos::SSDRandomCropOperation)},
  { 308, 314, sizeof(::object_detection::protos::SSDRandomCrop)},
  { 315, 333, sizeof(::object_detection::protos::SSDRandomCropPadOperation)},
  { 346, 352, sizeof(::object_detection::protos::SSDRandomCropPad)},
  { 353, 364, sizeof(::object_detection::protos::SSDRandomCropFixedAspectRatioOperation)},
  { 370, 377, sizeof(::object_detection::protos::SSDRandomCropFixedAspectRatio)},
  { 379, 392, sizeof(::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation)},
  { 400, 409, sizeof(::object_detection::protos::SSDRandomCropPadFixedAspectRatio)},
  { 413, 419, sizeof(::object_detection::protos::ConvertClassLogitsToSoftmax)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_PreprocessingStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_NormalizeImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomHorizontalFlip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomVerticalFlip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomRotation90_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomPixelValueScale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomImageScale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomRGBtoGray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomAdjustBrightness_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomAdjustContrast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomAdjustHue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomAdjustSaturation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomDistortColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomJitterBoxes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomCropImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomPadImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomCropPadImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomCropToAspectRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomBlackPatches_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RandomResizeMethod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_RGBtoGray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ScaleBoxesToPixelCoordinates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ResizeImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SubtractChannelMean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SSDRandomCropOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SSDRandomCrop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SSDRandomCropPadOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SSDRandomCropPad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SSDRandomCropFixedAspectRatioOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SSDRandomCropFixedAspectRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SSDRandomCropPadFixedAspectRatioOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SSDRandomCropPadFixedAspectRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ConvertClassLogitsToSoftmax_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fpreprocessor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*object_detection/protos/preprocessor.p"
  "roto\022\027object_detection.protos\"\313\021\n\021Prepro"
  "cessingStep\022B\n\017normalize_image\030\001 \001(\0132\'.o"
  "bject_detection.protos.NormalizeImageH\000\022"
  "O\n\026random_horizontal_flip\030\002 \001(\0132-.object"
  "_detection.protos.RandomHorizontalFlipH\000"
  "\022R\n\030random_pixel_value_scale\030\003 \001(\0132..obj"
  "ect_detection.protos.RandomPixelValueSca"
  "leH\000\022G\n\022random_image_scale\030\004 \001(\0132).objec"
  "t_detection.protos.RandomImageScaleH\000\022F\n"
  "\022random_rgb_to_gray\030\005 \001(\0132(.object_detec"
  "tion.protos.RandomRGBtoGrayH\000\022S\n\030random_"
  "adjust_brightness\030\006 \001(\0132/.object_detecti"
  "on.protos.RandomAdjustBrightnessH\000\022O\n\026ra"
  "ndom_adjust_contrast\030\007 \001(\0132-.object_dete"
  "ction.protos.RandomAdjustContrastH\000\022E\n\021r"
  "andom_adjust_hue\030\010 \001(\0132(.object_detectio"
  "n.protos.RandomAdjustHueH\000\022S\n\030random_adj"
  "ust_saturation\030\t \001(\0132/.object_detection."
  "protos.RandomAdjustSaturationH\000\022K\n\024rando"
  "m_distort_color\030\n \001(\0132+.object_detection"
  ".protos.RandomDistortColorH\000\022I\n\023random_j"
  "itter_boxes\030\013 \001(\0132*.object_detection.pro"
  "tos.RandomJitterBoxesH\000\022E\n\021random_crop_i"
  "mage\030\014 \001(\0132(.object_detection.protos.Ran"
  "domCropImageH\000\022C\n\020random_pad_image\030\r \001(\013"
  "2\'.object_detection.protos.RandomPadImag"
  "eH\000\022L\n\025random_crop_pad_image\030\016 \001(\0132+.obj"
  "ect_detection.protos.RandomCropPadImageH"
  "\000\022W\n\033random_crop_to_aspect_ratio\030\017 \001(\01320"
  ".object_detection.protos.RandomCropToAsp"
  "ectRatioH\000\022K\n\024random_black_patches\030\020 \001(\013"
  "2+.object_detection.protos.RandomBlackPa"
  "tchesH\000\022K\n\024random_resize_method\030\021 \001(\0132+."
  "object_detection.protos.RandomResizeMeth"
  "odH\000\022a\n scale_boxes_to_pixel_coordinates"
  "\030\022 \001(\01325.object_detection.protos.ScaleBo"
  "xesToPixelCoordinatesH\000\022<\n\014resize_image\030"
  "\023 \001(\0132$.object_detection.protos.ResizeIm"
  "ageH\000\022M\n\025subtract_channel_mean\030\024 \001(\0132,.o"
  "bject_detection.protos.SubtractChannelMe"
  "anH\000\022A\n\017ssd_random_crop\030\025 \001(\0132&.object_d"
  "etection.protos.SSDRandomCropH\000\022H\n\023ssd_r"
  "andom_crop_pad\030\026 \001(\0132).object_detection."
  "protos.SSDRandomCropPadH\000\022d\n\"ssd_random_"
  "crop_fixed_aspect_ratio\030\027 \001(\01326.object_d"
  "etection.protos.SSDRandomCropFixedAspect"
  "RatioH\000\022k\n&ssd_random_crop_pad_fixed_asp"
  "ect_ratio\030\030 \001(\01329.object_detection.proto"
  "s.SSDRandomCropPadFixedAspectRatioH\000\022K\n\024"
  "random_vertical_flip\030\031 \001(\0132+.object_dete"
  "ction.protos.RandomVerticalFlipH\000\022F\n\021ran"
  "dom_rotation90\030\032 \001(\0132).object_detection."
  "protos.RandomRotation90H\000\0229\n\013rgb_to_gray"
  "\030\033 \001(\0132\".object_detection.protos.RGBtoGr"
  "ayH\000\022_\n\037convert_class_logits_to_softmax\030"
  "\034 \001(\01324.object_detection.protos.ConvertC"
  "lassLogitsToSoftmaxH\000B\024\n\022preprocessing_s"
  "tep\"v\n\016NormalizeImage\022\027\n\017original_minval"
  "\030\001 \001(\002\022\027\n\017original_maxval\030\002 \001(\002\022\030\n\rtarge"
  "t_minval\030\003 \001(\002:\0010\022\030\n\rtarget_maxval\030\004 \001(\002"
  ":\0011\"9\n\024RandomHorizontalFlip\022!\n\031keypoint_"
  "flip_permutation\030\001 \003(\005\"7\n\022RandomVertical"
  "Flip\022!\n\031keypoint_flip_permutation\030\001 \003(\005\""
  "\022\n\020RandomRotation90\"A\n\025RandomPixelValueS"
  "cale\022\023\n\006minval\030\001 \001(\002:\0030.9\022\023\n\006maxval\030\002 \001("
  "\002:\0031.1\"L\n\020RandomImageScale\022\034\n\017min_scale_"
  "ratio\030\001 \001(\002:\0030.5\022\032\n\017max_scale_ratio\030\002 \001("
  "\002:\0012\"+\n\017RandomRGBtoGray\022\030\n\013probability\030\001"
  " \001(\002:\0030.1\"0\n\026RandomAdjustBrightness\022\026\n\tm"
  "ax_delta\030\001 \001(\002:\0030.2\"G\n\024RandomAdjustContr"
  "ast\022\026\n\tmin_delta\030\001 \001(\002:\0030.8\022\027\n\tmax_delta"
  "\030\002 \001(\002:\0041.25\"*\n\017RandomAdjustHue\022\027\n\tmax_d"
  "elta\030\001 \001(\002:\0040.02\"I\n\026RandomAdjustSaturati"
  "on\022\026\n\tmin_delta\030\001 \001(\002:\0030.8\022\027\n\tmax_delta\030"
  "\002 \001(\002:\0041.25\",\n\022RandomDistortColor\022\026\n\016col"
  "or_ordering\030\001 \001(\005\"(\n\021RandomJitterBoxes\022\023"
  "\n\005ratio\030\001 \001(\002:\0040.05\"\353\001\n\017RandomCropImage\022"
  "\035\n\022min_object_covered\030\001 \001(\002:\0011\022\036\n\020min_as"
  "pect_ratio\030\002 \001(\002:\0040.75\022\036\n\020max_aspect_rat"
  "io\030\003 \001(\002:\0041.33\022\025\n\010min_area\030\004 \001(\002:\0030.1\022\023\n"
  "\010max_area\030\005 \001(\002:\0011\022\033\n\016overlap_thresh\030\006 \001"
  "(\002:\0030.3\022\030\n\nclip_boxes\030\010 \001(\010:\004true\022\026\n\013ran"
  "dom_coef\030\007 \001(\002:\0010\"\211\001\n\016RandomPadImage\022\030\n\020"
  "min_image_height\030\001 \001(\005\022\027\n\017min_image_widt"
  "h\030\002 \001(\005\022\030\n\020max_image_height\030\003 \001(\005\022\027\n\017max"
  "_image_width\030\004 \001(\005\022\021\n\tpad_color\030\005 \003(\002\"\277\002"
  "\n\022RandomCropPadImage\022\035\n\022min_object_cover"
  "ed\030\001 \001(\002:\0011\022\036\n\020min_aspect_ratio\030\002 \001(\002:\0040"
  ".75\022\036\n\020max_aspect_ratio\030\003 \001(\002:\0041.33\022\025\n\010m"
  "in_area\030\004 \001(\002:\0030.1\022\023\n\010max_area\030\005 \001(\002:\0011\022"
  "\033\n\016overlap_thresh\030\006 \001(\002:\0030.3\022\030\n\nclip_box"
  "es\030\013 \001(\010:\004true\022\026\n\013random_coef\030\007 \001(\002:\0010\022\035"
  "\n\025min_padded_size_ratio\030\010 \003(\002\022\035\n\025max_pad"
  "ded_size_ratio\030\t \003(\002\022\021\n\tpad_color\030\n \003(\002\""
  "i\n\027RandomCropToAspectRatio\022\027\n\014aspect_rat"
  "io\030\001 \001(\002:\0011\022\033\n\016overlap_thresh\030\002 \001(\002:\0030.3"
  "\022\030\n\nclip_boxes\030\003 \001(\010:\004true\"o\n\022RandomBlac"
  "kPatches\022\035\n\021max_black_patches\030\001 \001(\005:\00210\022"
  "\030\n\013probability\030\002 \001(\002:\0030.5\022 \n\023size_to_ima"
  "ge_ratio\030\003 \001(\002:\0030.1\"A\n\022RandomResizeMetho"
  "d\022\025\n\rtarget_height\030\001 \001(\002\022\024\n\014target_width"
  "\030\002 \001(\002\"\013\n\tRGBtoGray\"\036\n\034ScaleBoxesToPixel"
  "Coordinates\"\300\001\n\013ResizeImage\022\022\n\nnew_heigh"
  "t\030\001 \001(\005\022\021\n\tnew_width\030\002 \001(\005\022E\n\006method\030\003 \001"
  "(\0162+.object_detection.protos.ResizeImage"
  ".Method:\010BILINEAR\"C\n\006Method\022\010\n\004AREA\020\001\022\013\n"
  "\007BICUBIC\020\002\022\014\n\010BILINEAR\020\003\022\024\n\020NEAREST_NEIG"
  "HBOR\020\004\"$\n\023SubtractChannelMean\022\r\n\005means\030\001"
  " \003(\002\"\323\001\n\026SSDRandomCropOperation\022\032\n\022min_o"
  "bject_covered\030\001 \001(\002\022\030\n\020min_aspect_ratio\030"
  "\002 \001(\002\022\030\n\020max_aspect_ratio\030\003 \001(\002\022\020\n\010min_a"
  "rea\030\004 \001(\002\022\020\n\010max_area\030\005 \001(\002\022\026\n\016overlap_t"
  "hresh\030\006 \001(\002\022\030\n\nclip_boxes\030\010 \001(\010:\004true\022\023\n"
  "\013random_coef\030\007 \001(\002\"T\n\rSSDRandomCrop\022C\n\no"
  "perations\030\001 \003(\0132/.object_detection.proto"
  "s.SSDRandomCropOperation\"\323\002\n\031SSDRandomCr"
  "opPadOperation\022\032\n\022min_object_covered\030\001 \001"
  "(\002\022\030\n\020min_aspect_ratio\030\002 \001(\002\022\030\n\020max_aspe"
  "ct_ratio\030\003 \001(\002\022\020\n\010min_area\030\004 \001(\002\022\020\n\010max_"
  "area\030\005 \001(\002\022\026\n\016overlap_thresh\030\006 \001(\002\022\030\n\ncl"
  "ip_boxes\030\r \001(\010:\004true\022\023\n\013random_coef\030\007 \001("
  "\002\022\035\n\025min_padded_size_ratio\030\010 \003(\002\022\035\n\025max_"
  "padded_size_ratio\030\t \003(\002\022\023\n\013pad_color_r\030\n"
  " \001(\002\022\023\n\013pad_color_g\030\013 \001(\002\022\023\n\013pad_color_b"
  "\030\014 \001(\002\"Z\n\020SSDRandomCropPad\022F\n\noperations"
  "\030\001 \003(\01322.object_detection.protos.SSDRand"
  "omCropPadOperation\"\257\001\n&SSDRandomCropFixe"
  "dAspectRatioOperation\022\032\n\022min_object_cove"
  "red\030\001 \001(\002\022\020\n\010min_area\030\004 \001(\002\022\020\n\010max_area\030"
  "\005 \001(\002\022\026\n\016overlap_thresh\030\006 \001(\002\022\030\n\nclip_bo"
  "xes\030\010 \001(\010:\004true\022\023\n\013random_coef\030\007 \001(\002\"\215\001\n"
  "\035SSDRandomCropFixedAspectRatio\022S\n\noperat"
  "ions\030\001 \003(\0132\?.object_detection.protos.SSD"
  "RandomCropFixedAspectRatioOperation\022\027\n\014a"
  "spect_ratio\030\002 \001(\002:\0011\"\346\001\n)SSDRandomCropPa"
  "dFixedAspectRatioOperation\022\032\n\022min_object"
  "_covered\030\001 \001(\002\022\030\n\020min_aspect_ratio\030\002 \001(\002"
  "\022\030\n\020max_aspect_ratio\030\003 \001(\002\022\020\n\010min_area\030\004"
  " \001(\002\022\020\n\010max_area\030\005 \001(\002\022\026\n\016overlap_thresh"
  "\030\006 \001(\002\022\030\n\nclip_boxes\030\010 \001(\010:\004true\022\023\n\013rand"
  "om_coef\030\007 \001(\002\"\321\001\n SSDRandomCropPadFixedA"
  "spectRatio\022V\n\noperations\030\001 \003(\0132B.object_"
  "detection.protos.SSDRandomCropPadFixedAs"
  "pectRatioOperation\022\027\n\014aspect_ratio\030\002 \001(\002"
  ":\0011\022\035\n\025min_padded_size_ratio\030\003 \003(\002\022\035\n\025ma"
  "x_padded_size_ratio\030\004 \003(\002\"5\n\033ConvertClas"
  "sLogitsToSoftmax\022\026\n\013temperature\030\001 \001(\002:\0011"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto_sccs[33] = {
  &scc_info_ConvertClassLogitsToSoftmax_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_NormalizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_PreprocessingStep_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomAdjustBrightness_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomAdjustContrast_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomAdjustHue_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomAdjustSaturation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomBlackPatches_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomCropImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomCropPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomCropToAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomDistortColor_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomHorizontalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomImageScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomJitterBoxes_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomPixelValueScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomRGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomResizeMethod_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomRotation90_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_RandomVerticalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_ResizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SSDRandomCrop_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SSDRandomCropFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SSDRandomCropFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SSDRandomCropOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SSDRandomCropPad_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SSDRandomCropPadFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SSDRandomCropPadFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SSDRandomCropPadOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_ScaleBoxesToPixelCoordinates_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
  &scc_info_SubtractChannelMean_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fpreprocessor_2eproto, "object_detection/protos/preprocessor.proto", 5920,
  &descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto_deps, 33, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fpreprocessor_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fpreprocessor_2eproto, 33, file_level_enum_descriptors_object_5fdetection_2fprotos_2fpreprocessor_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fpreprocessor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fpreprocessor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto), true);
namespace object_detection {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeImage_Method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2fpreprocessor_2eproto[0];
}
bool ResizeImage_Method_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResizeImage_Method ResizeImage::AREA;
constexpr ResizeImage_Method ResizeImage::BICUBIC;
constexpr ResizeImage_Method ResizeImage::BILINEAR;
constexpr ResizeImage_Method ResizeImage::NEAREST_NEIGHBOR;
constexpr ResizeImage_Method ResizeImage::Method_MIN;
constexpr ResizeImage_Method ResizeImage::Method_MAX;
constexpr int ResizeImage::Method_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PreprocessingStep::InitAsDefaultInstance() {
  ::object_detection::protos::_PreprocessingStep_default_instance_.normalize_image_ = const_cast< ::object_detection::protos::NormalizeImage*>(
      ::object_detection::protos::NormalizeImage::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_horizontal_flip_ = const_cast< ::object_detection::protos::RandomHorizontalFlip*>(
      ::object_detection::protos::RandomHorizontalFlip::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_pixel_value_scale_ = const_cast< ::object_detection::protos::RandomPixelValueScale*>(
      ::object_detection::protos::RandomPixelValueScale::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_image_scale_ = const_cast< ::object_detection::protos::RandomImageScale*>(
      ::object_detection::protos::RandomImageScale::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_rgb_to_gray_ = const_cast< ::object_detection::protos::RandomRGBtoGray*>(
      ::object_detection::protos::RandomRGBtoGray::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_adjust_brightness_ = const_cast< ::object_detection::protos::RandomAdjustBrightness*>(
      ::object_detection::protos::RandomAdjustBrightness::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_adjust_contrast_ = const_cast< ::object_detection::protos::RandomAdjustContrast*>(
      ::object_detection::protos::RandomAdjustContrast::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_adjust_hue_ = const_cast< ::object_detection::protos::RandomAdjustHue*>(
      ::object_detection::protos::RandomAdjustHue::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_adjust_saturation_ = const_cast< ::object_detection::protos::RandomAdjustSaturation*>(
      ::object_detection::protos::RandomAdjustSaturation::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_distort_color_ = const_cast< ::object_detection::protos::RandomDistortColor*>(
      ::object_detection::protos::RandomDistortColor::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_jitter_boxes_ = const_cast< ::object_detection::protos::RandomJitterBoxes*>(
      ::object_detection::protos::RandomJitterBoxes::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_crop_image_ = const_cast< ::object_detection::protos::RandomCropImage*>(
      ::object_detection::protos::RandomCropImage::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_pad_image_ = const_cast< ::object_detection::protos::RandomPadImage*>(
      ::object_detection::protos::RandomPadImage::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_crop_pad_image_ = const_cast< ::object_detection::protos::RandomCropPadImage*>(
      ::object_detection::protos::RandomCropPadImage::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_crop_to_aspect_ratio_ = const_cast< ::object_detection::protos::RandomCropToAspectRatio*>(
      ::object_detection::protos::RandomCropToAspectRatio::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_black_patches_ = const_cast< ::object_detection::protos::RandomBlackPatches*>(
      ::object_detection::protos::RandomBlackPatches::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_resize_method_ = const_cast< ::object_detection::protos::RandomResizeMethod*>(
      ::object_detection::protos::RandomResizeMethod::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.scale_boxes_to_pixel_coordinates_ = const_cast< ::object_detection::protos::ScaleBoxesToPixelCoordinates*>(
      ::object_detection::protos::ScaleBoxesToPixelCoordinates::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.resize_image_ = const_cast< ::object_detection::protos::ResizeImage*>(
      ::object_detection::protos::ResizeImage::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.subtract_channel_mean_ = const_cast< ::object_detection::protos::SubtractChannelMean*>(
      ::object_detection::protos::SubtractChannelMean::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.ssd_random_crop_ = const_cast< ::object_detection::protos::SSDRandomCrop*>(
      ::object_detection::protos::SSDRandomCrop::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.ssd_random_crop_pad_ = const_cast< ::object_detection::protos::SSDRandomCropPad*>(
      ::object_detection::protos::SSDRandomCropPad::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.ssd_random_crop_fixed_aspect_ratio_ = const_cast< ::object_detection::protos::SSDRandomCropFixedAspectRatio*>(
      ::object_detection::protos::SSDRandomCropFixedAspectRatio::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.ssd_random_crop_pad_fixed_aspect_ratio_ = const_cast< ::object_detection::protos::SSDRandomCropPadFixedAspectRatio*>(
      ::object_detection::protos::SSDRandomCropPadFixedAspectRatio::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_vertical_flip_ = const_cast< ::object_detection::protos::RandomVerticalFlip*>(
      ::object_detection::protos::RandomVerticalFlip::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.random_rotation90_ = const_cast< ::object_detection::protos::RandomRotation90*>(
      ::object_detection::protos::RandomRotation90::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.rgb_to_gray_ = const_cast< ::object_detection::protos::RGBtoGray*>(
      ::object_detection::protos::RGBtoGray::internal_default_instance());
  ::object_detection::protos::_PreprocessingStep_default_instance_.convert_class_logits_to_softmax_ = const_cast< ::object_detection::protos::ConvertClassLogitsToSoftmax*>(
      ::object_detection::protos::ConvertClassLogitsToSoftmax::internal_default_instance());
}
class PreprocessingStep::_Internal {
 public:
  using HasBits = decltype(std::declval<PreprocessingStep>()._has_bits_);
  static const ::object_detection::protos::NormalizeImage& normalize_image(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomHorizontalFlip& random_horizontal_flip(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomPixelValueScale& random_pixel_value_scale(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomImageScale& random_image_scale(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomRGBtoGray& random_rgb_to_gray(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomAdjustBrightness& random_adjust_brightness(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomAdjustContrast& random_adjust_contrast(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomAdjustHue& random_adjust_hue(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomAdjustSaturation& random_adjust_saturation(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomDistortColor& random_distort_color(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomJitterBoxes& random_jitter_boxes(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomCropImage& random_crop_image(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomPadImage& random_pad_image(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomCropPadImage& random_crop_pad_image(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomCropToAspectRatio& random_crop_to_aspect_ratio(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomBlackPatches& random_black_patches(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomResizeMethod& random_resize_method(const PreprocessingStep* msg);
  static const ::object_detection::protos::ScaleBoxesToPixelCoordinates& scale_boxes_to_pixel_coordinates(const PreprocessingStep* msg);
  static const ::object_detection::protos::ResizeImage& resize_image(const PreprocessingStep* msg);
  static const ::object_detection::protos::SubtractChannelMean& subtract_channel_mean(const PreprocessingStep* msg);
  static const ::object_detection::protos::SSDRandomCrop& ssd_random_crop(const PreprocessingStep* msg);
  static const ::object_detection::protos::SSDRandomCropPad& ssd_random_crop_pad(const PreprocessingStep* msg);
  static const ::object_detection::protos::SSDRandomCropFixedAspectRatio& ssd_random_crop_fixed_aspect_ratio(const PreprocessingStep* msg);
  static const ::object_detection::protos::SSDRandomCropPadFixedAspectRatio& ssd_random_crop_pad_fixed_aspect_ratio(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomVerticalFlip& random_vertical_flip(const PreprocessingStep* msg);
  static const ::object_detection::protos::RandomRotation90& random_rotation90(const PreprocessingStep* msg);
  static const ::object_detection::protos::RGBtoGray& rgb_to_gray(const PreprocessingStep* msg);
  static const ::object_detection::protos::ConvertClassLogitsToSoftmax& convert_class_logits_to_softmax(const PreprocessingStep* msg);
};

const ::object_detection::protos::NormalizeImage&
PreprocessingStep::_Internal::normalize_image(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.normalize_image_;
}
const ::object_detection::protos::RandomHorizontalFlip&
PreprocessingStep::_Internal::random_horizontal_flip(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_horizontal_flip_;
}
const ::object_detection::protos::RandomPixelValueScale&
PreprocessingStep::_Internal::random_pixel_value_scale(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_pixel_value_scale_;
}
const ::object_detection::protos::RandomImageScale&
PreprocessingStep::_Internal::random_image_scale(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_image_scale_;
}
const ::object_detection::protos::RandomRGBtoGray&
PreprocessingStep::_Internal::random_rgb_to_gray(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_rgb_to_gray_;
}
const ::object_detection::protos::RandomAdjustBrightness&
PreprocessingStep::_Internal::random_adjust_brightness(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_adjust_brightness_;
}
const ::object_detection::protos::RandomAdjustContrast&
PreprocessingStep::_Internal::random_adjust_contrast(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_adjust_contrast_;
}
const ::object_detection::protos::RandomAdjustHue&
PreprocessingStep::_Internal::random_adjust_hue(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_adjust_hue_;
}
const ::object_detection::protos::RandomAdjustSaturation&
PreprocessingStep::_Internal::random_adjust_saturation(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_adjust_saturation_;
}
const ::object_detection::protos::RandomDistortColor&
PreprocessingStep::_Internal::random_distort_color(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_distort_color_;
}
const ::object_detection::protos::RandomJitterBoxes&
PreprocessingStep::_Internal::random_jitter_boxes(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_jitter_boxes_;
}
const ::object_detection::protos::RandomCropImage&
PreprocessingStep::_Internal::random_crop_image(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_crop_image_;
}
const ::object_detection::protos::RandomPadImage&
PreprocessingStep::_Internal::random_pad_image(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_pad_image_;
}
const ::object_detection::protos::RandomCropPadImage&
PreprocessingStep::_Internal::random_crop_pad_image(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_crop_pad_image_;
}
const ::object_detection::protos::RandomCropToAspectRatio&
PreprocessingStep::_Internal::random_crop_to_aspect_ratio(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_crop_to_aspect_ratio_;
}
const ::object_detection::protos::RandomBlackPatches&
PreprocessingStep::_Internal::random_black_patches(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_black_patches_;
}
const ::object_detection::protos::RandomResizeMethod&
PreprocessingStep::_Internal::random_resize_method(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_resize_method_;
}
const ::object_detection::protos::ScaleBoxesToPixelCoordinates&
PreprocessingStep::_Internal::scale_boxes_to_pixel_coordinates(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.scale_boxes_to_pixel_coordinates_;
}
const ::object_detection::protos::ResizeImage&
PreprocessingStep::_Internal::resize_image(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.resize_image_;
}
const ::object_detection::protos::SubtractChannelMean&
PreprocessingStep::_Internal::subtract_channel_mean(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.subtract_channel_mean_;
}
const ::object_detection::protos::SSDRandomCrop&
PreprocessingStep::_Internal::ssd_random_crop(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.ssd_random_crop_;
}
const ::object_detection::protos::SSDRandomCropPad&
PreprocessingStep::_Internal::ssd_random_crop_pad(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.ssd_random_crop_pad_;
}
const ::object_detection::protos::SSDRandomCropFixedAspectRatio&
PreprocessingStep::_Internal::ssd_random_crop_fixed_aspect_ratio(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_;
}
const ::object_detection::protos::SSDRandomCropPadFixedAspectRatio&
PreprocessingStep::_Internal::ssd_random_crop_pad_fixed_aspect_ratio(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_;
}
const ::object_detection::protos::RandomVerticalFlip&
PreprocessingStep::_Internal::random_vertical_flip(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_vertical_flip_;
}
const ::object_detection::protos::RandomRotation90&
PreprocessingStep::_Internal::random_rotation90(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.random_rotation90_;
}
const ::object_detection::protos::RGBtoGray&
PreprocessingStep::_Internal::rgb_to_gray(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.rgb_to_gray_;
}
const ::object_detection::protos::ConvertClassLogitsToSoftmax&
PreprocessingStep::_Internal::convert_class_logits_to_softmax(const PreprocessingStep* msg) {
  return *msg->preprocessing_step_.convert_class_logits_to_softmax_;
}
void PreprocessingStep::set_allocated_normalize_image(::object_detection::protos::NormalizeImage* normalize_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (normalize_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      normalize_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalize_image, submessage_arena);
    }
    set_has_normalize_image();
    preprocessing_step_.normalize_image_ = normalize_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.normalize_image)
}
void PreprocessingStep::set_allocated_random_horizontal_flip(::object_detection::protos::RandomHorizontalFlip* random_horizontal_flip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_horizontal_flip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_horizontal_flip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_horizontal_flip, submessage_arena);
    }
    set_has_random_horizontal_flip();
    preprocessing_step_.random_horizontal_flip_ = random_horizontal_flip;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_horizontal_flip)
}
void PreprocessingStep::set_allocated_random_pixel_value_scale(::object_detection::protos::RandomPixelValueScale* random_pixel_value_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_pixel_value_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_pixel_value_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_pixel_value_scale, submessage_arena);
    }
    set_has_random_pixel_value_scale();
    preprocessing_step_.random_pixel_value_scale_ = random_pixel_value_scale;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_pixel_value_scale)
}
void PreprocessingStep::set_allocated_random_image_scale(::object_detection::protos::RandomImageScale* random_image_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_image_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_image_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_image_scale, submessage_arena);
    }
    set_has_random_image_scale();
    preprocessing_step_.random_image_scale_ = random_image_scale;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_image_scale)
}
void PreprocessingStep::set_allocated_random_rgb_to_gray(::object_detection::protos::RandomRGBtoGray* random_rgb_to_gray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_rgb_to_gray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_rgb_to_gray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_rgb_to_gray, submessage_arena);
    }
    set_has_random_rgb_to_gray();
    preprocessing_step_.random_rgb_to_gray_ = random_rgb_to_gray;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_rgb_to_gray)
}
void PreprocessingStep::set_allocated_random_adjust_brightness(::object_detection::protos::RandomAdjustBrightness* random_adjust_brightness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_adjust_brightness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_adjust_brightness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_adjust_brightness, submessage_arena);
    }
    set_has_random_adjust_brightness();
    preprocessing_step_.random_adjust_brightness_ = random_adjust_brightness;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_adjust_brightness)
}
void PreprocessingStep::set_allocated_random_adjust_contrast(::object_detection::protos::RandomAdjustContrast* random_adjust_contrast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_adjust_contrast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_adjust_contrast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_adjust_contrast, submessage_arena);
    }
    set_has_random_adjust_contrast();
    preprocessing_step_.random_adjust_contrast_ = random_adjust_contrast;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_adjust_contrast)
}
void PreprocessingStep::set_allocated_random_adjust_hue(::object_detection::protos::RandomAdjustHue* random_adjust_hue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_adjust_hue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_adjust_hue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_adjust_hue, submessage_arena);
    }
    set_has_random_adjust_hue();
    preprocessing_step_.random_adjust_hue_ = random_adjust_hue;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_adjust_hue)
}
void PreprocessingStep::set_allocated_random_adjust_saturation(::object_detection::protos::RandomAdjustSaturation* random_adjust_saturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_adjust_saturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_adjust_saturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_adjust_saturation, submessage_arena);
    }
    set_has_random_adjust_saturation();
    preprocessing_step_.random_adjust_saturation_ = random_adjust_saturation;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_adjust_saturation)
}
void PreprocessingStep::set_allocated_random_distort_color(::object_detection::protos::RandomDistortColor* random_distort_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_distort_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_distort_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_distort_color, submessage_arena);
    }
    set_has_random_distort_color();
    preprocessing_step_.random_distort_color_ = random_distort_color;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_distort_color)
}
void PreprocessingStep::set_allocated_random_jitter_boxes(::object_detection::protos::RandomJitterBoxes* random_jitter_boxes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_jitter_boxes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_jitter_boxes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_jitter_boxes, submessage_arena);
    }
    set_has_random_jitter_boxes();
    preprocessing_step_.random_jitter_boxes_ = random_jitter_boxes;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_jitter_boxes)
}
void PreprocessingStep::set_allocated_random_crop_image(::object_detection::protos::RandomCropImage* random_crop_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_crop_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_crop_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_crop_image, submessage_arena);
    }
    set_has_random_crop_image();
    preprocessing_step_.random_crop_image_ = random_crop_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_crop_image)
}
void PreprocessingStep::set_allocated_random_pad_image(::object_detection::protos::RandomPadImage* random_pad_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_pad_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_pad_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_pad_image, submessage_arena);
    }
    set_has_random_pad_image();
    preprocessing_step_.random_pad_image_ = random_pad_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_pad_image)
}
void PreprocessingStep::set_allocated_random_crop_pad_image(::object_detection::protos::RandomCropPadImage* random_crop_pad_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_crop_pad_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_crop_pad_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_crop_pad_image, submessage_arena);
    }
    set_has_random_crop_pad_image();
    preprocessing_step_.random_crop_pad_image_ = random_crop_pad_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_crop_pad_image)
}
void PreprocessingStep::set_allocated_random_crop_to_aspect_ratio(::object_detection::protos::RandomCropToAspectRatio* random_crop_to_aspect_ratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_crop_to_aspect_ratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_crop_to_aspect_ratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_crop_to_aspect_ratio, submessage_arena);
    }
    set_has_random_crop_to_aspect_ratio();
    preprocessing_step_.random_crop_to_aspect_ratio_ = random_crop_to_aspect_ratio;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_crop_to_aspect_ratio)
}
void PreprocessingStep::set_allocated_random_black_patches(::object_detection::protos::RandomBlackPatches* random_black_patches) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_black_patches) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_black_patches = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_black_patches, submessage_arena);
    }
    set_has_random_black_patches();
    preprocessing_step_.random_black_patches_ = random_black_patches;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_black_patches)
}
void PreprocessingStep::set_allocated_random_resize_method(::object_detection::protos::RandomResizeMethod* random_resize_method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_resize_method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_resize_method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_resize_method, submessage_arena);
    }
    set_has_random_resize_method();
    preprocessing_step_.random_resize_method_ = random_resize_method;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_resize_method)
}
void PreprocessingStep::set_allocated_scale_boxes_to_pixel_coordinates(::object_detection::protos::ScaleBoxesToPixelCoordinates* scale_boxes_to_pixel_coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (scale_boxes_to_pixel_coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scale_boxes_to_pixel_coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_boxes_to_pixel_coordinates, submessage_arena);
    }
    set_has_scale_boxes_to_pixel_coordinates();
    preprocessing_step_.scale_boxes_to_pixel_coordinates_ = scale_boxes_to_pixel_coordinates;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.scale_boxes_to_pixel_coordinates)
}
void PreprocessingStep::set_allocated_resize_image(::object_detection::protos::ResizeImage* resize_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (resize_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resize_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resize_image, submessage_arena);
    }
    set_has_resize_image();
    preprocessing_step_.resize_image_ = resize_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.resize_image)
}
void PreprocessingStep::set_allocated_subtract_channel_mean(::object_detection::protos::SubtractChannelMean* subtract_channel_mean) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (subtract_channel_mean) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subtract_channel_mean = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtract_channel_mean, submessage_arena);
    }
    set_has_subtract_channel_mean();
    preprocessing_step_.subtract_channel_mean_ = subtract_channel_mean;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.subtract_channel_mean)
}
void PreprocessingStep::set_allocated_ssd_random_crop(::object_detection::protos::SSDRandomCrop* ssd_random_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (ssd_random_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssd_random_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssd_random_crop, submessage_arena);
    }
    set_has_ssd_random_crop();
    preprocessing_step_.ssd_random_crop_ = ssd_random_crop;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.ssd_random_crop)
}
void PreprocessingStep::set_allocated_ssd_random_crop_pad(::object_detection::protos::SSDRandomCropPad* ssd_random_crop_pad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (ssd_random_crop_pad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssd_random_crop_pad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssd_random_crop_pad, submessage_arena);
    }
    set_has_ssd_random_crop_pad();
    preprocessing_step_.ssd_random_crop_pad_ = ssd_random_crop_pad;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.ssd_random_crop_pad)
}
void PreprocessingStep::set_allocated_ssd_random_crop_fixed_aspect_ratio(::object_detection::protos::SSDRandomCropFixedAspectRatio* ssd_random_crop_fixed_aspect_ratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (ssd_random_crop_fixed_aspect_ratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssd_random_crop_fixed_aspect_ratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssd_random_crop_fixed_aspect_ratio, submessage_arena);
    }
    set_has_ssd_random_crop_fixed_aspect_ratio();
    preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_ = ssd_random_crop_fixed_aspect_ratio;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.ssd_random_crop_fixed_aspect_ratio)
}
void PreprocessingStep::set_allocated_ssd_random_crop_pad_fixed_aspect_ratio(::object_detection::protos::SSDRandomCropPadFixedAspectRatio* ssd_random_crop_pad_fixed_aspect_ratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (ssd_random_crop_pad_fixed_aspect_ratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssd_random_crop_pad_fixed_aspect_ratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssd_random_crop_pad_fixed_aspect_ratio, submessage_arena);
    }
    set_has_ssd_random_crop_pad_fixed_aspect_ratio();
    preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_ = ssd_random_crop_pad_fixed_aspect_ratio;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.ssd_random_crop_pad_fixed_aspect_ratio)
}
void PreprocessingStep::set_allocated_random_vertical_flip(::object_detection::protos::RandomVerticalFlip* random_vertical_flip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_vertical_flip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_vertical_flip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_vertical_flip, submessage_arena);
    }
    set_has_random_vertical_flip();
    preprocessing_step_.random_vertical_flip_ = random_vertical_flip;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_vertical_flip)
}
void PreprocessingStep::set_allocated_random_rotation90(::object_detection::protos::RandomRotation90* random_rotation90) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (random_rotation90) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      random_rotation90 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, random_rotation90, submessage_arena);
    }
    set_has_random_rotation90();
    preprocessing_step_.random_rotation90_ = random_rotation90;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_rotation90)
}
void PreprocessingStep::set_allocated_rgb_to_gray(::object_detection::protos::RGBtoGray* rgb_to_gray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (rgb_to_gray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rgb_to_gray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb_to_gray, submessage_arena);
    }
    set_has_rgb_to_gray();
    preprocessing_step_.rgb_to_gray_ = rgb_to_gray;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.rgb_to_gray)
}
void PreprocessingStep::set_allocated_convert_class_logits_to_softmax(::object_detection::protos::ConvertClassLogitsToSoftmax* convert_class_logits_to_softmax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_preprocessing_step();
  if (convert_class_logits_to_softmax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      convert_class_logits_to_softmax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convert_class_logits_to_softmax, submessage_arena);
    }
    set_has_convert_class_logits_to_softmax();
    preprocessing_step_.convert_class_logits_to_softmax_ = convert_class_logits_to_softmax;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.convert_class_logits_to_softmax)
}
PreprocessingStep::PreprocessingStep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.PreprocessingStep)
}
PreprocessingStep::PreprocessingStep(const PreprocessingStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_preprocessing_step();
  switch (from.preprocessing_step_case()) {
    case kNormalizeImage: {
      _internal_mutable_normalize_image()->::object_detection::protos::NormalizeImage::MergeFrom(from._internal_normalize_image());
      break;
    }
    case kRandomHorizontalFlip: {
      _internal_mutable_random_horizontal_flip()->::object_detection::protos::RandomHorizontalFlip::MergeFrom(from._internal_random_horizontal_flip());
      break;
    }
    case kRandomPixelValueScale: {
      _internal_mutable_random_pixel_value_scale()->::object_detection::protos::RandomPixelValueScale::MergeFrom(from._internal_random_pixel_value_scale());
      break;
    }
    case kRandomImageScale: {
      _internal_mutable_random_image_scale()->::object_detection::protos::RandomImageScale::MergeFrom(from._internal_random_image_scale());
      break;
    }
    case kRandomRgbToGray: {
      _internal_mutable_random_rgb_to_gray()->::object_detection::protos::RandomRGBtoGray::MergeFrom(from._internal_random_rgb_to_gray());
      break;
    }
    case kRandomAdjustBrightness: {
      _internal_mutable_random_adjust_brightness()->::object_detection::protos::RandomAdjustBrightness::MergeFrom(from._internal_random_adjust_brightness());
      break;
    }
    case kRandomAdjustContrast: {
      _internal_mutable_random_adjust_contrast()->::object_detection::protos::RandomAdjustContrast::MergeFrom(from._internal_random_adjust_contrast());
      break;
    }
    case kRandomAdjustHue: {
      _internal_mutable_random_adjust_hue()->::object_detection::protos::RandomAdjustHue::MergeFrom(from._internal_random_adjust_hue());
      break;
    }
    case kRandomAdjustSaturation: {
      _internal_mutable_random_adjust_saturation()->::object_detection::protos::RandomAdjustSaturation::MergeFrom(from._internal_random_adjust_saturation());
      break;
    }
    case kRandomDistortColor: {
      _internal_mutable_random_distort_color()->::object_detection::protos::RandomDistortColor::MergeFrom(from._internal_random_distort_color());
      break;
    }
    case kRandomJitterBoxes: {
      _internal_mutable_random_jitter_boxes()->::object_detection::protos::RandomJitterBoxes::MergeFrom(from._internal_random_jitter_boxes());
      break;
    }
    case kRandomCropImage: {
      _internal_mutable_random_crop_image()->::object_detection::protos::RandomCropImage::MergeFrom(from._internal_random_crop_image());
      break;
    }
    case kRandomPadImage: {
      _internal_mutable_random_pad_image()->::object_detection::protos::RandomPadImage::MergeFrom(from._internal_random_pad_image());
      break;
    }
    case kRandomCropPadImage: {
      _internal_mutable_random_crop_pad_image()->::object_detection::protos::RandomCropPadImage::MergeFrom(from._internal_random_crop_pad_image());
      break;
    }
    case kRandomCropToAspectRatio: {
      _internal_mutable_random_crop_to_aspect_ratio()->::object_detection::protos::RandomCropToAspectRatio::MergeFrom(from._internal_random_crop_to_aspect_ratio());
      break;
    }
    case kRandomBlackPatches: {
      _internal_mutable_random_black_patches()->::object_detection::protos::RandomBlackPatches::MergeFrom(from._internal_random_black_patches());
      break;
    }
    case kRandomResizeMethod: {
      _internal_mutable_random_resize_method()->::object_detection::protos::RandomResizeMethod::MergeFrom(from._internal_random_resize_method());
      break;
    }
    case kScaleBoxesToPixelCoordinates: {
      _internal_mutable_scale_boxes_to_pixel_coordinates()->::object_detection::protos::ScaleBoxesToPixelCoordinates::MergeFrom(from._internal_scale_boxes_to_pixel_coordinates());
      break;
    }
    case kResizeImage: {
      _internal_mutable_resize_image()->::object_detection::protos::ResizeImage::MergeFrom(from._internal_resize_image());
      break;
    }
    case kSubtractChannelMean: {
      _internal_mutable_subtract_channel_mean()->::object_detection::protos::SubtractChannelMean::MergeFrom(from._internal_subtract_channel_mean());
      break;
    }
    case kSsdRandomCrop: {
      _internal_mutable_ssd_random_crop()->::object_detection::protos::SSDRandomCrop::MergeFrom(from._internal_ssd_random_crop());
      break;
    }
    case kSsdRandomCropPad: {
      _internal_mutable_ssd_random_crop_pad()->::object_detection::protos::SSDRandomCropPad::MergeFrom(from._internal_ssd_random_crop_pad());
      break;
    }
    case kSsdRandomCropFixedAspectRatio: {
      _internal_mutable_ssd_random_crop_fixed_aspect_ratio()->::object_detection::protos::SSDRandomCropFixedAspectRatio::MergeFrom(from._internal_ssd_random_crop_fixed_aspect_ratio());
      break;
    }
    case kSsdRandomCropPadFixedAspectRatio: {
      _internal_mutable_ssd_random_crop_pad_fixed_aspect_ratio()->::object_detection::protos::SSDRandomCropPadFixedAspectRatio::MergeFrom(from._internal_ssd_random_crop_pad_fixed_aspect_ratio());
      break;
    }
    case kRandomVerticalFlip: {
      _internal_mutable_random_vertical_flip()->::object_detection::protos::RandomVerticalFlip::MergeFrom(from._internal_random_vertical_flip());
      break;
    }
    case kRandomRotation90: {
      _internal_mutable_random_rotation90()->::object_detection::protos::RandomRotation90::MergeFrom(from._internal_random_rotation90());
      break;
    }
    case kRgbToGray: {
      _internal_mutable_rgb_to_gray()->::object_detection::protos::RGBtoGray::MergeFrom(from._internal_rgb_to_gray());
      break;
    }
    case kConvertClassLogitsToSoftmax: {
      _internal_mutable_convert_class_logits_to_softmax()->::object_detection::protos::ConvertClassLogitsToSoftmax::MergeFrom(from._internal_convert_class_logits_to_softmax());
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.PreprocessingStep)
}

void PreprocessingStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreprocessingStep_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  clear_has_preprocessing_step();
}

PreprocessingStep::~PreprocessingStep() {
  // @@protoc_insertion_point(destructor:object_detection.protos.PreprocessingStep)
  SharedDtor();
}

void PreprocessingStep::SharedDtor() {
  if (has_preprocessing_step()) {
    clear_preprocessing_step();
  }
}

void PreprocessingStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreprocessingStep& PreprocessingStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreprocessingStep_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void PreprocessingStep::clear_preprocessing_step() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.PreprocessingStep)
  switch (preprocessing_step_case()) {
    case kNormalizeImage: {
      delete preprocessing_step_.normalize_image_;
      break;
    }
    case kRandomHorizontalFlip: {
      delete preprocessing_step_.random_horizontal_flip_;
      break;
    }
    case kRandomPixelValueScale: {
      delete preprocessing_step_.random_pixel_value_scale_;
      break;
    }
    case kRandomImageScale: {
      delete preprocessing_step_.random_image_scale_;
      break;
    }
    case kRandomRgbToGray: {
      delete preprocessing_step_.random_rgb_to_gray_;
      break;
    }
    case kRandomAdjustBrightness: {
      delete preprocessing_step_.random_adjust_brightness_;
      break;
    }
    case kRandomAdjustContrast: {
      delete preprocessing_step_.random_adjust_contrast_;
      break;
    }
    case kRandomAdjustHue: {
      delete preprocessing_step_.random_adjust_hue_;
      break;
    }
    case kRandomAdjustSaturation: {
      delete preprocessing_step_.random_adjust_saturation_;
      break;
    }
    case kRandomDistortColor: {
      delete preprocessing_step_.random_distort_color_;
      break;
    }
    case kRandomJitterBoxes: {
      delete preprocessing_step_.random_jitter_boxes_;
      break;
    }
    case kRandomCropImage: {
      delete preprocessing_step_.random_crop_image_;
      break;
    }
    case kRandomPadImage: {
      delete preprocessing_step_.random_pad_image_;
      break;
    }
    case kRandomCropPadImage: {
      delete preprocessing_step_.random_crop_pad_image_;
      break;
    }
    case kRandomCropToAspectRatio: {
      delete preprocessing_step_.random_crop_to_aspect_ratio_;
      break;
    }
    case kRandomBlackPatches: {
      delete preprocessing_step_.random_black_patches_;
      break;
    }
    case kRandomResizeMethod: {
      delete preprocessing_step_.random_resize_method_;
      break;
    }
    case kScaleBoxesToPixelCoordinates: {
      delete preprocessing_step_.scale_boxes_to_pixel_coordinates_;
      break;
    }
    case kResizeImage: {
      delete preprocessing_step_.resize_image_;
      break;
    }
    case kSubtractChannelMean: {
      delete preprocessing_step_.subtract_channel_mean_;
      break;
    }
    case kSsdRandomCrop: {
      delete preprocessing_step_.ssd_random_crop_;
      break;
    }
    case kSsdRandomCropPad: {
      delete preprocessing_step_.ssd_random_crop_pad_;
      break;
    }
    case kSsdRandomCropFixedAspectRatio: {
      delete preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_;
      break;
    }
    case kSsdRandomCropPadFixedAspectRatio: {
      delete preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_;
      break;
    }
    case kRandomVerticalFlip: {
      delete preprocessing_step_.random_vertical_flip_;
      break;
    }
    case kRandomRotation90: {
      delete preprocessing_step_.random_rotation90_;
      break;
    }
    case kRgbToGray: {
      delete preprocessing_step_.rgb_to_gray_;
      break;
    }
    case kConvertClassLogitsToSoftmax: {
      delete preprocessing_step_.convert_class_logits_to_softmax_;
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PREPROCESSING_STEP_NOT_SET;
}


void PreprocessingStep::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.PreprocessingStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_preprocessing_step();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PreprocessingStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .object_detection.protos.NormalizeImage normalize_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalize_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomHorizontalFlip random_horizontal_flip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_horizontal_flip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomPixelValueScale random_pixel_value_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_pixel_value_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomImageScale random_image_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_image_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomRGBtoGray random_rgb_to_gray = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_rgb_to_gray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomAdjustBrightness random_adjust_brightness = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_adjust_brightness(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomAdjustContrast random_adjust_contrast = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_adjust_contrast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomAdjustHue random_adjust_hue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_adjust_hue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomAdjustSaturation random_adjust_saturation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_adjust_saturation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomDistortColor random_distort_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_distort_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomJitterBoxes random_jitter_boxes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_jitter_boxes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomCropImage random_crop_image = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_crop_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomPadImage random_pad_image = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_pad_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomCropPadImage random_crop_pad_image = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_crop_pad_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomCropToAspectRatio random_crop_to_aspect_ratio = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_crop_to_aspect_ratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomBlackPatches random_black_patches = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_black_patches(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomResizeMethod random_resize_method = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_resize_method(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ScaleBoxesToPixelCoordinates scale_boxes_to_pixel_coordinates = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_boxes_to_pixel_coordinates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ResizeImage resize_image = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_resize_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.SubtractChannelMean subtract_channel_mean = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_subtract_channel_mean(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.SSDRandomCrop ssd_random_crop = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssd_random_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.SSDRandomCropPad ssd_random_crop_pad = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssd_random_crop_pad(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.SSDRandomCropFixedAspectRatio ssd_random_crop_fixed_aspect_ratio = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssd_random_crop_fixed_aspect_ratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.SSDRandomCropPadFixedAspectRatio ssd_random_crop_pad_fixed_aspect_ratio = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssd_random_crop_pad_fixed_aspect_ratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomVerticalFlip random_vertical_flip = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_vertical_flip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RandomRotation90 random_rotation90 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_random_rotation90(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RGBtoGray rgb_to_gray = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb_to_gray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ConvertClassLogitsToSoftmax convert_class_logits_to_softmax = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_convert_class_logits_to_softmax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreprocessingStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.PreprocessingStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (preprocessing_step_case()) {
    case kNormalizeImage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::normalize_image(this), target, stream);
      break;
    }
    case kRandomHorizontalFlip: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::random_horizontal_flip(this), target, stream);
      break;
    }
    case kRandomPixelValueScale: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::random_pixel_value_scale(this), target, stream);
      break;
    }
    case kRandomImageScale: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::random_image_scale(this), target, stream);
      break;
    }
    case kRandomRgbToGray: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::random_rgb_to_gray(this), target, stream);
      break;
    }
    case kRandomAdjustBrightness: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::random_adjust_brightness(this), target, stream);
      break;
    }
    case kRandomAdjustContrast: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::random_adjust_contrast(this), target, stream);
      break;
    }
    case kRandomAdjustHue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::random_adjust_hue(this), target, stream);
      break;
    }
    case kRandomAdjustSaturation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::random_adjust_saturation(this), target, stream);
      break;
    }
    case kRandomDistortColor: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::random_distort_color(this), target, stream);
      break;
    }
    case kRandomJitterBoxes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::random_jitter_boxes(this), target, stream);
      break;
    }
    case kRandomCropImage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::random_crop_image(this), target, stream);
      break;
    }
    case kRandomPadImage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::random_pad_image(this), target, stream);
      break;
    }
    case kRandomCropPadImage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          14, _Internal::random_crop_pad_image(this), target, stream);
      break;
    }
    case kRandomCropToAspectRatio: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          15, _Internal::random_crop_to_aspect_ratio(this), target, stream);
      break;
    }
    case kRandomBlackPatches: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          16, _Internal::random_black_patches(this), target, stream);
      break;
    }
    case kRandomResizeMethod: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          17, _Internal::random_resize_method(this), target, stream);
      break;
    }
    case kScaleBoxesToPixelCoordinates: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::scale_boxes_to_pixel_coordinates(this), target, stream);
      break;
    }
    case kResizeImage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          19, _Internal::resize_image(this), target, stream);
      break;
    }
    case kSubtractChannelMean: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          20, _Internal::subtract_channel_mean(this), target, stream);
      break;
    }
    case kSsdRandomCrop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          21, _Internal::ssd_random_crop(this), target, stream);
      break;
    }
    case kSsdRandomCropPad: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          22, _Internal::ssd_random_crop_pad(this), target, stream);
      break;
    }
    case kSsdRandomCropFixedAspectRatio: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          23, _Internal::ssd_random_crop_fixed_aspect_ratio(this), target, stream);
      break;
    }
    case kSsdRandomCropPadFixedAspectRatio: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          24, _Internal::ssd_random_crop_pad_fixed_aspect_ratio(this), target, stream);
      break;
    }
    case kRandomVerticalFlip: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          25, _Internal::random_vertical_flip(this), target, stream);
      break;
    }
    case kRandomRotation90: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          26, _Internal::random_rotation90(this), target, stream);
      break;
    }
    case kRgbToGray: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          27, _Internal::rgb_to_gray(this), target, stream);
      break;
    }
    case kConvertClassLogitsToSoftmax: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          28, _Internal::convert_class_logits_to_softmax(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.PreprocessingStep)
  return target;
}

size_t PreprocessingStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.PreprocessingStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (preprocessing_step_case()) {
    // optional .object_detection.protos.NormalizeImage normalize_image = 1;
    case kNormalizeImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.normalize_image_);
      break;
    }
    // optional .object_detection.protos.RandomHorizontalFlip random_horizontal_flip = 2;
    case kRandomHorizontalFlip: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_horizontal_flip_);
      break;
    }
    // optional .object_detection.protos.RandomPixelValueScale random_pixel_value_scale = 3;
    case kRandomPixelValueScale: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_pixel_value_scale_);
      break;
    }
    // optional .object_detection.protos.RandomImageScale random_image_scale = 4;
    case kRandomImageScale: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_image_scale_);
      break;
    }
    // optional .object_detection.protos.RandomRGBtoGray random_rgb_to_gray = 5;
    case kRandomRgbToGray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_rgb_to_gray_);
      break;
    }
    // optional .object_detection.protos.RandomAdjustBrightness random_adjust_brightness = 6;
    case kRandomAdjustBrightness: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_adjust_brightness_);
      break;
    }
    // optional .object_detection.protos.RandomAdjustContrast random_adjust_contrast = 7;
    case kRandomAdjustContrast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_adjust_contrast_);
      break;
    }
    // optional .object_detection.protos.RandomAdjustHue random_adjust_hue = 8;
    case kRandomAdjustHue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_adjust_hue_);
      break;
    }
    // optional .object_detection.protos.RandomAdjustSaturation random_adjust_saturation = 9;
    case kRandomAdjustSaturation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_adjust_saturation_);
      break;
    }
    // optional .object_detection.protos.RandomDistortColor random_distort_color = 10;
    case kRandomDistortColor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_distort_color_);
      break;
    }
    // optional .object_detection.protos.RandomJitterBoxes random_jitter_boxes = 11;
    case kRandomJitterBoxes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_jitter_boxes_);
      break;
    }
    // optional .object_detection.protos.RandomCropImage random_crop_image = 12;
    case kRandomCropImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_crop_image_);
      break;
    }
    // optional .object_detection.protos.RandomPadImage random_pad_image = 13;
    case kRandomPadImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_pad_image_);
      break;
    }
    // optional .object_detection.protos.RandomCropPadImage random_crop_pad_image = 14;
    case kRandomCropPadImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_crop_pad_image_);
      break;
    }
    // optional .object_detection.protos.RandomCropToAspectRatio random_crop_to_aspect_ratio = 15;
    case kRandomCropToAspectRatio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_crop_to_aspect_ratio_);
      break;
    }
    // optional .object_detection.protos.RandomBlackPatches random_black_patches = 16;
    case kRandomBlackPatches: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_black_patches_);
      break;
    }
    // optional .object_detection.protos.RandomResizeMethod random_resize_method = 17;
    case kRandomResizeMethod: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_resize_method_);
      break;
    }
    // optional .object_detection.protos.ScaleBoxesToPixelCoordinates scale_boxes_to_pixel_coordinates = 18;
    case kScaleBoxesToPixelCoordinates: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.scale_boxes_to_pixel_coordinates_);
      break;
    }
    // optional .object_detection.protos.ResizeImage resize_image = 19;
    case kResizeImage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.resize_image_);
      break;
    }
    // optional .object_detection.protos.SubtractChannelMean subtract_channel_mean = 20;
    case kSubtractChannelMean: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.subtract_channel_mean_);
      break;
    }
    // optional .object_detection.protos.SSDRandomCrop ssd_random_crop = 21;
    case kSsdRandomCrop: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.ssd_random_crop_);
      break;
    }
    // optional .object_detection.protos.SSDRandomCropPad ssd_random_crop_pad = 22;
    case kSsdRandomCropPad: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.ssd_random_crop_pad_);
      break;
    }
    // optional .object_detection.protos.SSDRandomCropFixedAspectRatio ssd_random_crop_fixed_aspect_ratio = 23;
    case kSsdRandomCropFixedAspectRatio: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_);
      break;
    }
    // optional .object_detection.protos.SSDRandomCropPadFixedAspectRatio ssd_random_crop_pad_fixed_aspect_ratio = 24;
    case kSsdRandomCropPadFixedAspectRatio: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_);
      break;
    }
    // optional .object_detection.protos.RandomVerticalFlip random_vertical_flip = 25;
    case kRandomVerticalFlip: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_vertical_flip_);
      break;
    }
    // optional .object_detection.protos.RandomRotation90 random_rotation90 = 26;
    case kRandomRotation90: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.random_rotation90_);
      break;
    }
    // optional .object_detection.protos.RGBtoGray rgb_to_gray = 27;
    case kRgbToGray: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.rgb_to_gray_);
      break;
    }
    // optional .object_detection.protos.ConvertClassLogitsToSoftmax convert_class_logits_to_softmax = 28;
    case kConvertClassLogitsToSoftmax: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessing_step_.convert_class_logits_to_softmax_);
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreprocessingStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.PreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  const PreprocessingStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreprocessingStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.PreprocessingStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.PreprocessingStep)
    MergeFrom(*source);
  }
}

void PreprocessingStep::MergeFrom(const PreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.PreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.preprocessing_step_case()) {
    case kNormalizeImage: {
      _internal_mutable_normalize_image()->::object_detection::protos::NormalizeImage::MergeFrom(from._internal_normalize_image());
      break;
    }
    case kRandomHorizontalFlip: {
      _internal_mutable_random_horizontal_flip()->::object_detection::protos::RandomHorizontalFlip::MergeFrom(from._internal_random_horizontal_flip());
      break;
    }
    case kRandomPixelValueScale: {
      _internal_mutable_random_pixel_value_scale()->::object_detection::protos::RandomPixelValueScale::MergeFrom(from._internal_random_pixel_value_scale());
      break;
    }
    case kRandomImageScale: {
      _internal_mutable_random_image_scale()->::object_detection::protos::RandomImageScale::MergeFrom(from._internal_random_image_scale());
      break;
    }
    case kRandomRgbToGray: {
      _internal_mutable_random_rgb_to_gray()->::object_detection::protos::RandomRGBtoGray::MergeFrom(from._internal_random_rgb_to_gray());
      break;
    }
    case kRandomAdjustBrightness: {
      _internal_mutable_random_adjust_brightness()->::object_detection::protos::RandomAdjustBrightness::MergeFrom(from._internal_random_adjust_brightness());
      break;
    }
    case kRandomAdjustContrast: {
      _internal_mutable_random_adjust_contrast()->::object_detection::protos::RandomAdjustContrast::MergeFrom(from._internal_random_adjust_contrast());
      break;
    }
    case kRandomAdjustHue: {
      _internal_mutable_random_adjust_hue()->::object_detection::protos::RandomAdjustHue::MergeFrom(from._internal_random_adjust_hue());
      break;
    }
    case kRandomAdjustSaturation: {
      _internal_mutable_random_adjust_saturation()->::object_detection::protos::RandomAdjustSaturation::MergeFrom(from._internal_random_adjust_saturation());
      break;
    }
    case kRandomDistortColor: {
      _internal_mutable_random_distort_color()->::object_detection::protos::RandomDistortColor::MergeFrom(from._internal_random_distort_color());
      break;
    }
    case kRandomJitterBoxes: {
      _internal_mutable_random_jitter_boxes()->::object_detection::protos::RandomJitterBoxes::MergeFrom(from._internal_random_jitter_boxes());
      break;
    }
    case kRandomCropImage: {
      _internal_mutable_random_crop_image()->::object_detection::protos::RandomCropImage::MergeFrom(from._internal_random_crop_image());
      break;
    }
    case kRandomPadImage: {
      _internal_mutable_random_pad_image()->::object_detection::protos::RandomPadImage::MergeFrom(from._internal_random_pad_image());
      break;
    }
    case kRandomCropPadImage: {
      _internal_mutable_random_crop_pad_image()->::object_detection::protos::RandomCropPadImage::MergeFrom(from._internal_random_crop_pad_image());
      break;
    }
    case kRandomCropToAspectRatio: {
      _internal_mutable_random_crop_to_aspect_ratio()->::object_detection::protos::RandomCropToAspectRatio::MergeFrom(from._internal_random_crop_to_aspect_ratio());
      break;
    }
    case kRandomBlackPatches: {
      _internal_mutable_random_black_patches()->::object_detection::protos::RandomBlackPatches::MergeFrom(from._internal_random_black_patches());
      break;
    }
    case kRandomResizeMethod: {
      _internal_mutable_random_resize_method()->::object_detection::protos::RandomResizeMethod::MergeFrom(from._internal_random_resize_method());
      break;
    }
    case kScaleBoxesToPixelCoordinates: {
      _internal_mutable_scale_boxes_to_pixel_coordinates()->::object_detection::protos::ScaleBoxesToPixelCoordinates::MergeFrom(from._internal_scale_boxes_to_pixel_coordinates());
      break;
    }
    case kResizeImage: {
      _internal_mutable_resize_image()->::object_detection::protos::ResizeImage::MergeFrom(from._internal_resize_image());
      break;
    }
    case kSubtractChannelMean: {
      _internal_mutable_subtract_channel_mean()->::object_detection::protos::SubtractChannelMean::MergeFrom(from._internal_subtract_channel_mean());
      break;
    }
    case kSsdRandomCrop: {
      _internal_mutable_ssd_random_crop()->::object_detection::protos::SSDRandomCrop::MergeFrom(from._internal_ssd_random_crop());
      break;
    }
    case kSsdRandomCropPad: {
      _internal_mutable_ssd_random_crop_pad()->::object_detection::protos::SSDRandomCropPad::MergeFrom(from._internal_ssd_random_crop_pad());
      break;
    }
    case kSsdRandomCropFixedAspectRatio: {
      _internal_mutable_ssd_random_crop_fixed_aspect_ratio()->::object_detection::protos::SSDRandomCropFixedAspectRatio::MergeFrom(from._internal_ssd_random_crop_fixed_aspect_ratio());
      break;
    }
    case kSsdRandomCropPadFixedAspectRatio: {
      _internal_mutable_ssd_random_crop_pad_fixed_aspect_ratio()->::object_detection::protos::SSDRandomCropPadFixedAspectRatio::MergeFrom(from._internal_ssd_random_crop_pad_fixed_aspect_ratio());
      break;
    }
    case kRandomVerticalFlip: {
      _internal_mutable_random_vertical_flip()->::object_detection::protos::RandomVerticalFlip::MergeFrom(from._internal_random_vertical_flip());
      break;
    }
    case kRandomRotation90: {
      _internal_mutable_random_rotation90()->::object_detection::protos::RandomRotation90::MergeFrom(from._internal_random_rotation90());
      break;
    }
    case kRgbToGray: {
      _internal_mutable_rgb_to_gray()->::object_detection::protos::RGBtoGray::MergeFrom(from._internal_rgb_to_gray());
      break;
    }
    case kConvertClassLogitsToSoftmax: {
      _internal_mutable_convert_class_logits_to_softmax()->::object_detection::protos::ConvertClassLogitsToSoftmax::MergeFrom(from._internal_convert_class_logits_to_softmax());
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
}

void PreprocessingStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.PreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreprocessingStep::CopyFrom(const PreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.PreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessingStep::IsInitialized() const {
  return true;
}

void PreprocessingStep::InternalSwap(PreprocessingStep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preprocessing_step_, other->preprocessing_step_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreprocessingStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizeImage::InitAsDefaultInstance() {
}
class NormalizeImage::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizeImage>()._has_bits_);
  static void set_has_original_minval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_maxval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_minval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_maxval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NormalizeImage::NormalizeImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.NormalizeImage)
}
NormalizeImage::NormalizeImage(const NormalizeImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&original_minval_, &from.original_minval_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_maxval_) -
    reinterpret_cast<char*>(&original_minval_)) + sizeof(target_maxval_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.NormalizeImage)
}

void NormalizeImage::SharedCtor() {
  ::memset(&original_minval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_minval_) -
      reinterpret_cast<char*>(&original_minval_)) + sizeof(target_minval_));
  target_maxval_ = 1;
}

NormalizeImage::~NormalizeImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.NormalizeImage)
  SharedDtor();
}

void NormalizeImage::SharedDtor() {
}

void NormalizeImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizeImage& NormalizeImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void NormalizeImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.NormalizeImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&original_minval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_minval_) -
        reinterpret_cast<char*>(&original_minval_)) + sizeof(target_minval_));
    target_maxval_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NormalizeImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float original_minval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_original_minval(&has_bits);
          original_minval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float original_maxval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_original_maxval(&has_bits);
          original_maxval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float target_minval = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_target_minval(&has_bits);
          target_minval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float target_maxval = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_target_maxval(&has_bits);
          target_maxval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizeImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.NormalizeImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float original_minval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_original_minval(), target);
  }

  // optional float original_maxval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_original_maxval(), target);
  }

  // optional float target_minval = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_target_minval(), target);
  }

  // optional float target_maxval = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_target_maxval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.NormalizeImage)
  return target;
}

size_t NormalizeImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.NormalizeImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float original_minval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float original_maxval = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float target_minval = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float target_maxval = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizeImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.NormalizeImage)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizeImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizeImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.NormalizeImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.NormalizeImage)
    MergeFrom(*source);
  }
}

void NormalizeImage::MergeFrom(const NormalizeImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.NormalizeImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      original_minval_ = from.original_minval_;
    }
    if (cached_has_bits & 0x00000002u) {
      original_maxval_ = from.original_maxval_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_minval_ = from.target_minval_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_maxval_ = from.target_maxval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizeImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.NormalizeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeImage::CopyFrom(const NormalizeImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.NormalizeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeImage::IsInitialized() const {
  return true;
}

void NormalizeImage::InternalSwap(NormalizeImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(original_minval_, other->original_minval_);
  swap(original_maxval_, other->original_maxval_);
  swap(target_minval_, other->target_minval_);
  swap(target_maxval_, other->target_maxval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizeImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomHorizontalFlip::InitAsDefaultInstance() {
}
class RandomHorizontalFlip::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomHorizontalFlip>()._has_bits_);
};

RandomHorizontalFlip::RandomHorizontalFlip()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomHorizontalFlip)
}
RandomHorizontalFlip::RandomHorizontalFlip(const RandomHorizontalFlip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keypoint_flip_permutation_(from.keypoint_flip_permutation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomHorizontalFlip)
}

void RandomHorizontalFlip::SharedCtor() {
}

RandomHorizontalFlip::~RandomHorizontalFlip() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomHorizontalFlip)
  SharedDtor();
}

void RandomHorizontalFlip::SharedDtor() {
}

void RandomHorizontalFlip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomHorizontalFlip& RandomHorizontalFlip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomHorizontalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomHorizontalFlip::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomHorizontalFlip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoint_flip_permutation_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomHorizontalFlip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 keypoint_flip_permutation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keypoint_flip_permutation(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keypoint_flip_permutation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomHorizontalFlip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomHorizontalFlip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 keypoint_flip_permutation = 1;
  for (int i = 0, n = this->_internal_keypoint_flip_permutation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_keypoint_flip_permutation(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomHorizontalFlip)
  return target;
}

size_t RandomHorizontalFlip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomHorizontalFlip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 keypoint_flip_permutation = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->keypoint_flip_permutation_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keypoint_flip_permutation_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomHorizontalFlip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomHorizontalFlip)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomHorizontalFlip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomHorizontalFlip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomHorizontalFlip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomHorizontalFlip)
    MergeFrom(*source);
  }
}

void RandomHorizontalFlip::MergeFrom(const RandomHorizontalFlip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomHorizontalFlip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoint_flip_permutation_.MergeFrom(from.keypoint_flip_permutation_);
}

void RandomHorizontalFlip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomHorizontalFlip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomHorizontalFlip::CopyFrom(const RandomHorizontalFlip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomHorizontalFlip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomHorizontalFlip::IsInitialized() const {
  return true;
}

void RandomHorizontalFlip::InternalSwap(RandomHorizontalFlip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keypoint_flip_permutation_.InternalSwap(&other->keypoint_flip_permutation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomHorizontalFlip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomVerticalFlip::InitAsDefaultInstance() {
}
class RandomVerticalFlip::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomVerticalFlip>()._has_bits_);
};

RandomVerticalFlip::RandomVerticalFlip()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomVerticalFlip)
}
RandomVerticalFlip::RandomVerticalFlip(const RandomVerticalFlip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keypoint_flip_permutation_(from.keypoint_flip_permutation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomVerticalFlip)
}

void RandomVerticalFlip::SharedCtor() {
}

RandomVerticalFlip::~RandomVerticalFlip() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomVerticalFlip)
  SharedDtor();
}

void RandomVerticalFlip::SharedDtor() {
}

void RandomVerticalFlip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomVerticalFlip& RandomVerticalFlip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomVerticalFlip_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomVerticalFlip::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomVerticalFlip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoint_flip_permutation_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomVerticalFlip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 keypoint_flip_permutation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keypoint_flip_permutation(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keypoint_flip_permutation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomVerticalFlip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomVerticalFlip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 keypoint_flip_permutation = 1;
  for (int i = 0, n = this->_internal_keypoint_flip_permutation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_keypoint_flip_permutation(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomVerticalFlip)
  return target;
}

size_t RandomVerticalFlip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomVerticalFlip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 keypoint_flip_permutation = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->keypoint_flip_permutation_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keypoint_flip_permutation_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomVerticalFlip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomVerticalFlip)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomVerticalFlip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomVerticalFlip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomVerticalFlip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomVerticalFlip)
    MergeFrom(*source);
  }
}

void RandomVerticalFlip::MergeFrom(const RandomVerticalFlip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomVerticalFlip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoint_flip_permutation_.MergeFrom(from.keypoint_flip_permutation_);
}

void RandomVerticalFlip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomVerticalFlip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomVerticalFlip::CopyFrom(const RandomVerticalFlip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomVerticalFlip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomVerticalFlip::IsInitialized() const {
  return true;
}

void RandomVerticalFlip::InternalSwap(RandomVerticalFlip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keypoint_flip_permutation_.InternalSwap(&other->keypoint_flip_permutation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomVerticalFlip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomRotation90::InitAsDefaultInstance() {
}
class RandomRotation90::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomRotation90>()._has_bits_);
};

RandomRotation90::RandomRotation90()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomRotation90)
}
RandomRotation90::RandomRotation90(const RandomRotation90& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomRotation90)
}

void RandomRotation90::SharedCtor() {
}

RandomRotation90::~RandomRotation90() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomRotation90)
  SharedDtor();
}

void RandomRotation90::SharedDtor() {
}

void RandomRotation90::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomRotation90& RandomRotation90::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomRotation90_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomRotation90::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomRotation90)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomRotation90::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomRotation90::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomRotation90)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomRotation90)
  return target;
}

size_t RandomRotation90::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomRotation90)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomRotation90::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomRotation90)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomRotation90* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomRotation90>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomRotation90)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomRotation90)
    MergeFrom(*source);
  }
}

void RandomRotation90::MergeFrom(const RandomRotation90& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomRotation90)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RandomRotation90::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomRotation90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomRotation90::CopyFrom(const RandomRotation90& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomRotation90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomRotation90::IsInitialized() const {
  return true;
}

void RandomRotation90::InternalSwap(RandomRotation90* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomRotation90::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomPixelValueScale::InitAsDefaultInstance() {
}
class RandomPixelValueScale::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomPixelValueScale>()._has_bits_);
  static void set_has_minval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RandomPixelValueScale::RandomPixelValueScale()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomPixelValueScale)
}
RandomPixelValueScale::RandomPixelValueScale(const RandomPixelValueScale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minval_, &from.minval_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxval_) -
    reinterpret_cast<char*>(&minval_)) + sizeof(maxval_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomPixelValueScale)
}

void RandomPixelValueScale::SharedCtor() {
  minval_ = 0.9f;
  maxval_ = 1.1f;
}

RandomPixelValueScale::~RandomPixelValueScale() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomPixelValueScale)
  SharedDtor();
}

void RandomPixelValueScale::SharedDtor() {
}

void RandomPixelValueScale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomPixelValueScale& RandomPixelValueScale::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomPixelValueScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomPixelValueScale::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomPixelValueScale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    minval_ = 0.9f;
    maxval_ = 1.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomPixelValueScale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float minval = 1 [default = 0.9];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_minval(&has_bits);
          minval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxval = 2 [default = 1.1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_maxval(&has_bits);
          maxval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomPixelValueScale::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomPixelValueScale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float minval = 1 [default = 0.9];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_minval(), target);
  }

  // optional float maxval = 2 [default = 1.1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_maxval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomPixelValueScale)
  return target;
}

size_t RandomPixelValueScale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomPixelValueScale)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float minval = 1 [default = 0.9];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float maxval = 2 [default = 1.1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomPixelValueScale::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomPixelValueScale)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomPixelValueScale* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomPixelValueScale>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomPixelValueScale)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomPixelValueScale)
    MergeFrom(*source);
  }
}

void RandomPixelValueScale::MergeFrom(const RandomPixelValueScale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomPixelValueScale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      minval_ = from.minval_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxval_ = from.maxval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomPixelValueScale::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomPixelValueScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomPixelValueScale::CopyFrom(const RandomPixelValueScale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomPixelValueScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomPixelValueScale::IsInitialized() const {
  return true;
}

void RandomPixelValueScale::InternalSwap(RandomPixelValueScale* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(minval_, other->minval_);
  swap(maxval_, other->maxval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomPixelValueScale::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomImageScale::InitAsDefaultInstance() {
}
class RandomImageScale::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomImageScale>()._has_bits_);
  static void set_has_min_scale_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_scale_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RandomImageScale::RandomImageScale()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomImageScale)
}
RandomImageScale::RandomImageScale(const RandomImageScale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_scale_ratio_, &from.min_scale_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_scale_ratio_) -
    reinterpret_cast<char*>(&min_scale_ratio_)) + sizeof(max_scale_ratio_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomImageScale)
}

void RandomImageScale::SharedCtor() {
  min_scale_ratio_ = 0.5f;
  max_scale_ratio_ = 2;
}

RandomImageScale::~RandomImageScale() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomImageScale)
  SharedDtor();
}

void RandomImageScale::SharedDtor() {
}

void RandomImageScale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomImageScale& RandomImageScale::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomImageScale_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomImageScale::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomImageScale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    min_scale_ratio_ = 0.5f;
    max_scale_ratio_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomImageScale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_scale_ratio = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_scale_ratio(&has_bits);
          min_scale_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_scale_ratio = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_scale_ratio(&has_bits);
          max_scale_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomImageScale::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomImageScale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_scale_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_scale_ratio(), target);
  }

  // optional float max_scale_ratio = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_scale_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomImageScale)
  return target;
}

size_t RandomImageScale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomImageScale)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float min_scale_ratio = 1 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_scale_ratio = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomImageScale::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomImageScale)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomImageScale* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomImageScale>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomImageScale)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomImageScale)
    MergeFrom(*source);
  }
}

void RandomImageScale::MergeFrom(const RandomImageScale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomImageScale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_scale_ratio_ = from.min_scale_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_scale_ratio_ = from.max_scale_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomImageScale::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomImageScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomImageScale::CopyFrom(const RandomImageScale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomImageScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomImageScale::IsInitialized() const {
  return true;
}

void RandomImageScale::InternalSwap(RandomImageScale* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_scale_ratio_, other->min_scale_ratio_);
  swap(max_scale_ratio_, other->max_scale_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomImageScale::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomRGBtoGray::InitAsDefaultInstance() {
}
class RandomRGBtoGray::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomRGBtoGray>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomRGBtoGray::RandomRGBtoGray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomRGBtoGray)
}
RandomRGBtoGray::RandomRGBtoGray(const RandomRGBtoGray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomRGBtoGray)
}

void RandomRGBtoGray::SharedCtor() {
  probability_ = 0.1f;
}

RandomRGBtoGray::~RandomRGBtoGray() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomRGBtoGray)
  SharedDtor();
}

void RandomRGBtoGray::SharedDtor() {
}

void RandomRGBtoGray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomRGBtoGray& RandomRGBtoGray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomRGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomRGBtoGray::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomRGBtoGray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  probability_ = 0.1f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomRGBtoGray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float probability = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomRGBtoGray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomRGBtoGray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float probability = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_probability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomRGBtoGray)
  return target;
}

size_t RandomRGBtoGray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomRGBtoGray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float probability = 1 [default = 0.1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomRGBtoGray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomRGBtoGray)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomRGBtoGray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomRGBtoGray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomRGBtoGray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomRGBtoGray)
    MergeFrom(*source);
  }
}

void RandomRGBtoGray::MergeFrom(const RandomRGBtoGray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomRGBtoGray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_probability()) {
    _internal_set_probability(from._internal_probability());
  }
}

void RandomRGBtoGray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomRGBtoGray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomRGBtoGray::CopyFrom(const RandomRGBtoGray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomRGBtoGray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomRGBtoGray::IsInitialized() const {
  return true;
}

void RandomRGBtoGray::InternalSwap(RandomRGBtoGray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomRGBtoGray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomAdjustBrightness::InitAsDefaultInstance() {
}
class RandomAdjustBrightness::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomAdjustBrightness>()._has_bits_);
  static void set_has_max_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomAdjustBrightness::RandomAdjustBrightness()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAdjustBrightness)
}
RandomAdjustBrightness::RandomAdjustBrightness(const RandomAdjustBrightness& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_delta_ = from.max_delta_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAdjustBrightness)
}

void RandomAdjustBrightness::SharedCtor() {
  max_delta_ = 0.2f;
}

RandomAdjustBrightness::~RandomAdjustBrightness() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAdjustBrightness)
  SharedDtor();
}

void RandomAdjustBrightness::SharedDtor() {
}

void RandomAdjustBrightness::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomAdjustBrightness& RandomAdjustBrightness::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomAdjustBrightness_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomAdjustBrightness::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAdjustBrightness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_delta_ = 0.2f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomAdjustBrightness::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float max_delta = 1 [default = 0.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_max_delta(&has_bits);
          max_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomAdjustBrightness::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAdjustBrightness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_delta = 1 [default = 0.2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_max_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAdjustBrightness)
  return target;
}

size_t RandomAdjustBrightness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAdjustBrightness)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float max_delta = 1 [default = 0.2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomAdjustBrightness::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAdjustBrightness)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAdjustBrightness* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomAdjustBrightness>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAdjustBrightness)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAdjustBrightness)
    MergeFrom(*source);
  }
}

void RandomAdjustBrightness::MergeFrom(const RandomAdjustBrightness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAdjustBrightness)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_delta()) {
    _internal_set_max_delta(from._internal_max_delta());
  }
}

void RandomAdjustBrightness::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAdjustBrightness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAdjustBrightness::CopyFrom(const RandomAdjustBrightness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAdjustBrightness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAdjustBrightness::IsInitialized() const {
  return true;
}

void RandomAdjustBrightness::InternalSwap(RandomAdjustBrightness* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_delta_, other->max_delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomAdjustBrightness::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomAdjustContrast::InitAsDefaultInstance() {
}
class RandomAdjustContrast::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomAdjustContrast>()._has_bits_);
  static void set_has_min_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RandomAdjustContrast::RandomAdjustContrast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAdjustContrast)
}
RandomAdjustContrast::RandomAdjustContrast(const RandomAdjustContrast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_delta_, &from.min_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_delta_) -
    reinterpret_cast<char*>(&min_delta_)) + sizeof(max_delta_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAdjustContrast)
}

void RandomAdjustContrast::SharedCtor() {
  min_delta_ = 0.8f;
  max_delta_ = 1.25f;
}

RandomAdjustContrast::~RandomAdjustContrast() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAdjustContrast)
  SharedDtor();
}

void RandomAdjustContrast::SharedDtor() {
}

void RandomAdjustContrast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomAdjustContrast& RandomAdjustContrast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomAdjustContrast_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomAdjustContrast::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAdjustContrast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    min_delta_ = 0.8f;
    max_delta_ = 1.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomAdjustContrast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_delta = 1 [default = 0.8];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_delta(&has_bits);
          min_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_delta = 2 [default = 1.25];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_delta(&has_bits);
          max_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomAdjustContrast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAdjustContrast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_delta = 1 [default = 0.8];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_delta(), target);
  }

  // optional float max_delta = 2 [default = 1.25];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAdjustContrast)
  return target;
}

size_t RandomAdjustContrast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAdjustContrast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float min_delta = 1 [default = 0.8];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_delta = 2 [default = 1.25];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomAdjustContrast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAdjustContrast)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAdjustContrast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomAdjustContrast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAdjustContrast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAdjustContrast)
    MergeFrom(*source);
  }
}

void RandomAdjustContrast::MergeFrom(const RandomAdjustContrast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAdjustContrast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_delta_ = from.min_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_delta_ = from.max_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomAdjustContrast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAdjustContrast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAdjustContrast::CopyFrom(const RandomAdjustContrast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAdjustContrast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAdjustContrast::IsInitialized() const {
  return true;
}

void RandomAdjustContrast::InternalSwap(RandomAdjustContrast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_delta_, other->min_delta_);
  swap(max_delta_, other->max_delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomAdjustContrast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomAdjustHue::InitAsDefaultInstance() {
}
class RandomAdjustHue::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomAdjustHue>()._has_bits_);
  static void set_has_max_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomAdjustHue::RandomAdjustHue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAdjustHue)
}
RandomAdjustHue::RandomAdjustHue(const RandomAdjustHue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_delta_ = from.max_delta_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAdjustHue)
}

void RandomAdjustHue::SharedCtor() {
  max_delta_ = 0.02f;
}

RandomAdjustHue::~RandomAdjustHue() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAdjustHue)
  SharedDtor();
}

void RandomAdjustHue::SharedDtor() {
}

void RandomAdjustHue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomAdjustHue& RandomAdjustHue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomAdjustHue_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomAdjustHue::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAdjustHue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_delta_ = 0.02f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomAdjustHue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float max_delta = 1 [default = 0.02];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_max_delta(&has_bits);
          max_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomAdjustHue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAdjustHue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_delta = 1 [default = 0.02];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_max_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAdjustHue)
  return target;
}

size_t RandomAdjustHue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAdjustHue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float max_delta = 1 [default = 0.02];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomAdjustHue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAdjustHue)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAdjustHue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomAdjustHue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAdjustHue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAdjustHue)
    MergeFrom(*source);
  }
}

void RandomAdjustHue::MergeFrom(const RandomAdjustHue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAdjustHue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_delta()) {
    _internal_set_max_delta(from._internal_max_delta());
  }
}

void RandomAdjustHue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAdjustHue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAdjustHue::CopyFrom(const RandomAdjustHue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAdjustHue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAdjustHue::IsInitialized() const {
  return true;
}

void RandomAdjustHue::InternalSwap(RandomAdjustHue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_delta_, other->max_delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomAdjustHue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomAdjustSaturation::InitAsDefaultInstance() {
}
class RandomAdjustSaturation::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomAdjustSaturation>()._has_bits_);
  static void set_has_min_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RandomAdjustSaturation::RandomAdjustSaturation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAdjustSaturation)
}
RandomAdjustSaturation::RandomAdjustSaturation(const RandomAdjustSaturation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_delta_, &from.min_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_delta_) -
    reinterpret_cast<char*>(&min_delta_)) + sizeof(max_delta_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAdjustSaturation)
}

void RandomAdjustSaturation::SharedCtor() {
  min_delta_ = 0.8f;
  max_delta_ = 1.25f;
}

RandomAdjustSaturation::~RandomAdjustSaturation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAdjustSaturation)
  SharedDtor();
}

void RandomAdjustSaturation::SharedDtor() {
}

void RandomAdjustSaturation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomAdjustSaturation& RandomAdjustSaturation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomAdjustSaturation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomAdjustSaturation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAdjustSaturation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    min_delta_ = 0.8f;
    max_delta_ = 1.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomAdjustSaturation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_delta = 1 [default = 0.8];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_delta(&has_bits);
          min_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_delta = 2 [default = 1.25];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_delta(&has_bits);
          max_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomAdjustSaturation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAdjustSaturation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_delta = 1 [default = 0.8];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_delta(), target);
  }

  // optional float max_delta = 2 [default = 1.25];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAdjustSaturation)
  return target;
}

size_t RandomAdjustSaturation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAdjustSaturation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float min_delta = 1 [default = 0.8];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_delta = 2 [default = 1.25];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomAdjustSaturation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAdjustSaturation)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAdjustSaturation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomAdjustSaturation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAdjustSaturation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAdjustSaturation)
    MergeFrom(*source);
  }
}

void RandomAdjustSaturation::MergeFrom(const RandomAdjustSaturation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAdjustSaturation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_delta_ = from.min_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_delta_ = from.max_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomAdjustSaturation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAdjustSaturation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAdjustSaturation::CopyFrom(const RandomAdjustSaturation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAdjustSaturation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAdjustSaturation::IsInitialized() const {
  return true;
}

void RandomAdjustSaturation::InternalSwap(RandomAdjustSaturation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_delta_, other->min_delta_);
  swap(max_delta_, other->max_delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomAdjustSaturation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomDistortColor::InitAsDefaultInstance() {
}
class RandomDistortColor::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomDistortColor>()._has_bits_);
  static void set_has_color_ordering(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomDistortColor::RandomDistortColor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomDistortColor)
}
RandomDistortColor::RandomDistortColor(const RandomDistortColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_ordering_ = from.color_ordering_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomDistortColor)
}

void RandomDistortColor::SharedCtor() {
  color_ordering_ = 0;
}

RandomDistortColor::~RandomDistortColor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomDistortColor)
  SharedDtor();
}

void RandomDistortColor::SharedDtor() {
}

void RandomDistortColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomDistortColor& RandomDistortColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomDistortColor_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomDistortColor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomDistortColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ordering_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomDistortColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 color_ordering = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_color_ordering(&has_bits);
          color_ordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomDistortColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomDistortColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 color_ordering = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_color_ordering(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomDistortColor)
  return target;
}

size_t RandomDistortColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomDistortColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 color_ordering = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color_ordering());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomDistortColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomDistortColor)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomDistortColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomDistortColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomDistortColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomDistortColor)
    MergeFrom(*source);
  }
}

void RandomDistortColor::MergeFrom(const RandomDistortColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomDistortColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color_ordering()) {
    _internal_set_color_ordering(from._internal_color_ordering());
  }
}

void RandomDistortColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomDistortColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomDistortColor::CopyFrom(const RandomDistortColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomDistortColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomDistortColor::IsInitialized() const {
  return true;
}

void RandomDistortColor::InternalSwap(RandomDistortColor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_ordering_, other->color_ordering_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomDistortColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomJitterBoxes::InitAsDefaultInstance() {
}
class RandomJitterBoxes::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomJitterBoxes>()._has_bits_);
  static void set_has_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomJitterBoxes::RandomJitterBoxes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomJitterBoxes)
}
RandomJitterBoxes::RandomJitterBoxes(const RandomJitterBoxes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomJitterBoxes)
}

void RandomJitterBoxes::SharedCtor() {
  ratio_ = 0.05f;
}

RandomJitterBoxes::~RandomJitterBoxes() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomJitterBoxes)
  SharedDtor();
}

void RandomJitterBoxes::SharedDtor() {
}

void RandomJitterBoxes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomJitterBoxes& RandomJitterBoxes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomJitterBoxes_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomJitterBoxes::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomJitterBoxes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_ = 0.05f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomJitterBoxes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float ratio = 1 [default = 0.05];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ratio(&has_bits);
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomJitterBoxes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomJitterBoxes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ratio = 1 [default = 0.05];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomJitterBoxes)
  return target;
}

size_t RandomJitterBoxes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomJitterBoxes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float ratio = 1 [default = 0.05];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomJitterBoxes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomJitterBoxes)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomJitterBoxes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomJitterBoxes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomJitterBoxes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomJitterBoxes)
    MergeFrom(*source);
  }
}

void RandomJitterBoxes::MergeFrom(const RandomJitterBoxes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomJitterBoxes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ratio()) {
    _internal_set_ratio(from._internal_ratio());
  }
}

void RandomJitterBoxes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomJitterBoxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomJitterBoxes::CopyFrom(const RandomJitterBoxes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomJitterBoxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomJitterBoxes::IsInitialized() const {
  return true;
}

void RandomJitterBoxes::InternalSwap(RandomJitterBoxes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ratio_, other->ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomJitterBoxes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomCropImage::InitAsDefaultInstance() {
}
class RandomCropImage::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomCropImage>()._has_bits_);
  static void set_has_min_object_covered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_area(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_area(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_overlap_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clip_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_random_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomCropImage::RandomCropImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomCropImage)
}
RandomCropImage::RandomCropImage(const RandomCropImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&random_coef_, &from.random_coef_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_thresh_) -
    reinterpret_cast<char*>(&random_coef_)) + sizeof(overlap_thresh_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomCropImage)
}

void RandomCropImage::SharedCtor() {
  random_coef_ = 0;
  clip_boxes_ = true;
  min_object_covered_ = 1;
  min_aspect_ratio_ = 0.75f;
  max_aspect_ratio_ = 1.33f;
  min_area_ = 0.1f;
  max_area_ = 1;
  overlap_thresh_ = 0.3f;
}

RandomCropImage::~RandomCropImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomCropImage)
  SharedDtor();
}

void RandomCropImage::SharedDtor() {
}

void RandomCropImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomCropImage& RandomCropImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomCropImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomCropImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomCropImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    random_coef_ = 0;
    clip_boxes_ = true;
    min_object_covered_ = 1;
    min_aspect_ratio_ = 0.75f;
    max_aspect_ratio_ = 1.33f;
    min_area_ = 0.1f;
    max_area_ = 1;
    overlap_thresh_ = 0.3f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomCropImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_object_covered = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_object_covered(&has_bits);
          min_object_covered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_aspect_ratio = 2 [default = 0.75];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_aspect_ratio(&has_bits);
          min_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_aspect_ratio = 3 [default = 1.33];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_max_aspect_ratio(&has_bits);
          max_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_area = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_area(&has_bits);
          min_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_area = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_area(&has_bits);
          max_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap_thresh = 6 [default = 0.3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_overlap_thresh(&has_bits);
          overlap_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float random_coef = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_random_coef(&has_bits);
          random_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool clip_boxes = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_clip_boxes(&has_bits);
          clip_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomCropImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomCropImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2 [default = 0.75];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3 [default = 1.33];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_aspect_ratio(), target);
  }

  // optional float min_area = 4 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_area(), target);
  }

  // optional float max_area = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_area(), target);
  }

  // optional float overlap_thresh = 6 [default = 0.3];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_overlap_thresh(), target);
  }

  // optional float random_coef = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_random_coef(), target);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_clip_boxes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomCropImage)
  return target;
}

size_t RandomCropImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomCropImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float random_coef = 7 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 8 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float min_object_covered = 1 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2 [default = 0.75];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3 [default = 1.33];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4 [default = 0.1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6 [default = 0.3];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomCropImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomCropImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomCropImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomCropImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomCropImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomCropImage)
    MergeFrom(*source);
  }
}

void RandomCropImage::MergeFrom(const RandomCropImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomCropImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000002u) {
      clip_boxes_ = from.clip_boxes_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000080u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomCropImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomCropImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomCropImage::CopyFrom(const RandomCropImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomCropImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomCropImage::IsInitialized() const {
  return true;
}

void RandomCropImage::InternalSwap(RandomCropImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomCropImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomPadImage::InitAsDefaultInstance() {
}
class RandomPadImage::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomPadImage>()._has_bits_);
  static void set_has_min_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RandomPadImage::RandomPadImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomPadImage)
}
RandomPadImage::RandomPadImage(const RandomPadImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pad_color_(from.pad_color_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_image_height_, &from.min_image_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_image_width_) -
    reinterpret_cast<char*>(&min_image_height_)) + sizeof(max_image_width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomPadImage)
}

void RandomPadImage::SharedCtor() {
  ::memset(&min_image_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_image_width_) -
      reinterpret_cast<char*>(&min_image_height_)) + sizeof(max_image_width_));
}

RandomPadImage::~RandomPadImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomPadImage)
  SharedDtor();
}

void RandomPadImage::SharedDtor() {
}

void RandomPadImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomPadImage& RandomPadImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomPadImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomPadImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_color_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&min_image_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_image_width_) -
        reinterpret_cast<char*>(&min_image_height_)) + sizeof(max_image_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomPadImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 min_image_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_image_height(&has_bits);
          min_image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_image_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_image_width(&has_bits);
          min_image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_image_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_image_height(&has_bits);
          max_image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_image_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_image_width(&has_bits);
          max_image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float pad_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pad_color(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pad_color(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomPadImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomPadImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_image_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_min_image_height(), target);
  }

  // optional int32 min_image_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_image_width(), target);
  }

  // optional int32 max_image_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_image_height(), target);
  }

  // optional int32 max_image_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_image_width(), target);
  }

  // repeated float pad_color = 5;
  for (int i = 0, n = this->_internal_pad_color_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pad_color(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomPadImage)
  return target;
}

size_t RandomPadImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomPadImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float pad_color = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pad_color_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pad_color_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 min_image_height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_image_height());
    }

    // optional int32 min_image_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_image_width());
    }

    // optional int32 max_image_height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_image_height());
    }

    // optional int32 max_image_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_image_width());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomPadImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomPadImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomPadImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomPadImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomPadImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomPadImage)
    MergeFrom(*source);
  }
}

void RandomPadImage::MergeFrom(const RandomPadImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomPadImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_color_.MergeFrom(from.pad_color_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      min_image_height_ = from.min_image_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_image_width_ = from.min_image_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_image_height_ = from.max_image_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_image_width_ = from.max_image_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomPadImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomPadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomPadImage::CopyFrom(const RandomPadImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomPadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomPadImage::IsInitialized() const {
  return true;
}

void RandomPadImage::InternalSwap(RandomPadImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pad_color_.InternalSwap(&other->pad_color_);
  swap(min_image_height_, other->min_image_height_);
  swap(min_image_width_, other->min_image_width_);
  swap(max_image_height_, other->max_image_height_);
  swap(max_image_width_, other->max_image_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomPadImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomCropPadImage::InitAsDefaultInstance() {
}
class RandomCropPadImage::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomCropPadImage>()._has_bits_);
  static void set_has_min_object_covered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_area(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_area(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_overlap_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clip_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_random_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomCropPadImage::RandomCropPadImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomCropPadImage)
}
RandomCropPadImage::RandomCropPadImage(const RandomCropPadImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      min_padded_size_ratio_(from.min_padded_size_ratio_),
      max_padded_size_ratio_(from.max_padded_size_ratio_),
      pad_color_(from.pad_color_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&random_coef_, &from.random_coef_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_thresh_) -
    reinterpret_cast<char*>(&random_coef_)) + sizeof(overlap_thresh_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomCropPadImage)
}

void RandomCropPadImage::SharedCtor() {
  random_coef_ = 0;
  clip_boxes_ = true;
  min_object_covered_ = 1;
  min_aspect_ratio_ = 0.75f;
  max_aspect_ratio_ = 1.33f;
  min_area_ = 0.1f;
  max_area_ = 1;
  overlap_thresh_ = 0.3f;
}

RandomCropPadImage::~RandomCropPadImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomCropPadImage)
  SharedDtor();
}

void RandomCropPadImage::SharedDtor() {
}

void RandomCropPadImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomCropPadImage& RandomCropPadImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomCropPadImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomCropPadImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomCropPadImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_padded_size_ratio_.Clear();
  max_padded_size_ratio_.Clear();
  pad_color_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    random_coef_ = 0;
    clip_boxes_ = true;
    min_object_covered_ = 1;
    min_aspect_ratio_ = 0.75f;
    max_aspect_ratio_ = 1.33f;
    min_area_ = 0.1f;
    max_area_ = 1;
    overlap_thresh_ = 0.3f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomCropPadImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_object_covered = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_object_covered(&has_bits);
          min_object_covered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_aspect_ratio = 2 [default = 0.75];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_aspect_ratio(&has_bits);
          min_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_aspect_ratio = 3 [default = 1.33];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_max_aspect_ratio(&has_bits);
          max_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_area = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_area(&has_bits);
          min_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_area = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_area(&has_bits);
          max_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap_thresh = 6 [default = 0.3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_overlap_thresh(&has_bits);
          overlap_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float random_coef = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_random_coef(&has_bits);
          random_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float min_padded_size_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min_padded_size_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min_padded_size_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_padded_size_ratio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_padded_size_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_padded_size_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float pad_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pad_color(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<85>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pad_color(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clip_boxes = 11 [default = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_clip_boxes(&has_bits);
          clip_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomCropPadImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomCropPadImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2 [default = 0.75];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3 [default = 1.33];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_aspect_ratio(), target);
  }

  // optional float min_area = 4 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_area(), target);
  }

  // optional float max_area = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_area(), target);
  }

  // optional float overlap_thresh = 6 [default = 0.3];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_overlap_thresh(), target);
  }

  // optional float random_coef = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_random_coef(), target);
  }

  // repeated float min_padded_size_ratio = 8;
  for (int i = 0, n = this->_internal_min_padded_size_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_min_padded_size_ratio(i), target);
  }

  // repeated float max_padded_size_ratio = 9;
  for (int i = 0, n = this->_internal_max_padded_size_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_max_padded_size_ratio(i), target);
  }

  // repeated float pad_color = 10;
  for (int i = 0, n = this->_internal_pad_color_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_pad_color(i), target);
  }

  // optional bool clip_boxes = 11 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_clip_boxes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomCropPadImage)
  return target;
}

size_t RandomCropPadImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomCropPadImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float min_padded_size_ratio = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_min_padded_size_ratio_size());
    total_size += data_size;
  }

  // repeated float max_padded_size_ratio = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_padded_size_ratio_size());
    total_size += data_size;
  }

  // repeated float pad_color = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pad_color_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pad_color_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float random_coef = 7 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 11 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float min_object_covered = 1 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2 [default = 0.75];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3 [default = 1.33];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4 [default = 0.1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6 [default = 0.3];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomCropPadImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomCropPadImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomCropPadImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomCropPadImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomCropPadImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomCropPadImage)
    MergeFrom(*source);
  }
}

void RandomCropPadImage::MergeFrom(const RandomCropPadImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomCropPadImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_padded_size_ratio_.MergeFrom(from.min_padded_size_ratio_);
  max_padded_size_ratio_.MergeFrom(from.max_padded_size_ratio_);
  pad_color_.MergeFrom(from.pad_color_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000002u) {
      clip_boxes_ = from.clip_boxes_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000080u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomCropPadImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomCropPadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomCropPadImage::CopyFrom(const RandomCropPadImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomCropPadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomCropPadImage::IsInitialized() const {
  return true;
}

void RandomCropPadImage::InternalSwap(RandomCropPadImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  min_padded_size_ratio_.InternalSwap(&other->min_padded_size_ratio_);
  max_padded_size_ratio_.InternalSwap(&other->max_padded_size_ratio_);
  pad_color_.InternalSwap(&other->pad_color_);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomCropPadImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomCropToAspectRatio::InitAsDefaultInstance() {
}
class RandomCropToAspectRatio::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomCropToAspectRatio>()._has_bits_);
  static void set_has_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overlap_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clip_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomCropToAspectRatio::RandomCropToAspectRatio()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomCropToAspectRatio)
}
RandomCropToAspectRatio::RandomCropToAspectRatio(const RandomCropToAspectRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clip_boxes_, &from.clip_boxes_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_thresh_) -
    reinterpret_cast<char*>(&clip_boxes_)) + sizeof(overlap_thresh_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomCropToAspectRatio)
}

void RandomCropToAspectRatio::SharedCtor() {
  clip_boxes_ = true;
  aspect_ratio_ = 1;
  overlap_thresh_ = 0.3f;
}

RandomCropToAspectRatio::~RandomCropToAspectRatio() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomCropToAspectRatio)
  SharedDtor();
}

void RandomCropToAspectRatio::SharedDtor() {
}

void RandomCropToAspectRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomCropToAspectRatio& RandomCropToAspectRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomCropToAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomCropToAspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomCropToAspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    clip_boxes_ = true;
    aspect_ratio_ = 1;
    overlap_thresh_ = 0.3f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomCropToAspectRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float aspect_ratio = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_aspect_ratio(&has_bits);
          aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap_thresh = 2 [default = 0.3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_overlap_thresh(&has_bits);
          overlap_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool clip_boxes = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clip_boxes(&has_bits);
          clip_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomCropToAspectRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomCropToAspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_aspect_ratio(), target);
  }

  // optional float overlap_thresh = 2 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_overlap_thresh(), target);
  }

  // optional bool clip_boxes = 3 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clip_boxes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomCropToAspectRatio)
  return target;
}

size_t RandomCropToAspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomCropToAspectRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool clip_boxes = 3 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float aspect_ratio = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 2 [default = 0.3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomCropToAspectRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomCropToAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomCropToAspectRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomCropToAspectRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomCropToAspectRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomCropToAspectRatio)
    MergeFrom(*source);
  }
}

void RandomCropToAspectRatio::MergeFrom(const RandomCropToAspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomCropToAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      clip_boxes_ = from.clip_boxes_;
    }
    if (cached_has_bits & 0x00000002u) {
      aspect_ratio_ = from.aspect_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomCropToAspectRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomCropToAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomCropToAspectRatio::CopyFrom(const RandomCropToAspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomCropToAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomCropToAspectRatio::IsInitialized() const {
  return true;
}

void RandomCropToAspectRatio::InternalSwap(RandomCropToAspectRatio* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clip_boxes_, other->clip_boxes_);
  swap(aspect_ratio_, other->aspect_ratio_);
  swap(overlap_thresh_, other->overlap_thresh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomCropToAspectRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomBlackPatches::InitAsDefaultInstance() {
}
class RandomBlackPatches::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomBlackPatches>()._has_bits_);
  static void set_has_max_black_patches(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size_to_image_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomBlackPatches::RandomBlackPatches()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomBlackPatches)
}
RandomBlackPatches::RandomBlackPatches(const RandomBlackPatches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_to_image_ratio_, &from.size_to_image_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&size_to_image_ratio_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomBlackPatches)
}

void RandomBlackPatches::SharedCtor() {
  size_to_image_ratio_ = 0.1f;
  max_black_patches_ = 10;
  probability_ = 0.5f;
}

RandomBlackPatches::~RandomBlackPatches() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomBlackPatches)
  SharedDtor();
}

void RandomBlackPatches::SharedDtor() {
}

void RandomBlackPatches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomBlackPatches& RandomBlackPatches::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomBlackPatches_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomBlackPatches::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomBlackPatches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    size_to_image_ratio_ = 0.1f;
    max_black_patches_ = 10;
    probability_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomBlackPatches::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 max_black_patches = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_black_patches(&has_bits);
          max_black_patches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float probability = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float size_to_image_ratio = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_size_to_image_ratio(&has_bits);
          size_to_image_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomBlackPatches::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomBlackPatches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_black_patches = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_black_patches(), target);
  }

  // optional float probability = 2 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_probability(), target);
  }

  // optional float size_to_image_ratio = 3 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_size_to_image_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomBlackPatches)
  return target;
}

size_t RandomBlackPatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomBlackPatches)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float size_to_image_ratio = 3 [default = 0.1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 max_black_patches = 1 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_black_patches());
    }

    // optional float probability = 2 [default = 0.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomBlackPatches::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomBlackPatches)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomBlackPatches* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomBlackPatches>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomBlackPatches)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomBlackPatches)
    MergeFrom(*source);
  }
}

void RandomBlackPatches::MergeFrom(const RandomBlackPatches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomBlackPatches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      size_to_image_ratio_ = from.size_to_image_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_black_patches_ = from.max_black_patches_;
    }
    if (cached_has_bits & 0x00000004u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomBlackPatches::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomBlackPatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomBlackPatches::CopyFrom(const RandomBlackPatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomBlackPatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomBlackPatches::IsInitialized() const {
  return true;
}

void RandomBlackPatches::InternalSwap(RandomBlackPatches* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_to_image_ratio_, other->size_to_image_ratio_);
  swap(max_black_patches_, other->max_black_patches_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomBlackPatches::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomResizeMethod::InitAsDefaultInstance() {
}
class RandomResizeMethod::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomResizeMethod>()._has_bits_);
  static void set_has_target_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RandomResizeMethod::RandomResizeMethod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomResizeMethod)
}
RandomResizeMethod::RandomResizeMethod(const RandomResizeMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_height_, &from.target_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_width_) -
    reinterpret_cast<char*>(&target_height_)) + sizeof(target_width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomResizeMethod)
}

void RandomResizeMethod::SharedCtor() {
  ::memset(&target_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_width_) -
      reinterpret_cast<char*>(&target_height_)) + sizeof(target_width_));
}

RandomResizeMethod::~RandomResizeMethod() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomResizeMethod)
  SharedDtor();
}

void RandomResizeMethod::SharedDtor() {
}

void RandomResizeMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomResizeMethod& RandomResizeMethod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomResizeMethod_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RandomResizeMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomResizeMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_width_) -
        reinterpret_cast<char*>(&target_height_)) + sizeof(target_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RandomResizeMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float target_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_target_height(&has_bits);
          target_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float target_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_target_width(&has_bits);
          target_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomResizeMethod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomResizeMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float target_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_target_height(), target);
  }

  // optional float target_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_target_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomResizeMethod)
  return target;
}

size_t RandomResizeMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomResizeMethod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float target_height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float target_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomResizeMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomResizeMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomResizeMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomResizeMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomResizeMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomResizeMethod)
    MergeFrom(*source);
  }
}

void RandomResizeMethod::MergeFrom(const RandomResizeMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomResizeMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_height_ = from.target_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_width_ = from.target_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomResizeMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomResizeMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomResizeMethod::CopyFrom(const RandomResizeMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomResizeMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomResizeMethod::IsInitialized() const {
  return true;
}

void RandomResizeMethod::InternalSwap(RandomResizeMethod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_height_, other->target_height_);
  swap(target_width_, other->target_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomResizeMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RGBtoGray::InitAsDefaultInstance() {
}
class RGBtoGray::_Internal {
 public:
  using HasBits = decltype(std::declval<RGBtoGray>()._has_bits_);
};

RGBtoGray::RGBtoGray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RGBtoGray)
}
RGBtoGray::RGBtoGray(const RGBtoGray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RGBtoGray)
}

void RGBtoGray::SharedCtor() {
}

RGBtoGray::~RGBtoGray() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RGBtoGray)
  SharedDtor();
}

void RGBtoGray::SharedDtor() {
}

void RGBtoGray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RGBtoGray& RGBtoGray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RGBtoGray_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void RGBtoGray::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RGBtoGray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RGBtoGray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RGBtoGray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RGBtoGray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RGBtoGray)
  return target;
}

size_t RGBtoGray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RGBtoGray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RGBtoGray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RGBtoGray)
  GOOGLE_DCHECK_NE(&from, this);
  const RGBtoGray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RGBtoGray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RGBtoGray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RGBtoGray)
    MergeFrom(*source);
  }
}

void RGBtoGray::MergeFrom(const RGBtoGray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RGBtoGray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RGBtoGray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RGBtoGray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGBtoGray::CopyFrom(const RGBtoGray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RGBtoGray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGBtoGray::IsInitialized() const {
  return true;
}

void RGBtoGray::InternalSwap(RGBtoGray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RGBtoGray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScaleBoxesToPixelCoordinates::InitAsDefaultInstance() {
}
class ScaleBoxesToPixelCoordinates::_Internal {
 public:
  using HasBits = decltype(std::declval<ScaleBoxesToPixelCoordinates>()._has_bits_);
};

ScaleBoxesToPixelCoordinates::ScaleBoxesToPixelCoordinates()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ScaleBoxesToPixelCoordinates)
}
ScaleBoxesToPixelCoordinates::ScaleBoxesToPixelCoordinates(const ScaleBoxesToPixelCoordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ScaleBoxesToPixelCoordinates)
}

void ScaleBoxesToPixelCoordinates::SharedCtor() {
}

ScaleBoxesToPixelCoordinates::~ScaleBoxesToPixelCoordinates() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ScaleBoxesToPixelCoordinates)
  SharedDtor();
}

void ScaleBoxesToPixelCoordinates::SharedDtor() {
}

void ScaleBoxesToPixelCoordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScaleBoxesToPixelCoordinates& ScaleBoxesToPixelCoordinates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScaleBoxesToPixelCoordinates_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void ScaleBoxesToPixelCoordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScaleBoxesToPixelCoordinates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaleBoxesToPixelCoordinates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ScaleBoxesToPixelCoordinates)
  return target;
}

size_t ScaleBoxesToPixelCoordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaleBoxesToPixelCoordinates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaleBoxesToPixelCoordinates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaleBoxesToPixelCoordinates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ScaleBoxesToPixelCoordinates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ScaleBoxesToPixelCoordinates)
    MergeFrom(*source);
  }
}

void ScaleBoxesToPixelCoordinates::MergeFrom(const ScaleBoxesToPixelCoordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScaleBoxesToPixelCoordinates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleBoxesToPixelCoordinates::CopyFrom(const ScaleBoxesToPixelCoordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleBoxesToPixelCoordinates::IsInitialized() const {
  return true;
}

void ScaleBoxesToPixelCoordinates::InternalSwap(ScaleBoxesToPixelCoordinates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaleBoxesToPixelCoordinates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResizeImage::InitAsDefaultInstance() {
}
class ResizeImage::_Internal {
 public:
  using HasBits = decltype(std::declval<ResizeImage>()._has_bits_);
  static void set_has_new_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ResizeImage::ResizeImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ResizeImage)
}
ResizeImage::ResizeImage(const ResizeImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_height_, &from.new_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&new_height_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ResizeImage)
}

void ResizeImage::SharedCtor() {
  ::memset(&new_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_width_) -
      reinterpret_cast<char*>(&new_height_)) + sizeof(new_width_));
  method_ = 3;
}

ResizeImage::~ResizeImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ResizeImage)
  SharedDtor();
}

void ResizeImage::SharedDtor() {
}

void ResizeImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResizeImage& ResizeImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResizeImage_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void ResizeImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ResizeImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&new_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_width_) -
        reinterpret_cast<char*>(&new_height_)) + sizeof(new_width_));
    method_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ResizeImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 new_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_new_height(&has_bits);
          new_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_width(&has_bits);
          new_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ResizeImage.Method method = 3 [default = BILINEAR];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::ResizeImage_Method_IsValid(val))) {
            _internal_set_method(static_cast<::object_detection::protos::ResizeImage_Method>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResizeImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ResizeImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 new_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_new_height(), target);
  }

  // optional int32 new_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_width(), target);
  }

  // optional .object_detection.protos.ResizeImage.Method method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ResizeImage)
  return target;
}

size_t ResizeImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ResizeImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 new_height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_height());
    }

    // optional int32 new_width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_width());
    }

    // optional .object_detection.protos.ResizeImage.Method method = 3 [default = BILINEAR];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResizeImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ResizeImage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResizeImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ResizeImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ResizeImage)
    MergeFrom(*source);
  }
}

void ResizeImage::MergeFrom(const ResizeImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ResizeImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      new_height_ = from.new_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_width_ = from.new_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResizeImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ResizeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeImage::CopyFrom(const ResizeImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ResizeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeImage::IsInitialized() const {
  return true;
}

void ResizeImage::InternalSwap(ResizeImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_height_, other->new_height_);
  swap(new_width_, other->new_width_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizeImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubtractChannelMean::InitAsDefaultInstance() {
}
class SubtractChannelMean::_Internal {
 public:
  using HasBits = decltype(std::declval<SubtractChannelMean>()._has_bits_);
};

SubtractChannelMean::SubtractChannelMean()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SubtractChannelMean)
}
SubtractChannelMean::SubtractChannelMean(const SubtractChannelMean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      means_(from.means_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SubtractChannelMean)
}

void SubtractChannelMean::SharedCtor() {
}

SubtractChannelMean::~SubtractChannelMean() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SubtractChannelMean)
  SharedDtor();
}

void SubtractChannelMean::SharedDtor() {
}

void SubtractChannelMean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubtractChannelMean& SubtractChannelMean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubtractChannelMean_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SubtractChannelMean::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SubtractChannelMean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  means_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubtractChannelMean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float means = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_means(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_means(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubtractChannelMean::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SubtractChannelMean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float means = 1;
  for (int i = 0, n = this->_internal_means_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_means(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SubtractChannelMean)
  return target;
}

size_t SubtractChannelMean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SubtractChannelMean)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float means = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_means_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_means_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubtractChannelMean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SubtractChannelMean)
  GOOGLE_DCHECK_NE(&from, this);
  const SubtractChannelMean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubtractChannelMean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SubtractChannelMean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SubtractChannelMean)
    MergeFrom(*source);
  }
}

void SubtractChannelMean::MergeFrom(const SubtractChannelMean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SubtractChannelMean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  means_.MergeFrom(from.means_);
}

void SubtractChannelMean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SubtractChannelMean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubtractChannelMean::CopyFrom(const SubtractChannelMean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SubtractChannelMean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubtractChannelMean::IsInitialized() const {
  return true;
}

void SubtractChannelMean::InternalSwap(SubtractChannelMean* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  means_.InternalSwap(&other->means_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubtractChannelMean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCropOperation::InitAsDefaultInstance() {
}
class SSDRandomCropOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDRandomCropOperation>()._has_bits_);
  static void set_has_min_object_covered(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_area(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_overlap_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_clip_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_random_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SSDRandomCropOperation::SSDRandomCropOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropOperation)
}
SSDRandomCropOperation::SSDRandomCropOperation(const SSDRandomCropOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_boxes_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(clip_boxes_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropOperation)
}

void SSDRandomCropOperation::SharedCtor() {
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_coef_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
  clip_boxes_ = true;
}

SSDRandomCropOperation::~SSDRandomCropOperation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropOperation)
  SharedDtor();
}

void SSDRandomCropOperation::SharedDtor() {
}

void SSDRandomCropOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCropOperation& SSDRandomCropOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCropOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCropOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&min_object_covered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_coef_) -
        reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
    clip_boxes_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SSDRandomCropOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_object_covered = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_object_covered(&has_bits);
          min_object_covered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_aspect_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_aspect_ratio(&has_bits);
          min_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_aspect_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_max_aspect_ratio(&has_bits);
          max_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_area(&has_bits);
          min_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_area(&has_bits);
          max_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap_thresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_overlap_thresh(&has_bits);
          overlap_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float random_coef = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_random_coef(&has_bits);
          random_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool clip_boxes = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_clip_boxes(&has_bits);
          clip_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCropOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_aspect_ratio(), target);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_area(), target);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_area(), target);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_overlap_thresh(), target);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_random_coef(), target);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_clip_boxes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropOperation)
  return target;
}

size_t SSDRandomCropOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float min_object_covered = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float random_coef = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 8 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCropOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCropOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropOperation::MergeFrom(const SSDRandomCropOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    if (cached_has_bits & 0x00000040u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000080u) {
      clip_boxes_ = from.clip_boxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDRandomCropOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropOperation::CopyFrom(const SSDRandomCropOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropOperation::InternalSwap(SSDRandomCropOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCropOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCrop::InitAsDefaultInstance() {
}
class SSDRandomCrop::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDRandomCrop>()._has_bits_);
};

SSDRandomCrop::SSDRandomCrop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCrop)
}
SSDRandomCrop::SSDRandomCrop(const SSDRandomCrop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCrop)
}

void SSDRandomCrop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSDRandomCrop_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
}

SSDRandomCrop::~SSDRandomCrop() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCrop)
  SharedDtor();
}

void SSDRandomCrop::SharedDtor() {
}

void SSDRandomCrop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCrop& SSDRandomCrop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCrop_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCrop::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCrop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SSDRandomCrop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .object_detection.protos.SSDRandomCropOperation operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCrop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCrop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCrop)
  return target;
}

size_t SSDRandomCrop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCrop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropOperation operations = 1;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCrop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCrop)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCrop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCrop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCrop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCrop)
    MergeFrom(*source);
  }
}

void SSDRandomCrop::MergeFrom(const SSDRandomCrop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCrop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
}

void SSDRandomCrop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCrop::CopyFrom(const SSDRandomCrop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCrop::IsInitialized() const {
  return true;
}

void SSDRandomCrop::InternalSwap(SSDRandomCrop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operations_.InternalSwap(&other->operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCrop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCropPadOperation::InitAsDefaultInstance() {
}
class SSDRandomCropPadOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDRandomCropPadOperation>()._has_bits_);
  static void set_has_min_object_covered(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_area(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_overlap_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_clip_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_random_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pad_color_r(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pad_color_g(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pad_color_b(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

SSDRandomCropPadOperation::SSDRandomCropPadOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropPadOperation)
}
SSDRandomCropPadOperation::SSDRandomCropPadOperation(const SSDRandomCropPadOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      min_padded_size_ratio_(from.min_padded_size_ratio_),
      max_padded_size_ratio_(from.max_padded_size_ratio_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_boxes_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(clip_boxes_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropPadOperation)
}

void SSDRandomCropPadOperation::SharedCtor() {
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pad_color_b_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(pad_color_b_));
  clip_boxes_ = true;
}

SSDRandomCropPadOperation::~SSDRandomCropPadOperation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropPadOperation)
  SharedDtor();
}

void SSDRandomCropPadOperation::SharedDtor() {
}

void SSDRandomCropPadOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCropPadOperation& SSDRandomCropPadOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCropPadOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCropPadOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropPadOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_padded_size_ratio_.Clear();
  max_padded_size_ratio_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&min_object_covered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pad_color_r_) -
        reinterpret_cast<char*>(&min_object_covered_)) + sizeof(pad_color_r_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&pad_color_g_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pad_color_b_) -
        reinterpret_cast<char*>(&pad_color_g_)) + sizeof(pad_color_b_));
    clip_boxes_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SSDRandomCropPadOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_object_covered = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_object_covered(&has_bits);
          min_object_covered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_aspect_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_aspect_ratio(&has_bits);
          min_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_aspect_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_max_aspect_ratio(&has_bits);
          max_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_area(&has_bits);
          min_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_area(&has_bits);
          max_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap_thresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_overlap_thresh(&has_bits);
          overlap_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float random_coef = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_random_coef(&has_bits);
          random_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float min_padded_size_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min_padded_size_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min_padded_size_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_padded_size_ratio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_padded_size_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_padded_size_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pad_color_r = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_pad_color_r(&has_bits);
          pad_color_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pad_color_g = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_pad_color_g(&has_bits);
          pad_color_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pad_color_b = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_pad_color_b(&has_bits);
          pad_color_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool clip_boxes = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_clip_boxes(&has_bits);
          clip_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCropPadOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropPadOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_aspect_ratio(), target);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_area(), target);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_area(), target);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_overlap_thresh(), target);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_random_coef(), target);
  }

  // repeated float min_padded_size_ratio = 8;
  for (int i = 0, n = this->_internal_min_padded_size_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_min_padded_size_ratio(i), target);
  }

  // repeated float max_padded_size_ratio = 9;
  for (int i = 0, n = this->_internal_max_padded_size_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_max_padded_size_ratio(i), target);
  }

  // optional float pad_color_r = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_pad_color_r(), target);
  }

  // optional float pad_color_g = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_pad_color_g(), target);
  }

  // optional float pad_color_b = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_pad_color_b(), target);
  }

  // optional bool clip_boxes = 13 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_clip_boxes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropPadOperation)
  return target;
}

size_t SSDRandomCropPadOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropPadOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float min_padded_size_ratio = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_min_padded_size_ratio_size());
    total_size += data_size;
  }

  // repeated float max_padded_size_ratio = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_padded_size_ratio_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float min_object_covered = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float random_coef = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float pad_color_r = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float pad_color_g = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float pad_color_b = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 13 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCropPadOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropPadOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropPadOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCropPadOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropPadOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropPadOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropPadOperation::MergeFrom(const SSDRandomCropPadOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropPadOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_padded_size_ratio_.MergeFrom(from.min_padded_size_ratio_);
  max_padded_size_ratio_.MergeFrom(from.max_padded_size_ratio_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    if (cached_has_bits & 0x00000040u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000080u) {
      pad_color_r_ = from.pad_color_r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      pad_color_g_ = from.pad_color_g_;
    }
    if (cached_has_bits & 0x00000200u) {
      pad_color_b_ = from.pad_color_b_;
    }
    if (cached_has_bits & 0x00000400u) {
      clip_boxes_ = from.clip_boxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDRandomCropPadOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropPadOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropPadOperation::CopyFrom(const SSDRandomCropPadOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropPadOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropPadOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropPadOperation::InternalSwap(SSDRandomCropPadOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  min_padded_size_ratio_.InternalSwap(&other->min_padded_size_ratio_);
  max_padded_size_ratio_.InternalSwap(&other->max_padded_size_ratio_);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(random_coef_, other->random_coef_);
  swap(pad_color_r_, other->pad_color_r_);
  swap(pad_color_g_, other->pad_color_g_);
  swap(pad_color_b_, other->pad_color_b_);
  swap(clip_boxes_, other->clip_boxes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCropPadOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCropPad::InitAsDefaultInstance() {
}
class SSDRandomCropPad::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDRandomCropPad>()._has_bits_);
};

SSDRandomCropPad::SSDRandomCropPad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropPad)
}
SSDRandomCropPad::SSDRandomCropPad(const SSDRandomCropPad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropPad)
}

void SSDRandomCropPad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSDRandomCropPad_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
}

SSDRandomCropPad::~SSDRandomCropPad() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropPad)
  SharedDtor();
}

void SSDRandomCropPad::SharedDtor() {
}

void SSDRandomCropPad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCropPad& SSDRandomCropPad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCropPad_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCropPad::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropPad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SSDRandomCropPad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .object_detection.protos.SSDRandomCropPadOperation operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCropPad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropPad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropPadOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropPad)
  return target;
}

size_t SSDRandomCropPad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropPad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropPadOperation operations = 1;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCropPad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropPad)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropPad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCropPad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropPad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropPad)
    MergeFrom(*source);
  }
}

void SSDRandomCropPad::MergeFrom(const SSDRandomCropPad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropPad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
}

void SSDRandomCropPad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropPad::CopyFrom(const SSDRandomCropPad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropPad::IsInitialized() const {
  return true;
}

void SSDRandomCropPad::InternalSwap(SSDRandomCropPad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operations_.InternalSwap(&other->operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCropPad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCropFixedAspectRatioOperation::InitAsDefaultInstance() {
}
class SSDRandomCropFixedAspectRatioOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDRandomCropFixedAspectRatioOperation>()._has_bits_);
  static void set_has_min_object_covered(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_area(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_area(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_overlap_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clip_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_random_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SSDRandomCropFixedAspectRatioOperation::SSDRandomCropFixedAspectRatioOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
}
SSDRandomCropFixedAspectRatioOperation::SSDRandomCropFixedAspectRatioOperation(const SSDRandomCropFixedAspectRatioOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_boxes_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(clip_boxes_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
}

void SSDRandomCropFixedAspectRatioOperation::SharedCtor() {
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_coef_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
  clip_boxes_ = true;
}

SSDRandomCropFixedAspectRatioOperation::~SSDRandomCropFixedAspectRatioOperation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  SharedDtor();
}

void SSDRandomCropFixedAspectRatioOperation::SharedDtor() {
}

void SSDRandomCropFixedAspectRatioOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCropFixedAspectRatioOperation& SSDRandomCropFixedAspectRatioOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCropFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCropFixedAspectRatioOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&min_object_covered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_coef_) -
        reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
    clip_boxes_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SSDRandomCropFixedAspectRatioOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_object_covered = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_object_covered(&has_bits);
          min_object_covered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_area(&has_bits);
          min_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_area(&has_bits);
          max_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap_thresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_overlap_thresh(&has_bits);
          overlap_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float random_coef = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_random_coef(&has_bits);
          random_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool clip_boxes = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_clip_boxes(&has_bits);
          clip_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCropFixedAspectRatioOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_object_covered(), target);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_area(), target);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_area(), target);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_overlap_thresh(), target);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_random_coef(), target);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_clip_boxes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  return target;
}

size_t SSDRandomCropFixedAspectRatioOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float min_object_covered = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float random_coef = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 8 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCropFixedAspectRatioOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropFixedAspectRatioOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCropFixedAspectRatioOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropFixedAspectRatioOperation::MergeFrom(const SSDRandomCropFixedAspectRatioOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000008u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    if (cached_has_bits & 0x00000010u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000020u) {
      clip_boxes_ = from.clip_boxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDRandomCropFixedAspectRatioOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropFixedAspectRatioOperation::CopyFrom(const SSDRandomCropFixedAspectRatioOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropFixedAspectRatioOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropFixedAspectRatioOperation::InternalSwap(SSDRandomCropFixedAspectRatioOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCropFixedAspectRatioOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCropFixedAspectRatio::InitAsDefaultInstance() {
}
class SSDRandomCropFixedAspectRatio::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDRandomCropFixedAspectRatio>()._has_bits_);
  static void set_has_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SSDRandomCropFixedAspectRatio::SSDRandomCropFixedAspectRatio()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropFixedAspectRatio)
}
SSDRandomCropFixedAspectRatio::SSDRandomCropFixedAspectRatio(const SSDRandomCropFixedAspectRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aspect_ratio_ = from.aspect_ratio_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropFixedAspectRatio)
}

void SSDRandomCropFixedAspectRatio::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSDRandomCropFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  aspect_ratio_ = 1;
}

SSDRandomCropFixedAspectRatio::~SSDRandomCropFixedAspectRatio() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropFixedAspectRatio)
  SharedDtor();
}

void SSDRandomCropFixedAspectRatio::SharedDtor() {
}

void SSDRandomCropFixedAspectRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCropFixedAspectRatio& SSDRandomCropFixedAspectRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCropFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCropFixedAspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  aspect_ratio_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SSDRandomCropFixedAspectRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .object_detection.protos.SSDRandomCropFixedAspectRatioOperation operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float aspect_ratio = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_aspect_ratio(&has_bits);
          aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCropFixedAspectRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropFixedAspectRatioOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_operations(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_aspect_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropFixedAspectRatio)
  return target;
}

size_t SSDRandomCropFixedAspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropFixedAspectRatioOperation operations = 1;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float aspect_ratio = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCropFixedAspectRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropFixedAspectRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCropFixedAspectRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropFixedAspectRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropFixedAspectRatio)
    MergeFrom(*source);
  }
}

void SSDRandomCropFixedAspectRatio::MergeFrom(const SSDRandomCropFixedAspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (from._internal_has_aspect_ratio()) {
    _internal_set_aspect_ratio(from._internal_aspect_ratio());
  }
}

void SSDRandomCropFixedAspectRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropFixedAspectRatio::CopyFrom(const SSDRandomCropFixedAspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropFixedAspectRatio::IsInitialized() const {
  return true;
}

void SSDRandomCropFixedAspectRatio::InternalSwap(SSDRandomCropFixedAspectRatio* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operations_.InternalSwap(&other->operations_);
  swap(aspect_ratio_, other->aspect_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCropFixedAspectRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCropPadFixedAspectRatioOperation::InitAsDefaultInstance() {
}
class SSDRandomCropPadFixedAspectRatioOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDRandomCropPadFixedAspectRatioOperation>()._has_bits_);
  static void set_has_min_object_covered(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_area(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_overlap_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_clip_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_random_coef(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SSDRandomCropPadFixedAspectRatioOperation::SSDRandomCropPadFixedAspectRatioOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
}
SSDRandomCropPadFixedAspectRatioOperation::SSDRandomCropPadFixedAspectRatioOperation(const SSDRandomCropPadFixedAspectRatioOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_boxes_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(clip_boxes_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
}

void SSDRandomCropPadFixedAspectRatioOperation::SharedCtor() {
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_coef_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
  clip_boxes_ = true;
}

SSDRandomCropPadFixedAspectRatioOperation::~SSDRandomCropPadFixedAspectRatioOperation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  SharedDtor();
}

void SSDRandomCropPadFixedAspectRatioOperation::SharedDtor() {
}

void SSDRandomCropPadFixedAspectRatioOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCropPadFixedAspectRatioOperation& SSDRandomCropPadFixedAspectRatioOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCropPadFixedAspectRatioOperation_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCropPadFixedAspectRatioOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&min_object_covered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_coef_) -
        reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
    clip_boxes_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SSDRandomCropPadFixedAspectRatioOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_object_covered = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_object_covered(&has_bits);
          min_object_covered_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_aspect_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_aspect_ratio(&has_bits);
          min_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_aspect_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_max_aspect_ratio(&has_bits);
          max_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_area(&has_bits);
          min_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_area(&has_bits);
          max_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap_thresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_overlap_thresh(&has_bits);
          overlap_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float random_coef = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_random_coef(&has_bits);
          random_coef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool clip_boxes = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_clip_boxes(&has_bits);
          clip_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCropPadFixedAspectRatioOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_aspect_ratio(), target);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_area(), target);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_area(), target);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_overlap_thresh(), target);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_random_coef(), target);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_clip_boxes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  return target;
}

size_t SSDRandomCropPadFixedAspectRatioOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float min_object_covered = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float random_coef = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 8 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCropPadFixedAspectRatioOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropPadFixedAspectRatioOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCropPadFixedAspectRatioOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropPadFixedAspectRatioOperation::MergeFrom(const SSDRandomCropPadFixedAspectRatioOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    if (cached_has_bits & 0x00000040u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000080u) {
      clip_boxes_ = from.clip_boxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDRandomCropPadFixedAspectRatioOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropPadFixedAspectRatioOperation::CopyFrom(const SSDRandomCropPadFixedAspectRatioOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropPadFixedAspectRatioOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropPadFixedAspectRatioOperation::InternalSwap(SSDRandomCropPadFixedAspectRatioOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCropPadFixedAspectRatioOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSDRandomCropPadFixedAspectRatio::InitAsDefaultInstance() {
}
class SSDRandomCropPadFixedAspectRatio::_Internal {
 public:
  using HasBits = decltype(std::declval<SSDRandomCropPadFixedAspectRatio>()._has_bits_);
  static void set_has_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SSDRandomCropPadFixedAspectRatio::SSDRandomCropPadFixedAspectRatio()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
}
SSDRandomCropPadFixedAspectRatio::SSDRandomCropPadFixedAspectRatio(const SSDRandomCropPadFixedAspectRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      operations_(from.operations_),
      min_padded_size_ratio_(from.min_padded_size_ratio_),
      max_padded_size_ratio_(from.max_padded_size_ratio_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aspect_ratio_ = from.aspect_ratio_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
}

void SSDRandomCropPadFixedAspectRatio::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSDRandomCropPadFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  aspect_ratio_ = 1;
}

SSDRandomCropPadFixedAspectRatio::~SSDRandomCropPadFixedAspectRatio() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  SharedDtor();
}

void SSDRandomCropPadFixedAspectRatio::SharedDtor() {
}

void SSDRandomCropPadFixedAspectRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSDRandomCropPadFixedAspectRatio& SSDRandomCropPadFixedAspectRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSDRandomCropPadFixedAspectRatio_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void SSDRandomCropPadFixedAspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  min_padded_size_ratio_.Clear();
  max_padded_size_ratio_.Clear();
  aspect_ratio_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SSDRandomCropPadFixedAspectRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float aspect_ratio = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_aspect_ratio(&has_bits);
          aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float min_padded_size_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min_padded_size_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min_padded_size_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_padded_size_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_padded_size_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_padded_size_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSDRandomCropPadFixedAspectRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_operations(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_aspect_ratio(), target);
  }

  // repeated float min_padded_size_ratio = 3;
  for (int i = 0, n = this->_internal_min_padded_size_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_padded_size_ratio(i), target);
  }

  // repeated float max_padded_size_ratio = 4;
  for (int i = 0, n = this->_internal_max_padded_size_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_padded_size_ratio(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  return target;
}

size_t SSDRandomCropPadFixedAspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation operations = 1;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float min_padded_size_ratio = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_min_padded_size_ratio_size());
    total_size += data_size;
  }

  // repeated float max_padded_size_ratio = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_padded_size_ratio_size());
    total_size += data_size;
  }

  // optional float aspect_ratio = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSDRandomCropPadFixedAspectRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropPadFixedAspectRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSDRandomCropPadFixedAspectRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
    MergeFrom(*source);
  }
}

void SSDRandomCropPadFixedAspectRatio::MergeFrom(const SSDRandomCropPadFixedAspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  min_padded_size_ratio_.MergeFrom(from.min_padded_size_ratio_);
  max_padded_size_ratio_.MergeFrom(from.max_padded_size_ratio_);
  if (from._internal_has_aspect_ratio()) {
    _internal_set_aspect_ratio(from._internal_aspect_ratio());
  }
}

void SSDRandomCropPadFixedAspectRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropPadFixedAspectRatio::CopyFrom(const SSDRandomCropPadFixedAspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropPadFixedAspectRatio::IsInitialized() const {
  return true;
}

void SSDRandomCropPadFixedAspectRatio::InternalSwap(SSDRandomCropPadFixedAspectRatio* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operations_.InternalSwap(&other->operations_);
  min_padded_size_ratio_.InternalSwap(&other->min_padded_size_ratio_);
  max_padded_size_ratio_.InternalSwap(&other->max_padded_size_ratio_);
  swap(aspect_ratio_, other->aspect_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDRandomCropPadFixedAspectRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConvertClassLogitsToSoftmax::InitAsDefaultInstance() {
}
class ConvertClassLogitsToSoftmax::_Internal {
 public:
  using HasBits = decltype(std::declval<ConvertClassLogitsToSoftmax>()._has_bits_);
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConvertClassLogitsToSoftmax::ConvertClassLogitsToSoftmax()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConvertClassLogitsToSoftmax)
}
ConvertClassLogitsToSoftmax::ConvertClassLogitsToSoftmax(const ConvertClassLogitsToSoftmax& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConvertClassLogitsToSoftmax)
}

void ConvertClassLogitsToSoftmax::SharedCtor() {
  temperature_ = 1;
}

ConvertClassLogitsToSoftmax::~ConvertClassLogitsToSoftmax() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConvertClassLogitsToSoftmax)
  SharedDtor();
}

void ConvertClassLogitsToSoftmax::SharedDtor() {
}

void ConvertClassLogitsToSoftmax::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvertClassLogitsToSoftmax& ConvertClassLogitsToSoftmax::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvertClassLogitsToSoftmax_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void ConvertClassLogitsToSoftmax::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temperature_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConvertClassLogitsToSoftmax::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float temperature = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvertClassLogitsToSoftmax::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float temperature = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConvertClassLogitsToSoftmax)
  return target;
}

size_t ConvertClassLogitsToSoftmax::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float temperature = 1 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvertClassLogitsToSoftmax::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvertClassLogitsToSoftmax* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvertClassLogitsToSoftmax>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConvertClassLogitsToSoftmax)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConvertClassLogitsToSoftmax)
    MergeFrom(*source);
  }
}

void ConvertClassLogitsToSoftmax::MergeFrom(const ConvertClassLogitsToSoftmax& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_temperature()) {
    _internal_set_temperature(from._internal_temperature());
  }
}

void ConvertClassLogitsToSoftmax::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertClassLogitsToSoftmax::CopyFrom(const ConvertClassLogitsToSoftmax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertClassLogitsToSoftmax::IsInitialized() const {
  return true;
}

void ConvertClassLogitsToSoftmax::InternalSwap(ConvertClassLogitsToSoftmax* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(temperature_, other->temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvertClassLogitsToSoftmax::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::PreprocessingStep* Arena::CreateMaybeMessage< ::object_detection::protos::PreprocessingStep >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::PreprocessingStep >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::NormalizeImage* Arena::CreateMaybeMessage< ::object_detection::protos::NormalizeImage >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::NormalizeImage >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomHorizontalFlip* Arena::CreateMaybeMessage< ::object_detection::protos::RandomHorizontalFlip >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomHorizontalFlip >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomVerticalFlip* Arena::CreateMaybeMessage< ::object_detection::protos::RandomVerticalFlip >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomVerticalFlip >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomRotation90* Arena::CreateMaybeMessage< ::object_detection::protos::RandomRotation90 >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomRotation90 >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomPixelValueScale* Arena::CreateMaybeMessage< ::object_detection::protos::RandomPixelValueScale >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomPixelValueScale >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomImageScale* Arena::CreateMaybeMessage< ::object_detection::protos::RandomImageScale >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomImageScale >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomRGBtoGray* Arena::CreateMaybeMessage< ::object_detection::protos::RandomRGBtoGray >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomRGBtoGray >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomAdjustBrightness* Arena::CreateMaybeMessage< ::object_detection::protos::RandomAdjustBrightness >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomAdjustBrightness >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomAdjustContrast* Arena::CreateMaybeMessage< ::object_detection::protos::RandomAdjustContrast >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomAdjustContrast >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomAdjustHue* Arena::CreateMaybeMessage< ::object_detection::protos::RandomAdjustHue >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomAdjustHue >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomAdjustSaturation* Arena::CreateMaybeMessage< ::object_detection::protos::RandomAdjustSaturation >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomAdjustSaturation >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomDistortColor* Arena::CreateMaybeMessage< ::object_detection::protos::RandomDistortColor >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomDistortColor >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomJitterBoxes* Arena::CreateMaybeMessage< ::object_detection::protos::RandomJitterBoxes >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomJitterBoxes >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomCropImage* Arena::CreateMaybeMessage< ::object_detection::protos::RandomCropImage >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomCropImage >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomPadImage* Arena::CreateMaybeMessage< ::object_detection::protos::RandomPadImage >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomPadImage >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomCropPadImage* Arena::CreateMaybeMessage< ::object_detection::protos::RandomCropPadImage >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomCropPadImage >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomCropToAspectRatio* Arena::CreateMaybeMessage< ::object_detection::protos::RandomCropToAspectRatio >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomCropToAspectRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomBlackPatches* Arena::CreateMaybeMessage< ::object_detection::protos::RandomBlackPatches >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomBlackPatches >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RandomResizeMethod* Arena::CreateMaybeMessage< ::object_detection::protos::RandomResizeMethod >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RandomResizeMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::RGBtoGray* Arena::CreateMaybeMessage< ::object_detection::protos::RGBtoGray >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::RGBtoGray >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ScaleBoxesToPixelCoordinates* Arena::CreateMaybeMessage< ::object_detection::protos::ScaleBoxesToPixelCoordinates >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ScaleBoxesToPixelCoordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ResizeImage* Arena::CreateMaybeMessage< ::object_detection::protos::ResizeImage >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ResizeImage >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SubtractChannelMean* Arena::CreateMaybeMessage< ::object_detection::protos::SubtractChannelMean >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SubtractChannelMean >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SSDRandomCropOperation* Arena::CreateMaybeMessage< ::object_detection::protos::SSDRandomCropOperation >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SSDRandomCropOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SSDRandomCrop* Arena::CreateMaybeMessage< ::object_detection::protos::SSDRandomCrop >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SSDRandomCrop >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SSDRandomCropPadOperation* Arena::CreateMaybeMessage< ::object_detection::protos::SSDRandomCropPadOperation >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SSDRandomCropPadOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SSDRandomCropPad* Arena::CreateMaybeMessage< ::object_detection::protos::SSDRandomCropPad >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SSDRandomCropPad >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SSDRandomCropFixedAspectRatioOperation* Arena::CreateMaybeMessage< ::object_detection::protos::SSDRandomCropFixedAspectRatioOperation >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SSDRandomCropFixedAspectRatioOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SSDRandomCropFixedAspectRatio* Arena::CreateMaybeMessage< ::object_detection::protos::SSDRandomCropFixedAspectRatio >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SSDRandomCropFixedAspectRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation* Arena::CreateMaybeMessage< ::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SSDRandomCropPadFixedAspectRatio* Arena::CreateMaybeMessage< ::object_detection::protos::SSDRandomCropPadFixedAspectRatio >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SSDRandomCropPadFixedAspectRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ConvertClassLogitsToSoftmax* Arena::CreateMaybeMessage< ::object_detection::protos::ConvertClassLogitsToSoftmax >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ConvertClassLogitsToSoftmax >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
