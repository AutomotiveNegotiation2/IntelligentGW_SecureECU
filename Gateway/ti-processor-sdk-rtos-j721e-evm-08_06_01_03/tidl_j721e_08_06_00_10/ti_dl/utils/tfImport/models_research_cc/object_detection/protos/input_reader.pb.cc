// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/input_reader.proto

#include "object_detection/protos/input_reader.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2finput_5freader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2finput_5freader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFRecordInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto;
namespace object_detection {
namespace protos {
class InputReaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputReader> _instance;
  const ::object_detection::protos::TFRecordInputReader* tf_record_input_reader_;
  const ::object_detection::protos::ExternalInputReader* external_input_reader_;
} _InputReader_default_instance_;
class TFRecordInputReaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFRecordInputReader> _instance;
} _TFRecordInputReader_default_instance_;
class ExternalInputReaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExternalInputReader> _instance;
} _ExternalInputReader_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_ExternalInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_ExternalInputReader_default_instance_;
    new (ptr) ::object_detection::protos::ExternalInputReader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::ExternalInputReader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExternalInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto}, {}};

static void InitDefaultsscc_info_InputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_InputReader_default_instance_;
    new (ptr) ::object_detection::protos::InputReader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::InputReader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto}, {
      &scc_info_TFRecordInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base,
      &scc_info_ExternalInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base,}};

static void InitDefaultsscc_info_TFRecordInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_TFRecordInputReader_default_instance_;
    new (ptr) ::object_detection::protos::TFRecordInputReader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::TFRecordInputReader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFRecordInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TFRecordInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2finput_5freader_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_5fdetection_2fprotos_2finput_5freader_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2finput_5freader_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2finput_5freader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, name_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, label_map_path_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, shuffle_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, shuffle_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, filenames_shuffle_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, num_epochs_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, sample_1_of_n_examples_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, num_readers_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, num_parallel_batches_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, num_prefetch_batches_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, queue_capacity_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, min_after_dequeue_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, read_block_length_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, prefetch_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, num_parallel_map_calls_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, num_additional_channels_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, num_keypoints_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, max_number_of_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, load_instance_masks_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, mask_type_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, use_display_name_),
  offsetof(::object_detection::protos::InputReaderDefaultTypeInternal, tf_record_input_reader_),
  offsetof(::object_detection::protos::InputReaderDefaultTypeInternal, external_input_reader_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::InputReader, input_reader_),
  1,
  0,
  7,
  12,
  13,
  2,
  20,
  10,
  17,
  18,
  8,
  9,
  16,
  14,
  15,
  6,
  5,
  19,
  3,
  11,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TFRecordInputReader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TFRecordInputReader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TFRecordInputReader, input_path_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExternalInputReader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExternalInputReader, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::ExternalInputReader, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(::object_detection::protos::InputReader)},
  { 52, 58, sizeof(::object_detection::protos::TFRecordInputReader)},
  { 59, 64, sizeof(::object_detection::protos::ExternalInputReader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_InputReader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_TFRecordInputReader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_ExternalInputReader_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2finput_5freader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*object_detection/protos/input_reader.p"
  "roto\022\027object_detection.protos\"\203\007\n\013InputR"
  "eader\022\016\n\004name\030\027 \001(\t:\000\022\030\n\016label_map_path\030"
  "\001 \001(\t:\000\022\025\n\007shuffle\030\002 \001(\010:\004true\022!\n\023shuffl"
  "e_buffer_size\030\013 \001(\r:\0042048\022*\n\035filenames_s"
  "huffle_buffer_size\030\014 \001(\r:\003100\022\025\n\nnum_epo"
  "chs\030\005 \001(\r:\0010\022!\n\026sample_1_of_n_examples\030\026"
  " \001(\r:\0011\022\027\n\013num_readers\030\006 \001(\r:\00264\022\037\n\024num_"
  "parallel_batches\030\023 \001(\r:\0018\022\037\n\024num_prefetc"
  "h_batches\030\024 \001(\005:\0012\022 \n\016queue_capacity\030\003 \001"
  "(\r:\0042000B\002\030\001\022#\n\021min_after_dequeue\030\004 \001(\r:"
  "\0041000B\002\030\001\022\035\n\021read_block_length\030\017 \001(\r:\00232"
  "\022\036\n\rprefetch_size\030\r \001(\r:\003512B\002\030\001\022&\n\026num_"
  "parallel_map_calls\030\016 \001(\r:\00264B\002\030\001\022\"\n\027num_"
  "additional_channels\030\022 \001(\005:\0010\022\030\n\rnum_keyp"
  "oints\030\020 \001(\r:\0010\022 \n\023max_number_of_boxes\030\025 "
  "\001(\005:\003100\022\"\n\023load_instance_masks\030\007 \001(\010:\005f"
  "alse\022M\n\tmask_type\030\n \001(\0162).object_detecti"
  "on.protos.InstanceMaskType:\017NUMERICAL_MA"
  "SKS\022\037\n\020use_display_name\030\021 \001(\010:\005false\022N\n\026"
  "tf_record_input_reader\030\010 \001(\0132,.object_de"
  "tection.protos.TFRecordInputReaderH\000\022M\n\025"
  "external_input_reader\030\t \001(\0132,.object_det"
  "ection.protos.ExternalInputReaderH\000B\016\n\014i"
  "nput_reader\")\n\023TFRecordInputReader\022\022\n\nin"
  "put_path\030\001 \003(\t\"\034\n\023ExternalInputReader*\005\010"
  "\001\020\350\007*C\n\020InstanceMaskType\022\013\n\007DEFAULT\020\000\022\023\n"
  "\017NUMERICAL_MASKS\020\001\022\r\n\tPNG_MASKS\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto_sccs[3] = {
  &scc_info_ExternalInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base,
  &scc_info_InputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base,
  &scc_info_TFRecordInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2finput_5freader_2eproto, "object_detection/protos/input_reader.proto", 1113,
  &descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2finput_5freader_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2finput_5freader_2eproto, 3, file_level_enum_descriptors_object_5fdetection_2fprotos_2finput_5freader_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2finput_5freader_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2finput_5freader_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto), true);
namespace object_detection {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstanceMaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto);
  return file_level_enum_descriptors_object_5fdetection_2fprotos_2finput_5freader_2eproto[0];
}
bool InstanceMaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void InputReader::InitAsDefaultInstance() {
  ::object_detection::protos::_InputReader_default_instance_.tf_record_input_reader_ = const_cast< ::object_detection::protos::TFRecordInputReader*>(
      ::object_detection::protos::TFRecordInputReader::internal_default_instance());
  ::object_detection::protos::_InputReader_default_instance_.external_input_reader_ = const_cast< ::object_detection::protos::ExternalInputReader*>(
      ::object_detection::protos::ExternalInputReader::internal_default_instance());
}
class InputReader::_Internal {
 public:
  using HasBits = decltype(std::declval<InputReader>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label_map_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_shuffle_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_filenames_shuffle_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_num_epochs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sample_1_of_n_examples(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_num_readers(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_num_parallel_batches(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_num_prefetch_batches(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_queue_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_min_after_dequeue(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_read_block_length(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_prefetch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_num_parallel_map_calls(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_num_additional_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_keypoints(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_number_of_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_load_instance_masks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mask_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::object_detection::protos::TFRecordInputReader& tf_record_input_reader(const InputReader* msg);
  static const ::object_detection::protos::ExternalInputReader& external_input_reader(const InputReader* msg);
};

const ::object_detection::protos::TFRecordInputReader&
InputReader::_Internal::tf_record_input_reader(const InputReader* msg) {
  return *msg->input_reader_.tf_record_input_reader_;
}
const ::object_detection::protos::ExternalInputReader&
InputReader::_Internal::external_input_reader(const InputReader* msg) {
  return *msg->input_reader_.external_input_reader_;
}
void InputReader::set_allocated_tf_record_input_reader(::object_detection::protos::TFRecordInputReader* tf_record_input_reader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_input_reader();
  if (tf_record_input_reader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tf_record_input_reader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tf_record_input_reader, submessage_arena);
    }
    set_has_tf_record_input_reader();
    input_reader_.tf_record_input_reader_ = tf_record_input_reader;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.InputReader.tf_record_input_reader)
}
void InputReader::set_allocated_external_input_reader(::object_detection::protos::ExternalInputReader* external_input_reader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_input_reader();
  if (external_input_reader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      external_input_reader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_input_reader, submessage_arena);
    }
    set_has_external_input_reader();
    input_reader_.external_input_reader_ = external_input_reader;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.InputReader.external_input_reader)
}
InputReader::InputReader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.InputReader)
}
InputReader::InputReader(const InputReader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_map_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label_map_path()) {
    label_map_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_map_path_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&num_epochs_, &from.num_epochs_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_1_of_n_examples_) -
    reinterpret_cast<char*>(&num_epochs_)) + sizeof(sample_1_of_n_examples_));
  clear_has_input_reader();
  switch (from.input_reader_case()) {
    case kTfRecordInputReader: {
      _internal_mutable_tf_record_input_reader()->::object_detection::protos::TFRecordInputReader::MergeFrom(from._internal_tf_record_input_reader());
      break;
    }
    case kExternalInputReader: {
      _internal_mutable_external_input_reader()->::object_detection::protos::ExternalInputReader::MergeFrom(from._internal_external_input_reader());
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.InputReader)
}

void InputReader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base);
  label_map_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_epochs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_additional_channels_) -
      reinterpret_cast<char*>(&num_epochs_)) + sizeof(num_additional_channels_));
  shuffle_ = true;
  queue_capacity_ = 2000u;
  min_after_dequeue_ = 1000u;
  num_readers_ = 64u;
  mask_type_ = 1;
  shuffle_buffer_size_ = 2048u;
  filenames_shuffle_buffer_size_ = 100u;
  prefetch_size_ = 512u;
  num_parallel_map_calls_ = 64u;
  read_block_length_ = 32u;
  num_parallel_batches_ = 8u;
  num_prefetch_batches_ = 2;
  max_number_of_boxes_ = 100;
  sample_1_of_n_examples_ = 1u;
  clear_has_input_reader();
}

InputReader::~InputReader() {
  // @@protoc_insertion_point(destructor:object_detection.protos.InputReader)
  SharedDtor();
}

void InputReader::SharedDtor() {
  label_map_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_input_reader()) {
    clear_input_reader();
  }
}

void InputReader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputReader& InputReader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base);
  return *internal_default_instance();
}


void InputReader::clear_input_reader() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.InputReader)
  switch (input_reader_case()) {
    case kTfRecordInputReader: {
      delete input_reader_.tf_record_input_reader_;
      break;
    }
    case kExternalInputReader: {
      delete input_reader_.external_input_reader_;
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INPUT_READER_NOT_SET;
}


void InputReader::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.InputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_map_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&num_epochs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_additional_channels_) -
        reinterpret_cast<char*>(&num_epochs_)) + sizeof(num_additional_channels_));
    shuffle_ = true;
  }
  if (cached_has_bits & 0x0000ff00u) {
    queue_capacity_ = 2000u;
    min_after_dequeue_ = 1000u;
    num_readers_ = 64u;
    mask_type_ = 1;
    shuffle_buffer_size_ = 2048u;
    filenames_shuffle_buffer_size_ = 100u;
    prefetch_size_ = 512u;
    num_parallel_map_calls_ = 64u;
  }
  if (cached_has_bits & 0x001f0000u) {
    read_block_length_ = 32u;
    num_parallel_batches_ = 8u;
    num_prefetch_batches_ = 2;
    max_number_of_boxes_ = 100;
    sample_1_of_n_examples_ = 1u;
  }
  clear_input_reader();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InputReader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string label_map_path = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label_map_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.InputReader.label_map_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shuffle = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shuffle(&has_bits);
          shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_queue_capacity(&has_bits);
          queue_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_after_dequeue(&has_bits);
          min_after_dequeue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_epochs = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_epochs(&has_bits);
          num_epochs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_readers = 6 [default = 64];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_readers(&has_bits);
          num_readers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool load_instance_masks = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_load_instance_masks(&has_bits);
          load_instance_masks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.TFRecordInputReader tf_record_input_reader = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tf_record_input_reader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ExternalInputReader external_input_reader = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_input_reader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::object_detection::protos::InstanceMaskType_IsValid(val))) {
            _internal_set_mask_type(static_cast<::object_detection::protos::InstanceMaskType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 shuffle_buffer_size = 11 [default = 2048];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_shuffle_buffer_size(&has_bits);
          shuffle_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_filenames_shuffle_buffer_size(&has_bits);
          filenames_shuffle_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_prefetch_size(&has_bits);
          prefetch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_num_parallel_map_calls(&has_bits);
          num_parallel_map_calls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 read_block_length = 15 [default = 32];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_read_block_length(&has_bits);
          read_block_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_keypoints = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_num_keypoints(&has_bits);
          num_keypoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_display_name = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_use_display_name(&has_bits);
          use_display_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_additional_channels = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_num_additional_channels(&has_bits);
          num_additional_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_parallel_batches = 19 [default = 8];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_num_parallel_batches(&has_bits);
          num_parallel_batches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_prefetch_batches = 20 [default = 2];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_num_prefetch_batches(&has_bits);
          num_prefetch_batches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_number_of_boxes = 21 [default = 100];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_max_number_of_boxes(&has_bits);
          max_number_of_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sample_1_of_n_examples = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_sample_1_of_n_examples(&has_bits);
          sample_1_of_n_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 23 [default = ""];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.InputReader.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputReader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.InputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label_map_path = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label_map_path().data(), static_cast<int>(this->_internal_label_map_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.InputReader.label_map_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label_map_path(), target);
  }

  // optional bool shuffle = 2 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_shuffle(), target);
  }

  // optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_queue_capacity(), target);
  }

  // optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_after_dequeue(), target);
  }

  // optional uint32 num_epochs = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_epochs(), target);
  }

  // optional uint32 num_readers = 6 [default = 64];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_readers(), target);
  }

  // optional bool load_instance_masks = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_load_instance_masks(), target);
  }

  switch (input_reader_case()) {
    case kTfRecordInputReader: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::tf_record_input_reader(this), target, stream);
      break;
    }
    case kExternalInputReader: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::external_input_reader(this), target, stream);
      break;
    }
    default: ;
  }
  // optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_mask_type(), target);
  }

  // optional uint32 shuffle_buffer_size = 11 [default = 2048];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_shuffle_buffer_size(), target);
  }

  // optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_filenames_shuffle_buffer_size(), target);
  }

  // optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_prefetch_size(), target);
  }

  // optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_num_parallel_map_calls(), target);
  }

  // optional uint32 read_block_length = 15 [default = 32];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_read_block_length(), target);
  }

  // optional uint32 num_keypoints = 16 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_num_keypoints(), target);
  }

  // optional bool use_display_name = 17 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_use_display_name(), target);
  }

  // optional int32 num_additional_channels = 18 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_num_additional_channels(), target);
  }

  // optional uint32 num_parallel_batches = 19 [default = 8];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_num_parallel_batches(), target);
  }

  // optional int32 num_prefetch_batches = 20 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_num_prefetch_batches(), target);
  }

  // optional int32 max_number_of_boxes = 21 [default = 100];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_max_number_of_boxes(), target);
  }

  // optional uint32 sample_1_of_n_examples = 22 [default = 1];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_sample_1_of_n_examples(), target);
  }

  // optional string name = 23 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.InputReader.name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.InputReader)
  return target;
}

size_t InputReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.InputReader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string label_map_path = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label_map_path());
    }

    // optional string name = 23 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 num_epochs = 5 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_epochs());
    }

    // optional bool load_instance_masks = 7 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool use_display_name = 17 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional uint32 num_keypoints = 16 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_keypoints());
    }

    // optional int32 num_additional_channels = 18 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_additional_channels());
    }

    // optional bool shuffle = 2 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_queue_capacity());
    }

    // optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_after_dequeue());
    }

    // optional uint32 num_readers = 6 [default = 64];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_readers());
    }

    // optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mask_type());
    }

    // optional uint32 shuffle_buffer_size = 11 [default = 2048];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shuffle_buffer_size());
    }

    // optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filenames_shuffle_buffer_size());
    }

    // optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prefetch_size());
    }

    // optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_parallel_map_calls());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 read_block_length = 15 [default = 32];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_read_block_length());
    }

    // optional uint32 num_parallel_batches = 19 [default = 8];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_parallel_batches());
    }

    // optional int32 num_prefetch_batches = 20 [default = 2];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_prefetch_batches());
    }

    // optional int32 max_number_of_boxes = 21 [default = 100];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_number_of_boxes());
    }

    // optional uint32 sample_1_of_n_examples = 22 [default = 1];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sample_1_of_n_examples());
    }

  }
  switch (input_reader_case()) {
    // optional .object_detection.protos.TFRecordInputReader tf_record_input_reader = 8;
    case kTfRecordInputReader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_reader_.tf_record_input_reader_);
      break;
    }
    // optional .object_detection.protos.ExternalInputReader external_input_reader = 9;
    case kExternalInputReader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_reader_.external_input_reader_);
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputReader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.InputReader)
  GOOGLE_DCHECK_NE(&from, this);
  const InputReader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputReader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.InputReader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.InputReader)
    MergeFrom(*source);
  }
}

void InputReader::MergeFrom(const InputReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.InputReader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      label_map_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_map_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      num_epochs_ = from.num_epochs_;
    }
    if (cached_has_bits & 0x00000008u) {
      load_instance_masks_ = from.load_instance_masks_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_display_name_ = from.use_display_name_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_keypoints_ = from.num_keypoints_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_additional_channels_ = from.num_additional_channels_;
    }
    if (cached_has_bits & 0x00000080u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      queue_capacity_ = from.queue_capacity_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_after_dequeue_ = from.min_after_dequeue_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_readers_ = from.num_readers_;
    }
    if (cached_has_bits & 0x00000800u) {
      mask_type_ = from.mask_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      shuffle_buffer_size_ = from.shuffle_buffer_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      filenames_shuffle_buffer_size_ = from.filenames_shuffle_buffer_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      prefetch_size_ = from.prefetch_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      num_parallel_map_calls_ = from.num_parallel_map_calls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      read_block_length_ = from.read_block_length_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_parallel_batches_ = from.num_parallel_batches_;
    }
    if (cached_has_bits & 0x00040000u) {
      num_prefetch_batches_ = from.num_prefetch_batches_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_number_of_boxes_ = from.max_number_of_boxes_;
    }
    if (cached_has_bits & 0x00100000u) {
      sample_1_of_n_examples_ = from.sample_1_of_n_examples_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.input_reader_case()) {
    case kTfRecordInputReader: {
      _internal_mutable_tf_record_input_reader()->::object_detection::protos::TFRecordInputReader::MergeFrom(from._internal_tf_record_input_reader());
      break;
    }
    case kExternalInputReader: {
      _internal_mutable_external_input_reader()->::object_detection::protos::ExternalInputReader::MergeFrom(from._internal_external_input_reader());
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
}

void InputReader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.InputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputReader::CopyFrom(const InputReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.InputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputReader::IsInitialized() const {
  switch (input_reader_case()) {
    case kTfRecordInputReader: {
      break;
    }
    case kExternalInputReader: {
      if (has_external_input_reader()) {
        if (!this->external_input_reader().IsInitialized()) return false;
      }
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
  return true;
}

void InputReader::InternalSwap(InputReader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_map_path_.Swap(&other->label_map_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_epochs_, other->num_epochs_);
  swap(load_instance_masks_, other->load_instance_masks_);
  swap(use_display_name_, other->use_display_name_);
  swap(num_keypoints_, other->num_keypoints_);
  swap(num_additional_channels_, other->num_additional_channels_);
  swap(shuffle_, other->shuffle_);
  swap(queue_capacity_, other->queue_capacity_);
  swap(min_after_dequeue_, other->min_after_dequeue_);
  swap(num_readers_, other->num_readers_);
  swap(mask_type_, other->mask_type_);
  swap(shuffle_buffer_size_, other->shuffle_buffer_size_);
  swap(filenames_shuffle_buffer_size_, other->filenames_shuffle_buffer_size_);
  swap(prefetch_size_, other->prefetch_size_);
  swap(num_parallel_map_calls_, other->num_parallel_map_calls_);
  swap(read_block_length_, other->read_block_length_);
  swap(num_parallel_batches_, other->num_parallel_batches_);
  swap(num_prefetch_batches_, other->num_prefetch_batches_);
  swap(max_number_of_boxes_, other->max_number_of_boxes_);
  swap(sample_1_of_n_examples_, other->sample_1_of_n_examples_);
  swap(input_reader_, other->input_reader_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputReader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TFRecordInputReader::InitAsDefaultInstance() {
}
class TFRecordInputReader::_Internal {
 public:
  using HasBits = decltype(std::declval<TFRecordInputReader>()._has_bits_);
};

TFRecordInputReader::TFRecordInputReader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.TFRecordInputReader)
}
TFRecordInputReader::TFRecordInputReader(const TFRecordInputReader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_path_(from.input_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.TFRecordInputReader)
}

void TFRecordInputReader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFRecordInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base);
}

TFRecordInputReader::~TFRecordInputReader() {
  // @@protoc_insertion_point(destructor:object_detection.protos.TFRecordInputReader)
  SharedDtor();
}

void TFRecordInputReader::SharedDtor() {
}

void TFRecordInputReader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TFRecordInputReader& TFRecordInputReader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFRecordInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base);
  return *internal_default_instance();
}


void TFRecordInputReader::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.TFRecordInputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_path_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TFRecordInputReader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string input_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.TFRecordInputReader.input_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TFRecordInputReader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.TFRecordInputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_path = 1;
  for (int i = 0, n = this->_internal_input_path_size(); i < n; i++) {
    const auto& s = this->_internal_input_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TFRecordInputReader.input_path");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.TFRecordInputReader)
  return target;
}

size_t TFRecordInputReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.TFRecordInputReader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_path_.size());
  for (int i = 0, n = input_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_path_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TFRecordInputReader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.TFRecordInputReader)
  GOOGLE_DCHECK_NE(&from, this);
  const TFRecordInputReader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFRecordInputReader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.TFRecordInputReader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.TFRecordInputReader)
    MergeFrom(*source);
  }
}

void TFRecordInputReader::MergeFrom(const TFRecordInputReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.TFRecordInputReader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_path_.MergeFrom(from.input_path_);
}

void TFRecordInputReader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.TFRecordInputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFRecordInputReader::CopyFrom(const TFRecordInputReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.TFRecordInputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFRecordInputReader::IsInitialized() const {
  return true;
}

void TFRecordInputReader::InternalSwap(TFRecordInputReader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_path_.InternalSwap(&other->input_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFRecordInputReader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExternalInputReader::InitAsDefaultInstance() {
}
class ExternalInputReader::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalInputReader>()._has_bits_);
};

ExternalInputReader::ExternalInputReader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ExternalInputReader)
}
ExternalInputReader::ExternalInputReader(const ExternalInputReader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ExternalInputReader)
}

void ExternalInputReader::SharedCtor() {
}

ExternalInputReader::~ExternalInputReader() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ExternalInputReader)
  SharedDtor();
}

void ExternalInputReader::SharedDtor() {
}

void ExternalInputReader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalInputReader& ExternalInputReader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExternalInputReader_object_5fdetection_2fprotos_2finput_5freader_2eproto.base);
  return *internal_default_instance();
}


void ExternalInputReader::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ExternalInputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ExternalInputReader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8u <= tag && tag < 8000u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternalInputReader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ExternalInputReader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 1000)
  target = _extensions_._InternalSerialize(
      1, 1000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ExternalInputReader)
  return target;
}

size_t ExternalInputReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ExternalInputReader)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalInputReader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ExternalInputReader)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalInputReader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExternalInputReader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ExternalInputReader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ExternalInputReader)
    MergeFrom(*source);
  }
}

void ExternalInputReader::MergeFrom(const ExternalInputReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ExternalInputReader)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExternalInputReader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ExternalInputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalInputReader::CopyFrom(const ExternalInputReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ExternalInputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalInputReader::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void ExternalInputReader::InternalSwap(ExternalInputReader* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalInputReader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::InputReader* Arena::CreateMaybeMessage< ::object_detection::protos::InputReader >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::InputReader >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::TFRecordInputReader* Arena::CreateMaybeMessage< ::object_detection::protos::TFRecordInputReader >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::TFRecordInputReader >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::ExternalInputReader* Arena::CreateMaybeMessage< ::object_detection::protos::ExternalInputReader >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::ExternalInputReader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
