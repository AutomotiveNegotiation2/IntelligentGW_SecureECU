// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/train.proto

#include "object_detection/protos/train.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2foptimizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Optimizer_object_5fdetection_2fprotos_2foptimizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_PreprocessingStep_object_5fdetection_2fprotos_2fpreprocessor_2eproto;
namespace object_detection {
namespace protos {
class TrainConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainConfig> _instance;
} _TrainConfig_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_TrainConfig_object_5fdetection_2fprotos_2ftrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_TrainConfig_default_instance_;
    new (ptr) ::object_detection::protos::TrainConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::TrainConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrainConfig_object_5fdetection_2fprotos_2ftrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrainConfig_object_5fdetection_2fprotos_2ftrain_2eproto}, {
      &scc_info_PreprocessingStep_object_5fdetection_2fprotos_2fpreprocessor_2eproto.base,
      &scc_info_Optimizer_object_5fdetection_2fprotos_2foptimizer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2ftrain_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_object_5fdetection_2fprotos_2ftrain_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2ftrain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2ftrain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, batch_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, data_augmentation_options_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, sync_replicas_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, keep_checkpoint_every_n_hours_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, optimizer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, gradient_clipping_by_norm_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, fine_tune_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, fine_tune_checkpoint_type_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, from_detection_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, load_all_detection_checkpoint_vars_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, num_steps_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, startup_delay_steps_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, bias_grad_multiplier_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, update_trainable_variables_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, freeze_variables_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, replicas_to_aggregate_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, batch_queue_capacity_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, num_batch_queue_threads_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, prefetch_queue_capacity_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, merge_multiple_label_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, use_multiclass_scores_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, add_regularization_loss_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, max_number_of_boxes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, unpad_groundtruth_tensors_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, retain_original_images_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, use_bfloat16_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::TrainConfig, summarize_gradients_),
  15,
  ~0u,
  6,
  16,
  2,
  3,
  0,
  1,
  7,
  8,
  4,
  17,
  5,
  ~0u,
  ~0u,
  18,
  19,
  20,
  21,
  9,
  10,
  22,
  14,
  23,
  11,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 32, sizeof(::object_detection::protos::TrainConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_TrainConfig_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2ftrain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#object_detection/protos/train.proto\022\027o"
  "bject_detection.protos\032\'object_detection"
  "/protos/optimizer.proto\032*object_detectio"
  "n/protos/preprocessor.proto\"\225\010\n\013TrainCon"
  "fig\022\026\n\nbatch_size\030\001 \001(\r:\00232\022M\n\031data_augm"
  "entation_options\030\002 \003(\0132*.object_detectio"
  "n.protos.PreprocessingStep\022\034\n\rsync_repli"
  "cas\030\003 \001(\010:\005false\022,\n\035keep_checkpoint_ever"
  "y_n_hours\030\004 \001(\002:\00510000\0225\n\toptimizer\030\005 \001("
  "\0132\".object_detection.protos.Optimizer\022$\n"
  "\031gradient_clipping_by_norm\030\006 \001(\002:\0010\022\036\n\024f"
  "ine_tune_checkpoint\030\007 \001(\t:\000\022#\n\031fine_tune"
  "_checkpoint_type\030\026 \001(\t:\000\022,\n\031from_detecti"
  "on_checkpoint\030\010 \001(\010:\005falseB\002\030\001\0221\n\"load_a"
  "ll_detection_checkpoint_vars\030\023 \001(\010:\005fals"
  "e\022\024\n\tnum_steps\030\t \001(\r:\0010\022\037\n\023startup_delay"
  "_steps\030\n \001(\002:\00215\022\037\n\024bias_grad_multiplier"
  "\030\013 \001(\002:\0010\022\"\n\032update_trainable_variables\030"
  "\031 \003(\t\022\030\n\020freeze_variables\030\014 \003(\t\022 \n\025repli"
  "cas_to_aggregate\030\r \001(\005:\0011\022!\n\024batch_queue"
  "_capacity\030\016 \001(\005:\003150\022\"\n\027num_batch_queue_"
  "threads\030\017 \001(\005:\0018\022\"\n\027prefetch_queue_capac"
  "ity\030\020 \001(\005:\0015\022)\n\032merge_multiple_label_box"
  "es\030\021 \001(\010:\005false\022$\n\025use_multiclass_scores"
  "\030\030 \001(\010:\005false\022%\n\027add_regularization_loss"
  "\030\022 \001(\010:\004true\022$\n\023max_number_of_boxes\030\024 \001("
  "\005:\003100B\002\030\001\022\'\n\031unpad_groundtruth_tensors\030"
  "\025 \001(\010:\004true\022%\n\026retain_original_images\030\027 "
  "\001(\010:\005false\022\033\n\014use_bfloat16\030\032 \001(\010:\005false\022"
  "\"\n\023summarize_gradients\030\033 \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto_deps[2] = {
  &::descriptor_table_object_5fdetection_2fprotos_2foptimizer_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fpreprocessor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto_sccs[1] = {
  &scc_info_TrainConfig_object_5fdetection_2fprotos_2ftrain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2ftrain_2eproto, "object_detection/protos/train.proto", 1195,
  &descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2ftrain_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2ftrain_2eproto, 1, file_level_enum_descriptors_object_5fdetection_2fprotos_2ftrain_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2ftrain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2ftrain_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2ftrain_2eproto), true);
namespace object_detection {
namespace protos {

// ===================================================================

void TrainConfig::InitAsDefaultInstance() {
  ::object_detection::protos::_TrainConfig_default_instance_._instance.get_mutable()->optimizer_ = const_cast< ::object_detection::protos::Optimizer*>(
      ::object_detection::protos::Optimizer::internal_default_instance());
}
class TrainConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainConfig>()._has_bits_);
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sync_replicas(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_keep_checkpoint_every_n_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::object_detection::protos::Optimizer& optimizer(const TrainConfig* msg);
  static void set_has_optimizer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gradient_clipping_by_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fine_tune_checkpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fine_tune_checkpoint_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_detection_checkpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_load_all_detection_checkpoint_vars(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_startup_delay_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_bias_grad_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_replicas_to_aggregate(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_batch_queue_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_num_batch_queue_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_prefetch_queue_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_merge_multiple_label_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_multiclass_scores(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_add_regularization_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_max_number_of_boxes(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_unpad_groundtruth_tensors(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_retain_original_images(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_bfloat16(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_summarize_gradients(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::object_detection::protos::Optimizer&
TrainConfig::_Internal::optimizer(const TrainConfig* msg) {
  return *msg->optimizer_;
}
void TrainConfig::clear_data_augmentation_options() {
  data_augmentation_options_.Clear();
}
void TrainConfig::clear_optimizer() {
  if (optimizer_ != nullptr) optimizer_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TrainConfig::TrainConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.TrainConfig)
}
TrainConfig::TrainConfig(const TrainConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_augmentation_options_(from.data_augmentation_options_),
      freeze_variables_(from.freeze_variables_),
      update_trainable_variables_(from.update_trainable_variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fine_tune_checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fine_tune_checkpoint()) {
    fine_tune_checkpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fine_tune_checkpoint_);
  }
  fine_tune_checkpoint_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fine_tune_checkpoint_type()) {
    fine_tune_checkpoint_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fine_tune_checkpoint_type_);
  }
  if (from._internal_has_optimizer()) {
    optimizer_ = new ::object_detection::protos::Optimizer(*from.optimizer_);
  } else {
    optimizer_ = nullptr;
  }
  ::memcpy(&gradient_clipping_by_norm_, &from.gradient_clipping_by_norm_,
    static_cast<size_t>(reinterpret_cast<char*>(&unpad_groundtruth_tensors_) -
    reinterpret_cast<char*>(&gradient_clipping_by_norm_)) + sizeof(unpad_groundtruth_tensors_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.TrainConfig)
}

void TrainConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainConfig_object_5fdetection_2fprotos_2ftrain_2eproto.base);
  fine_tune_checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fine_tune_checkpoint_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&optimizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summarize_gradients_) -
      reinterpret_cast<char*>(&optimizer_)) + sizeof(summarize_gradients_));
  max_number_of_boxes_ = 100;
  batch_size_ = 32u;
  keep_checkpoint_every_n_hours_ = 10000;
  startup_delay_steps_ = 15;
  replicas_to_aggregate_ = 1;
  batch_queue_capacity_ = 150;
  num_batch_queue_threads_ = 8;
  prefetch_queue_capacity_ = 5;
  add_regularization_loss_ = true;
  unpad_groundtruth_tensors_ = true;
}

TrainConfig::~TrainConfig() {
  // @@protoc_insertion_point(destructor:object_detection.protos.TrainConfig)
  SharedDtor();
}

void TrainConfig::SharedDtor() {
  fine_tune_checkpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fine_tune_checkpoint_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optimizer_;
}

void TrainConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainConfig& TrainConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainConfig_object_5fdetection_2fprotos_2ftrain_2eproto.base);
  return *internal_default_instance();
}


void TrainConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.TrainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_augmentation_options_.Clear();
  freeze_variables_.Clear();
  update_trainable_variables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fine_tune_checkpoint_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fine_tune_checkpoint_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optimizer_ != nullptr);
      optimizer_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&gradient_clipping_by_norm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_detection_checkpoint_) -
        reinterpret_cast<char*>(&gradient_clipping_by_norm_)) + sizeof(from_detection_checkpoint_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&load_all_detection_checkpoint_vars_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&summarize_gradients_) -
        reinterpret_cast<char*>(&load_all_detection_checkpoint_vars_)) + sizeof(summarize_gradients_));
    max_number_of_boxes_ = 100;
    batch_size_ = 32u;
  }
  if (cached_has_bits & 0x00ff0000u) {
    keep_checkpoint_every_n_hours_ = 10000;
    startup_delay_steps_ = 15;
    replicas_to_aggregate_ = 1;
    batch_queue_capacity_ = 150;
    num_batch_queue_threads_ = 8;
    prefetch_queue_capacity_ = 5;
    add_regularization_loss_ = true;
    unpad_groundtruth_tensors_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrainConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 batch_size = 1 [default = 32];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_augmentation_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool sync_replicas = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sync_replicas(&has_bits);
          sync_replicas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_keep_checkpoint_every_n_hours(&has_bits);
          keep_checkpoint_every_n_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Optimizer optimizer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gradient_clipping_by_norm = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_gradient_clipping_by_norm(&has_bits);
          gradient_clipping_by_norm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string fine_tune_checkpoint = 7 [default = ""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_fine_tune_checkpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.TrainConfig.fine_tune_checkpoint");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_from_detection_checkpoint(&has_bits);
          from_detection_checkpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_steps = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_num_steps(&has_bits);
          num_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float startup_delay_steps = 10 [default = 15];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_startup_delay_steps(&has_bits);
          startup_delay_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias_grad_multiplier = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_bias_grad_multiplier(&has_bits);
          bias_grad_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string freeze_variables = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_freeze_variables();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.TrainConfig.freeze_variables");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 replicas_to_aggregate = 13 [default = 1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_replicas_to_aggregate(&has_bits);
          replicas_to_aggregate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 batch_queue_capacity = 14 [default = 150];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_batch_queue_capacity(&has_bits);
          batch_queue_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_batch_queue_threads = 15 [default = 8];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_num_batch_queue_threads(&has_bits);
          num_batch_queue_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 prefetch_queue_capacity = 16 [default = 5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_prefetch_queue_capacity(&has_bits);
          prefetch_queue_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool merge_multiple_label_boxes = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_merge_multiple_label_boxes(&has_bits);
          merge_multiple_label_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool add_regularization_loss = 18 [default = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_add_regularization_loss(&has_bits);
          add_regularization_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool load_all_detection_checkpoint_vars = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_load_all_detection_checkpoint_vars(&has_bits);
          load_all_detection_checkpoint_vars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_max_number_of_boxes(&has_bits);
          max_number_of_boxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unpad_groundtruth_tensors = 21 [default = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_unpad_groundtruth_tensors(&has_bits);
          unpad_groundtruth_tensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fine_tune_checkpoint_type = 22 [default = ""];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_fine_tune_checkpoint_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.TrainConfig.fine_tune_checkpoint_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool retain_original_images = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_retain_original_images(&has_bits);
          retain_original_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_multiclass_scores = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_use_multiclass_scores(&has_bits);
          use_multiclass_scores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string update_trainable_variables = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_update_trainable_variables();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.TrainConfig.update_trainable_variables");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool use_bfloat16 = 26 [default = false];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_use_bfloat16(&has_bits);
          use_bfloat16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool summarize_gradients = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_summarize_gradients(&has_bits);
          summarize_gradients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.TrainConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1 [default = 32];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_batch_size(), target);
  }

  // repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_augmentation_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data_augmentation_options(i), target, stream);
  }

  // optional bool sync_replicas = 3 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sync_replicas(), target);
  }

  // optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_keep_checkpoint_every_n_hours(), target);
  }

  // optional .object_detection.protos.Optimizer optimizer = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::optimizer(this), target, stream);
  }

  // optional float gradient_clipping_by_norm = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_gradient_clipping_by_norm(), target);
  }

  // optional string fine_tune_checkpoint = 7 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fine_tune_checkpoint().data(), static_cast<int>(this->_internal_fine_tune_checkpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.fine_tune_checkpoint");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fine_tune_checkpoint(), target);
  }

  // optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_from_detection_checkpoint(), target);
  }

  // optional uint32 num_steps = 9 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num_steps(), target);
  }

  // optional float startup_delay_steps = 10 [default = 15];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_startup_delay_steps(), target);
  }

  // optional float bias_grad_multiplier = 11 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_bias_grad_multiplier(), target);
  }

  // repeated string freeze_variables = 12;
  for (int i = 0, n = this->_internal_freeze_variables_size(); i < n; i++) {
    const auto& s = this->_internal_freeze_variables(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.freeze_variables");
    target = stream->WriteString(12, s, target);
  }

  // optional int32 replicas_to_aggregate = 13 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_replicas_to_aggregate(), target);
  }

  // optional int32 batch_queue_capacity = 14 [default = 150];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_batch_queue_capacity(), target);
  }

  // optional int32 num_batch_queue_threads = 15 [default = 8];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_num_batch_queue_threads(), target);
  }

  // optional int32 prefetch_queue_capacity = 16 [default = 5];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_prefetch_queue_capacity(), target);
  }

  // optional bool merge_multiple_label_boxes = 17 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_merge_multiple_label_boxes(), target);
  }

  // optional bool add_regularization_loss = 18 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_add_regularization_loss(), target);
  }

  // optional bool load_all_detection_checkpoint_vars = 19 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_load_all_detection_checkpoint_vars(), target);
  }

  // optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_max_number_of_boxes(), target);
  }

  // optional bool unpad_groundtruth_tensors = 21 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_unpad_groundtruth_tensors(), target);
  }

  // optional string fine_tune_checkpoint_type = 22 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fine_tune_checkpoint_type().data(), static_cast<int>(this->_internal_fine_tune_checkpoint_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.fine_tune_checkpoint_type");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_fine_tune_checkpoint_type(), target);
  }

  // optional bool retain_original_images = 23 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_retain_original_images(), target);
  }

  // optional bool use_multiclass_scores = 24 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_use_multiclass_scores(), target);
  }

  // repeated string update_trainable_variables = 25;
  for (int i = 0, n = this->_internal_update_trainable_variables_size(); i < n; i++) {
    const auto& s = this->_internal_update_trainable_variables(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.update_trainable_variables");
    target = stream->WriteString(25, s, target);
  }

  // optional bool use_bfloat16 = 26 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_use_bfloat16(), target);
  }

  // optional bool summarize_gradients = 27 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_summarize_gradients(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.TrainConfig)
  return target;
}

size_t TrainConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.TrainConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
  total_size += 1UL * this->_internal_data_augmentation_options_size();
  for (const auto& msg : this->data_augmentation_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string freeze_variables = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(freeze_variables_.size());
  for (int i = 0, n = freeze_variables_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      freeze_variables_.Get(i));
  }

  // repeated string update_trainable_variables = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(update_trainable_variables_.size());
  for (int i = 0, n = update_trainable_variables_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      update_trainable_variables_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string fine_tune_checkpoint = 7 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fine_tune_checkpoint());
    }

    // optional string fine_tune_checkpoint_type = 22 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fine_tune_checkpoint_type());
    }

    // optional .object_detection.protos.Optimizer optimizer = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimizer_);
    }

    // optional float gradient_clipping_by_norm = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_steps = 9 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_steps());
    }

    // optional float bias_grad_multiplier = 11 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool sync_replicas = 3 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool load_all_detection_checkpoint_vars = 19 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool merge_multiple_label_boxes = 17 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool use_multiclass_scores = 24 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool retain_original_images = 23 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool use_bfloat16 = 26 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool summarize_gradients = 27 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_number_of_boxes());
    }

    // optional uint32 batch_size = 1 [default = 32];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_batch_size());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float startup_delay_steps = 10 [default = 15];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional int32 replicas_to_aggregate = 13 [default = 1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_replicas_to_aggregate());
    }

    // optional int32 batch_queue_capacity = 14 [default = 150];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_batch_queue_capacity());
    }

    // optional int32 num_batch_queue_threads = 15 [default = 8];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_batch_queue_threads());
    }

    // optional int32 prefetch_queue_capacity = 16 [default = 5];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_prefetch_queue_capacity());
    }

    // optional bool add_regularization_loss = 18 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool unpad_groundtruth_tensors = 21 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.TrainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.TrainConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.TrainConfig)
    MergeFrom(*source);
  }
}

void TrainConfig::MergeFrom(const TrainConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.TrainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_augmentation_options_.MergeFrom(from.data_augmentation_options_);
  freeze_variables_.MergeFrom(from.freeze_variables_);
  update_trainable_variables_.MergeFrom(from.update_trainable_variables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      fine_tune_checkpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fine_tune_checkpoint_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fine_tune_checkpoint_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fine_tune_checkpoint_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optimizer()->::object_detection::protos::Optimizer::MergeFrom(from._internal_optimizer());
    }
    if (cached_has_bits & 0x00000008u) {
      gradient_clipping_by_norm_ = from.gradient_clipping_by_norm_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_steps_ = from.num_steps_;
    }
    if (cached_has_bits & 0x00000020u) {
      bias_grad_multiplier_ = from.bias_grad_multiplier_;
    }
    if (cached_has_bits & 0x00000040u) {
      sync_replicas_ = from.sync_replicas_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_detection_checkpoint_ = from.from_detection_checkpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      load_all_detection_checkpoint_vars_ = from.load_all_detection_checkpoint_vars_;
    }
    if (cached_has_bits & 0x00000200u) {
      merge_multiple_label_boxes_ = from.merge_multiple_label_boxes_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_multiclass_scores_ = from.use_multiclass_scores_;
    }
    if (cached_has_bits & 0x00000800u) {
      retain_original_images_ = from.retain_original_images_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_bfloat16_ = from.use_bfloat16_;
    }
    if (cached_has_bits & 0x00002000u) {
      summarize_gradients_ = from.summarize_gradients_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_number_of_boxes_ = from.max_number_of_boxes_;
    }
    if (cached_has_bits & 0x00008000u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      keep_checkpoint_every_n_hours_ = from.keep_checkpoint_every_n_hours_;
    }
    if (cached_has_bits & 0x00020000u) {
      startup_delay_steps_ = from.startup_delay_steps_;
    }
    if (cached_has_bits & 0x00040000u) {
      replicas_to_aggregate_ = from.replicas_to_aggregate_;
    }
    if (cached_has_bits & 0x00080000u) {
      batch_queue_capacity_ = from.batch_queue_capacity_;
    }
    if (cached_has_bits & 0x00100000u) {
      num_batch_queue_threads_ = from.num_batch_queue_threads_;
    }
    if (cached_has_bits & 0x00200000u) {
      prefetch_queue_capacity_ = from.prefetch_queue_capacity_;
    }
    if (cached_has_bits & 0x00400000u) {
      add_regularization_loss_ = from.add_regularization_loss_;
    }
    if (cached_has_bits & 0x00800000u) {
      unpad_groundtruth_tensors_ = from.unpad_groundtruth_tensors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.TrainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainConfig::CopyFrom(const TrainConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.TrainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainConfig::IsInitialized() const {
  return true;
}

void TrainConfig::InternalSwap(TrainConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_augmentation_options_.InternalSwap(&other->data_augmentation_options_);
  freeze_variables_.InternalSwap(&other->freeze_variables_);
  update_trainable_variables_.InternalSwap(&other->update_trainable_variables_);
  fine_tune_checkpoint_.Swap(&other->fine_tune_checkpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fine_tune_checkpoint_type_.Swap(&other->fine_tune_checkpoint_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(optimizer_, other->optimizer_);
  swap(gradient_clipping_by_norm_, other->gradient_clipping_by_norm_);
  swap(num_steps_, other->num_steps_);
  swap(bias_grad_multiplier_, other->bias_grad_multiplier_);
  swap(sync_replicas_, other->sync_replicas_);
  swap(from_detection_checkpoint_, other->from_detection_checkpoint_);
  swap(load_all_detection_checkpoint_vars_, other->load_all_detection_checkpoint_vars_);
  swap(merge_multiple_label_boxes_, other->merge_multiple_label_boxes_);
  swap(use_multiclass_scores_, other->use_multiclass_scores_);
  swap(retain_original_images_, other->retain_original_images_);
  swap(use_bfloat16_, other->use_bfloat16_);
  swap(summarize_gradients_, other->summarize_gradients_);
  swap(max_number_of_boxes_, other->max_number_of_boxes_);
  swap(batch_size_, other->batch_size_);
  swap(keep_checkpoint_every_n_hours_, other->keep_checkpoint_every_n_hours_);
  swap(startup_delay_steps_, other->startup_delay_steps_);
  swap(replicas_to_aggregate_, other->replicas_to_aggregate_);
  swap(batch_queue_capacity_, other->batch_queue_capacity_);
  swap(num_batch_queue_threads_, other->num_batch_queue_threads_);
  swap(prefetch_queue_capacity_, other->prefetch_queue_capacity_);
  swap(add_regularization_loss_, other->add_regularization_loss_);
  swap(unpad_groundtruth_tensors_, other->unpad_groundtruth_tensors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::TrainConfig* Arena::CreateMaybeMessage< ::object_detection::protos::TrainConfig >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::TrainConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
