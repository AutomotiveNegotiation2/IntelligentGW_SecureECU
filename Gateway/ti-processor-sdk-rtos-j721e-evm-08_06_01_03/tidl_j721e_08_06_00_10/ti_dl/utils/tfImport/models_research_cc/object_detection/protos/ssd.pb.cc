// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/ssd.proto

#include "object_detection/protos/ssd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnchorGenerator_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fcoder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BoxCoder_object_5fdetection_2fprotos_2fbox_5fcoder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fssd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeaturePyramidNetworks_object_5fdetection_2fprotos_2fssd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fhyperparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2flosses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Loss_object_5fdetection_2fprotos_2flosses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fmatcher_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Matcher_object_5fdetection_2fprotos_2fmatcher_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fregion_5fsimilarity_5fcalculator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RegionSimilarityCalculator_object_5fdetection_2fprotos_2fregion_5fsimilarity_5fcalculator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fssd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ssd_MaskHead_object_5fdetection_2fprotos_2fssd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2fssd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SsdFeatureExtractor_object_5fdetection_2fprotos_2fssd_2eproto;
namespace object_detection {
namespace protos {
class Ssd_MaskHeadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ssd_MaskHead> _instance;
} _Ssd_MaskHead_default_instance_;
class SsdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ssd> _instance;
} _Ssd_default_instance_;
class SsdFeatureExtractorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsdFeatureExtractor> _instance;
} _SsdFeatureExtractor_default_instance_;
class FeaturePyramidNetworksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeaturePyramidNetworks> _instance;
} _FeaturePyramidNetworks_default_instance_;
}  // namespace protos
}  // namespace object_detection
static void InitDefaultsscc_info_FeaturePyramidNetworks_object_5fdetection_2fprotos_2fssd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_FeaturePyramidNetworks_default_instance_;
    new (ptr) ::object_detection::protos::FeaturePyramidNetworks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::FeaturePyramidNetworks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeaturePyramidNetworks_object_5fdetection_2fprotos_2fssd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeaturePyramidNetworks_object_5fdetection_2fprotos_2fssd_2eproto}, {}};

static void InitDefaultsscc_info_Ssd_object_5fdetection_2fprotos_2fssd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Ssd_default_instance_;
    new (ptr) ::object_detection::protos::Ssd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Ssd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Ssd_object_5fdetection_2fprotos_2fssd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Ssd_object_5fdetection_2fprotos_2fssd_2eproto}, {
      &scc_info_ImageResizer_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto.base,
      &scc_info_SsdFeatureExtractor_object_5fdetection_2fprotos_2fssd_2eproto.base,
      &scc_info_BoxCoder_object_5fdetection_2fprotos_2fbox_5fcoder_2eproto.base,
      &scc_info_Matcher_object_5fdetection_2fprotos_2fmatcher_2eproto.base,
      &scc_info_RegionSimilarityCalculator_object_5fdetection_2fprotos_2fregion_5fsimilarity_5fcalculator_2eproto.base,
      &scc_info_BoxPredictor_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto.base,
      &scc_info_AnchorGenerator_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto.base,
      &scc_info_PostProcessing_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto.base,
      &scc_info_Loss_object_5fdetection_2fprotos_2flosses_2eproto.base,
      &scc_info_Ssd_MaskHead_object_5fdetection_2fprotos_2fssd_2eproto.base,}};

static void InitDefaultsscc_info_Ssd_MaskHead_object_5fdetection_2fprotos_2fssd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_Ssd_MaskHead_default_instance_;
    new (ptr) ::object_detection::protos::Ssd_MaskHead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::Ssd_MaskHead::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ssd_MaskHead_object_5fdetection_2fprotos_2fssd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Ssd_MaskHead_object_5fdetection_2fprotos_2fssd_2eproto}, {
      &scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,}};

static void InitDefaultsscc_info_SsdFeatureExtractor_object_5fdetection_2fprotos_2fssd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::object_detection::protos::_SsdFeatureExtractor_default_instance_;
    new (ptr) ::object_detection::protos::SsdFeatureExtractor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::object_detection::protos::SsdFeatureExtractor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SsdFeatureExtractor_object_5fdetection_2fprotos_2fssd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SsdFeatureExtractor_object_5fdetection_2fprotos_2fssd_2eproto}, {
      &scc_info_Hyperparams_object_5fdetection_2fprotos_2fhyperparams_2eproto.base,
      &scc_info_FeaturePyramidNetworks_object_5fdetection_2fprotos_2fssd_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_5fdetection_2fprotos_2fssd_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_object_5fdetection_2fprotos_2fssd_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_5fdetection_2fprotos_2fssd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_5fdetection_2fprotos_2fssd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, mask_height_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, mask_width_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, masks_are_class_agnostic_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, mask_prediction_conv_depth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, mask_prediction_num_conv_layers_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, convolve_then_upsample_masks_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, mask_loss_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, mask_loss_sample_size_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, conv_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd_MaskHead, initial_crop_size_),
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  8,
  0,
  9,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, num_classes_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, image_resizer_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, box_input_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, class_input_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, feature_extractor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, box_coder_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, matcher_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, similarity_calculator_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, encode_background_as_zeros_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, negative_class_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, box_predictor_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, anchor_generator_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, post_processing_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, normalize_loss_by_num_matches_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, normalize_loc_loss_by_codesize_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, loss_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, freeze_batchnorm_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, inplace_batchnorm_update_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, add_background_class_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, explicit_background_class_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, use_confidences_as_targets_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, implicit_example_weight_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::Ssd, mask_head_config_),
  10,
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  11,
  18,
  5,
  6,
  7,
  19,
  12,
  8,
  13,
  14,
  20,
  15,
  16,
  17,
  9,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, type_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, depth_multiplier_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, min_depth_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, conv_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, override_base_feature_extractor_hyperparams_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, pad_to_multiple_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, use_explicit_padding_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, use_depthwise_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::SsdFeatureExtractor, fpn_),
  0,
  7,
  8,
  1,
  3,
  6,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FeaturePyramidNetworks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FeaturePyramidNetworks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FeaturePyramidNetworks, min_level_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FeaturePyramidNetworks, max_level_),
  PROTOBUF_FIELD_OFFSET(::object_detection::protos::FeaturePyramidNetworks, additional_layer_depth_),
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::object_detection::protos::Ssd_MaskHead)},
  { 25, 53, sizeof(::object_detection::protos::Ssd)},
  { 76, 90, sizeof(::object_detection::protos::SsdFeatureExtractor)},
  { 99, 107, sizeof(::object_detection::protos::FeaturePyramidNetworks)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Ssd_MaskHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_Ssd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_SsdFeatureExtractor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::object_detection::protos::_FeaturePyramidNetworks_default_instance_),
};

const char descriptor_table_protodef_object_5fdetection_2fprotos_2fssd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!object_detection/protos/ssd.proto\022\027obj"
  "ect_detection.protos\032.object_detection/p"
  "rotos/anchor_generator.proto\032\'object_det"
  "ection/protos/box_coder.proto\032+object_de"
  "tection/protos/box_predictor.proto\032)obje"
  "ct_detection/protos/hyperparams.proto\032+o"
  "bject_detection/protos/image_resizer.pro"
  "to\032%object_detection/protos/matcher.prot"
  "o\032$object_detection/protos/losses.proto\032"
  "-object_detection/protos/post_processing"
  ".proto\032:object_detection/protos/region_s"
  "imilarity_calculator.proto\"\317\013\n\003Ssd\022\023\n\013nu"
  "m_classes\030\001 \001(\005\022<\n\rimage_resizer\030\002 \001(\0132%"
  ".object_detection.protos.ImageResizer\022\021\n"
  "\tbox_input\030\032 \003(\t\022\023\n\013class_input\030\033 \003(\t\022G\n"
  "\021feature_extractor\030\003 \001(\0132,.object_detect"
  "ion.protos.SsdFeatureExtractor\0224\n\tbox_co"
  "der\030\004 \001(\0132!.object_detection.protos.BoxC"
  "oder\0221\n\007matcher\030\005 \001(\0132 .object_detection"
  ".protos.Matcher\022R\n\025similarity_calculator"
  "\030\006 \001(\01323.object_detection.protos.RegionS"
  "imilarityCalculator\022)\n\032encode_background"
  "_as_zeros\030\014 \001(\010:\005false\022 \n\025negative_class"
  "_weight\030\r \001(\002:\0011\022<\n\rbox_predictor\030\007 \001(\0132"
  "%.object_detection.protos.BoxPredictor\022B"
  "\n\020anchor_generator\030\010 \001(\0132(.object_detect"
  "ion.protos.AnchorGenerator\022@\n\017post_proce"
  "ssing\030\t \001(\0132\'.object_detection.protos.Po"
  "stProcessing\022+\n\035normalize_loss_by_num_ma"
  "tches\030\n \001(\010:\004true\022-\n\036normalize_loc_loss_"
  "by_codesize\030\016 \001(\010:\005false\022+\n\004loss\030\013 \001(\0132\035"
  ".object_detection.protos.Loss\022\037\n\020freeze_"
  "batchnorm\030\020 \001(\010:\005false\022\'\n\030inplace_batchn"
  "orm_update\030\017 \001(\010:\005false\022\"\n\024add_backgroun"
  "d_class\030\025 \001(\010:\004true\022(\n\031explicit_backgrou"
  "nd_class\030\030 \001(\010:\005false\022)\n\032use_confidences"
  "_as_targets\030\026 \001(\010:\005false\022\"\n\027implicit_exa"
  "mple_weight\030\027 \001(\002:\0011\022\?\n\020mask_head_config"
  "\030\031 \001(\0132%.object_detection.protos.Ssd.Mas"
  "kHead\032\204\003\n\010MaskHead\022\027\n\013mask_height\030\001 \001(\005:"
  "\00215\022\026\n\nmask_width\030\002 \001(\005:\00215\022&\n\030masks_are"
  "_class_agnostic\030\003 \001(\010:\004true\022\'\n\032mask_pred"
  "iction_conv_depth\030\004 \001(\005:\003256\022*\n\037mask_pre"
  "diction_num_conv_layers\030\005 \001(\005:\0012\022+\n\034conv"
  "olve_then_upsample_masks\030\006 \001(\010:\005false\022\033\n"
  "\020mask_loss_weight\030\007 \001(\002:\0015\022!\n\025mask_loss_"
  "sample_size\030\010 \001(\005:\00216\022>\n\020conv_hyperparam"
  "s\030\t \001(\0132$.object_detection.protos.Hyperp"
  "arams\022\035\n\021initial_crop_size\030\n \001(\005:\00215\"\366\002\n"
  "\023SsdFeatureExtractor\022\014\n\004type\030\001 \001(\t\022\033\n\020de"
  "pth_multiplier\030\002 \001(\002:\0011\022\025\n\tmin_depth\030\003 \001"
  "(\005:\00216\022>\n\020conv_hyperparams\030\004 \001(\0132$.objec"
  "t_detection.protos.Hyperparams\022:\n+overri"
  "de_base_feature_extractor_hyperparams\030\t "
  "\001(\010:\005false\022\032\n\017pad_to_multiple\030\005 \001(\005:\0011\022#"
  "\n\024use_explicit_padding\030\007 \001(\010:\005false\022\034\n\ru"
  "se_depthwise\030\010 \001(\010:\005false\022<\n\003fpn\030\n \001(\0132/"
  ".object_detection.protos.FeaturePyramidN"
  "etworksJ\004\010\006\020\007\"i\n\026FeaturePyramidNetworks\022"
  "\024\n\tmin_level\030\001 \001(\005:\0013\022\024\n\tmax_level\030\002 \001(\005"
  ":\0017\022#\n\026additional_layer_depth\030\003 \001(\005:\003256"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto_deps[9] = {
  &::descriptor_table_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fbox_5fcoder_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fhyperparams_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2flosses_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fmatcher_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto,
  &::descriptor_table_object_5fdetection_2fprotos_2fregion_5fsimilarity_5fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto_sccs[4] = {
  &scc_info_FeaturePyramidNetworks_object_5fdetection_2fprotos_2fssd_2eproto.base,
  &scc_info_Ssd_object_5fdetection_2fprotos_2fssd_2eproto.base,
  &scc_info_Ssd_MaskHead_object_5fdetection_2fprotos_2fssd_2eproto.base,
  &scc_info_SsdFeatureExtractor_object_5fdetection_2fprotos_2fssd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto_once;
static bool descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto = {
  &descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto_initialized, descriptor_table_protodef_object_5fdetection_2fprotos_2fssd_2eproto, "object_detection/protos/ssd.proto", 2440,
  &descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto_once, descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto_sccs, descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto_deps, 4, 9,
  schemas, file_default_instances, TableStruct_object_5fdetection_2fprotos_2fssd_2eproto::offsets,
  file_level_metadata_object_5fdetection_2fprotos_2fssd_2eproto, 4, file_level_enum_descriptors_object_5fdetection_2fprotos_2fssd_2eproto, file_level_service_descriptors_object_5fdetection_2fprotos_2fssd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_5fdetection_2fprotos_2fssd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_5fdetection_2fprotos_2fssd_2eproto), true);
namespace object_detection {
namespace protos {

// ===================================================================

void Ssd_MaskHead::InitAsDefaultInstance() {
  ::object_detection::protos::_Ssd_MaskHead_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
}
class Ssd_MaskHead::_Internal {
 public:
  using HasBits = decltype(std::declval<Ssd_MaskHead>()._has_bits_);
  static void set_has_mask_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mask_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_masks_are_class_agnostic(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mask_prediction_conv_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mask_prediction_num_conv_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_convolve_then_upsample_masks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mask_loss_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mask_loss_sample_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::object_detection::protos::Hyperparams& conv_hyperparams(const Ssd_MaskHead* msg);
  static void set_has_conv_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::object_detection::protos::Hyperparams&
Ssd_MaskHead::_Internal::conv_hyperparams(const Ssd_MaskHead* msg) {
  return *msg->conv_hyperparams_;
}
void Ssd_MaskHead::clear_conv_hyperparams() {
  if (conv_hyperparams_ != nullptr) conv_hyperparams_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Ssd_MaskHead::Ssd_MaskHead()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Ssd.MaskHead)
}
Ssd_MaskHead::Ssd_MaskHead(const Ssd_MaskHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = nullptr;
  }
  ::memcpy(&convolve_then_upsample_masks_, &from.convolve_then_upsample_masks_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_crop_size_) -
    reinterpret_cast<char*>(&convolve_then_upsample_masks_)) + sizeof(initial_crop_size_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Ssd.MaskHead)
}

void Ssd_MaskHead::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ssd_MaskHead_object_5fdetection_2fprotos_2fssd_2eproto.base);
  ::memset(&conv_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convolve_then_upsample_masks_) -
      reinterpret_cast<char*>(&conv_hyperparams_)) + sizeof(convolve_then_upsample_masks_));
  mask_height_ = 15;
  mask_width_ = 15;
  masks_are_class_agnostic_ = true;
  mask_prediction_conv_depth_ = 256;
  mask_prediction_num_conv_layers_ = 2;
  mask_loss_weight_ = 5;
  mask_loss_sample_size_ = 16;
  initial_crop_size_ = 15;
}

Ssd_MaskHead::~Ssd_MaskHead() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Ssd.MaskHead)
  SharedDtor();
}

void Ssd_MaskHead::SharedDtor() {
  if (this != internal_default_instance()) delete conv_hyperparams_;
}

void Ssd_MaskHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ssd_MaskHead& Ssd_MaskHead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ssd_MaskHead_object_5fdetection_2fprotos_2fssd_2eproto.base);
  return *internal_default_instance();
}


void Ssd_MaskHead::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Ssd.MaskHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(conv_hyperparams_ != nullptr);
    conv_hyperparams_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    convolve_then_upsample_masks_ = false;
    mask_height_ = 15;
    mask_width_ = 15;
    masks_are_class_agnostic_ = true;
    mask_prediction_conv_depth_ = 256;
    mask_prediction_num_conv_layers_ = 2;
    mask_loss_weight_ = 5;
  }
  if (cached_has_bits & 0x00000300u) {
    mask_loss_sample_size_ = 16;
    initial_crop_size_ = 15;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ssd_MaskHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 mask_height = 1 [default = 15];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mask_height(&has_bits);
          mask_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_width = 2 [default = 15];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mask_width(&has_bits);
          mask_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool masks_are_class_agnostic = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_masks_are_class_agnostic(&has_bits);
          masks_are_class_agnostic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_prediction_conv_depth = 4 [default = 256];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mask_prediction_conv_depth(&has_bits);
          mask_prediction_conv_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_prediction_num_conv_layers = 5 [default = 2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mask_prediction_num_conv_layers(&has_bits);
          mask_prediction_num_conv_layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool convolve_then_upsample_masks = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_convolve_then_upsample_masks(&has_bits);
          convolve_then_upsample_masks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mask_loss_weight = 7 [default = 5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_mask_loss_weight(&has_bits);
          mask_loss_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_loss_sample_size = 8 [default = 16];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mask_loss_sample_size(&has_bits);
          mask_loss_sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv_hyperparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 initial_crop_size = 10 [default = 15];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_initial_crop_size(&has_bits);
          initial_crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ssd_MaskHead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Ssd.MaskHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mask_height = 1 [default = 15];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mask_height(), target);
  }

  // optional int32 mask_width = 2 [default = 15];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mask_width(), target);
  }

  // optional bool masks_are_class_agnostic = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_masks_are_class_agnostic(), target);
  }

  // optional int32 mask_prediction_conv_depth = 4 [default = 256];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mask_prediction_conv_depth(), target);
  }

  // optional int32 mask_prediction_num_conv_layers = 5 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mask_prediction_num_conv_layers(), target);
  }

  // optional bool convolve_then_upsample_masks = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_convolve_then_upsample_masks(), target);
  }

  // optional float mask_loss_weight = 7 [default = 5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_mask_loss_weight(), target);
  }

  // optional int32 mask_loss_sample_size = 8 [default = 16];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mask_loss_sample_size(), target);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::conv_hyperparams(this), target, stream);
  }

  // optional int32 initial_crop_size = 10 [default = 15];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_initial_crop_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Ssd.MaskHead)
  return target;
}

size_t Ssd_MaskHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Ssd.MaskHead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .object_detection.protos.Hyperparams conv_hyperparams = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv_hyperparams_);
    }

    // optional bool convolve_then_upsample_masks = 6 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 mask_height = 1 [default = 15];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mask_height());
    }

    // optional int32 mask_width = 2 [default = 15];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mask_width());
    }

    // optional bool masks_are_class_agnostic = 3 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 mask_prediction_conv_depth = 4 [default = 256];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mask_prediction_conv_depth());
    }

    // optional int32 mask_prediction_num_conv_layers = 5 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mask_prediction_num_conv_layers());
    }

    // optional float mask_loss_weight = 7 [default = 5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 mask_loss_sample_size = 8 [default = 16];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mask_loss_sample_size());
    }

    // optional int32 initial_crop_size = 10 [default = 15];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_initial_crop_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ssd_MaskHead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Ssd.MaskHead)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssd_MaskHead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ssd_MaskHead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Ssd.MaskHead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Ssd.MaskHead)
    MergeFrom(*source);
  }
}

void Ssd_MaskHead::MergeFrom(const Ssd_MaskHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Ssd.MaskHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from._internal_conv_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      convolve_then_upsample_masks_ = from.convolve_then_upsample_masks_;
    }
    if (cached_has_bits & 0x00000004u) {
      mask_height_ = from.mask_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      mask_width_ = from.mask_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      masks_are_class_agnostic_ = from.masks_are_class_agnostic_;
    }
    if (cached_has_bits & 0x00000020u) {
      mask_prediction_conv_depth_ = from.mask_prediction_conv_depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      mask_prediction_num_conv_layers_ = from.mask_prediction_num_conv_layers_;
    }
    if (cached_has_bits & 0x00000080u) {
      mask_loss_weight_ = from.mask_loss_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      mask_loss_sample_size_ = from.mask_loss_sample_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      initial_crop_size_ = from.initial_crop_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ssd_MaskHead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Ssd.MaskHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssd_MaskHead::CopyFrom(const Ssd_MaskHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Ssd.MaskHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssd_MaskHead::IsInitialized() const {
  return true;
}

void Ssd_MaskHead::InternalSwap(Ssd_MaskHead* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(convolve_then_upsample_masks_, other->convolve_then_upsample_masks_);
  swap(mask_height_, other->mask_height_);
  swap(mask_width_, other->mask_width_);
  swap(masks_are_class_agnostic_, other->masks_are_class_agnostic_);
  swap(mask_prediction_conv_depth_, other->mask_prediction_conv_depth_);
  swap(mask_prediction_num_conv_layers_, other->mask_prediction_num_conv_layers_);
  swap(mask_loss_weight_, other->mask_loss_weight_);
  swap(mask_loss_sample_size_, other->mask_loss_sample_size_);
  swap(initial_crop_size_, other->initial_crop_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ssd_MaskHead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ssd::InitAsDefaultInstance() {
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->image_resizer_ = const_cast< ::object_detection::protos::ImageResizer*>(
      ::object_detection::protos::ImageResizer::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->feature_extractor_ = const_cast< ::object_detection::protos::SsdFeatureExtractor*>(
      ::object_detection::protos::SsdFeatureExtractor::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->box_coder_ = const_cast< ::object_detection::protos::BoxCoder*>(
      ::object_detection::protos::BoxCoder::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->matcher_ = const_cast< ::object_detection::protos::Matcher*>(
      ::object_detection::protos::Matcher::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->similarity_calculator_ = const_cast< ::object_detection::protos::RegionSimilarityCalculator*>(
      ::object_detection::protos::RegionSimilarityCalculator::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->box_predictor_ = const_cast< ::object_detection::protos::BoxPredictor*>(
      ::object_detection::protos::BoxPredictor::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->anchor_generator_ = const_cast< ::object_detection::protos::AnchorGenerator*>(
      ::object_detection::protos::AnchorGenerator::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->post_processing_ = const_cast< ::object_detection::protos::PostProcessing*>(
      ::object_detection::protos::PostProcessing::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->loss_ = const_cast< ::object_detection::protos::Loss*>(
      ::object_detection::protos::Loss::internal_default_instance());
  ::object_detection::protos::_Ssd_default_instance_._instance.get_mutable()->mask_head_config_ = const_cast< ::object_detection::protos::Ssd_MaskHead*>(
      ::object_detection::protos::Ssd_MaskHead::internal_default_instance());
}
class Ssd::_Internal {
 public:
  using HasBits = decltype(std::declval<Ssd>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::object_detection::protos::ImageResizer& image_resizer(const Ssd* msg);
  static void set_has_image_resizer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::object_detection::protos::SsdFeatureExtractor& feature_extractor(const Ssd* msg);
  static void set_has_feature_extractor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::object_detection::protos::BoxCoder& box_coder(const Ssd* msg);
  static void set_has_box_coder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::object_detection::protos::Matcher& matcher(const Ssd* msg);
  static void set_has_matcher(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::object_detection::protos::RegionSimilarityCalculator& similarity_calculator(const Ssd* msg);
  static void set_has_similarity_calculator(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encode_background_as_zeros(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_negative_class_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::object_detection::protos::BoxPredictor& box_predictor(const Ssd* msg);
  static void set_has_box_predictor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::object_detection::protos::AnchorGenerator& anchor_generator(const Ssd* msg);
  static void set_has_anchor_generator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::object_detection::protos::PostProcessing& post_processing(const Ssd* msg);
  static void set_has_post_processing(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_normalize_loss_by_num_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_normalize_loc_loss_by_codesize(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::object_detection::protos::Loss& loss(const Ssd* msg);
  static void set_has_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_freeze_batchnorm(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_inplace_batchnorm_update(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_add_background_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_explicit_background_class(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_use_confidences_as_targets(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_implicit_example_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::object_detection::protos::Ssd_MaskHead& mask_head_config(const Ssd* msg);
  static void set_has_mask_head_config(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::object_detection::protos::ImageResizer&
Ssd::_Internal::image_resizer(const Ssd* msg) {
  return *msg->image_resizer_;
}
const ::object_detection::protos::SsdFeatureExtractor&
Ssd::_Internal::feature_extractor(const Ssd* msg) {
  return *msg->feature_extractor_;
}
const ::object_detection::protos::BoxCoder&
Ssd::_Internal::box_coder(const Ssd* msg) {
  return *msg->box_coder_;
}
const ::object_detection::protos::Matcher&
Ssd::_Internal::matcher(const Ssd* msg) {
  return *msg->matcher_;
}
const ::object_detection::protos::RegionSimilarityCalculator&
Ssd::_Internal::similarity_calculator(const Ssd* msg) {
  return *msg->similarity_calculator_;
}
const ::object_detection::protos::BoxPredictor&
Ssd::_Internal::box_predictor(const Ssd* msg) {
  return *msg->box_predictor_;
}
const ::object_detection::protos::AnchorGenerator&
Ssd::_Internal::anchor_generator(const Ssd* msg) {
  return *msg->anchor_generator_;
}
const ::object_detection::protos::PostProcessing&
Ssd::_Internal::post_processing(const Ssd* msg) {
  return *msg->post_processing_;
}
const ::object_detection::protos::Loss&
Ssd::_Internal::loss(const Ssd* msg) {
  return *msg->loss_;
}
const ::object_detection::protos::Ssd_MaskHead&
Ssd::_Internal::mask_head_config(const Ssd* msg) {
  return *msg->mask_head_config_;
}
void Ssd::clear_image_resizer() {
  if (image_resizer_ != nullptr) image_resizer_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Ssd::clear_box_coder() {
  if (box_coder_ != nullptr) box_coder_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Ssd::clear_matcher() {
  if (matcher_ != nullptr) matcher_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Ssd::clear_similarity_calculator() {
  if (similarity_calculator_ != nullptr) similarity_calculator_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Ssd::clear_box_predictor() {
  if (box_predictor_ != nullptr) box_predictor_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Ssd::clear_anchor_generator() {
  if (anchor_generator_ != nullptr) anchor_generator_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Ssd::clear_post_processing() {
  if (post_processing_ != nullptr) post_processing_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Ssd::clear_loss() {
  if (loss_ != nullptr) loss_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
Ssd::Ssd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Ssd)
}
Ssd::Ssd(const Ssd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      box_input_(from.box_input_),
      class_input_(from.class_input_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_image_resizer()) {
    image_resizer_ = new ::object_detection::protos::ImageResizer(*from.image_resizer_);
  } else {
    image_resizer_ = nullptr;
  }
  if (from._internal_has_feature_extractor()) {
    feature_extractor_ = new ::object_detection::protos::SsdFeatureExtractor(*from.feature_extractor_);
  } else {
    feature_extractor_ = nullptr;
  }
  if (from._internal_has_box_coder()) {
    box_coder_ = new ::object_detection::protos::BoxCoder(*from.box_coder_);
  } else {
    box_coder_ = nullptr;
  }
  if (from._internal_has_matcher()) {
    matcher_ = new ::object_detection::protos::Matcher(*from.matcher_);
  } else {
    matcher_ = nullptr;
  }
  if (from._internal_has_similarity_calculator()) {
    similarity_calculator_ = new ::object_detection::protos::RegionSimilarityCalculator(*from.similarity_calculator_);
  } else {
    similarity_calculator_ = nullptr;
  }
  if (from._internal_has_box_predictor()) {
    box_predictor_ = new ::object_detection::protos::BoxPredictor(*from.box_predictor_);
  } else {
    box_predictor_ = nullptr;
  }
  if (from._internal_has_anchor_generator()) {
    anchor_generator_ = new ::object_detection::protos::AnchorGenerator(*from.anchor_generator_);
  } else {
    anchor_generator_ = nullptr;
  }
  if (from._internal_has_post_processing()) {
    post_processing_ = new ::object_detection::protos::PostProcessing(*from.post_processing_);
  } else {
    post_processing_ = nullptr;
  }
  if (from._internal_has_loss()) {
    loss_ = new ::object_detection::protos::Loss(*from.loss_);
  } else {
    loss_ = nullptr;
  }
  if (from._internal_has_mask_head_config()) {
    mask_head_config_ = new ::object_detection::protos::Ssd_MaskHead(*from.mask_head_config_);
  } else {
    mask_head_config_ = nullptr;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_background_class_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(add_background_class_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Ssd)
}

void Ssd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ssd_object_5fdetection_2fprotos_2fssd_2eproto.base);
  ::memset(&image_resizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_confidences_as_targets_) -
      reinterpret_cast<char*>(&image_resizer_)) + sizeof(use_confidences_as_targets_));
  implicit_example_weight_ = 1;
  negative_class_weight_ = 1;
  normalize_loss_by_num_matches_ = true;
  add_background_class_ = true;
}

Ssd::~Ssd() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Ssd)
  SharedDtor();
}

void Ssd::SharedDtor() {
  if (this != internal_default_instance()) delete image_resizer_;
  if (this != internal_default_instance()) delete feature_extractor_;
  if (this != internal_default_instance()) delete box_coder_;
  if (this != internal_default_instance()) delete matcher_;
  if (this != internal_default_instance()) delete similarity_calculator_;
  if (this != internal_default_instance()) delete box_predictor_;
  if (this != internal_default_instance()) delete anchor_generator_;
  if (this != internal_default_instance()) delete post_processing_;
  if (this != internal_default_instance()) delete loss_;
  if (this != internal_default_instance()) delete mask_head_config_;
}

void Ssd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ssd& Ssd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ssd_object_5fdetection_2fprotos_2fssd_2eproto.base);
  return *internal_default_instance();
}


void Ssd::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Ssd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_input_.Clear();
  class_input_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(image_resizer_ != nullptr);
      image_resizer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(feature_extractor_ != nullptr);
      feature_extractor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(box_coder_ != nullptr);
      box_coder_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(matcher_ != nullptr);
      matcher_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(similarity_calculator_ != nullptr);
      similarity_calculator_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(box_predictor_ != nullptr);
      box_predictor_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(anchor_generator_ != nullptr);
      anchor_generator_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(post_processing_ != nullptr);
      post_processing_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(loss_ != nullptr);
      loss_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(mask_head_config_ != nullptr);
      mask_head_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_background_class_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(explicit_background_class_));
  }
  if (cached_has_bits & 0x001f0000u) {
    use_confidences_as_targets_ = false;
    implicit_example_weight_ = 1;
    negative_class_weight_ = 1;
    normalize_loss_by_num_matches_ = true;
    add_background_class_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ssd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.ImageResizer image_resizer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_resizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.SsdFeatureExtractor feature_extractor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_extractor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.BoxCoder box_coder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_box_coder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Matcher matcher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_matcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.RegionSimilarityCalculator similarity_calculator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_similarity_calculator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.BoxPredictor box_predictor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_box_predictor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.AnchorGenerator anchor_generator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_generator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.PostProcessing post_processing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_processing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool normalize_loss_by_num_matches = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_normalize_loss_by_num_matches(&has_bits);
          normalize_loss_by_num_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Loss loss = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encode_background_as_zeros = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_encode_background_as_zeros(&has_bits);
          encode_background_as_zeros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float negative_class_weight = 13 [default = 1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_negative_class_weight(&has_bits);
          negative_class_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool normalize_loc_loss_by_codesize = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_normalize_loc_loss_by_codesize(&has_bits);
          normalize_loc_loss_by_codesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inplace_batchnorm_update = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_inplace_batchnorm_update(&has_bits);
          inplace_batchnorm_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool freeze_batchnorm = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_freeze_batchnorm(&has_bits);
          freeze_batchnorm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool add_background_class = 21 [default = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_add_background_class(&has_bits);
          add_background_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_confidences_as_targets = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_use_confidences_as_targets(&has_bits);
          use_confidences_as_targets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float implicit_example_weight = 23 [default = 1];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_implicit_example_weight(&has_bits);
          implicit_example_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool explicit_background_class = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_explicit_background_class(&has_bits);
          explicit_background_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Ssd.MaskHead mask_head_config = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask_head_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string box_input = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_box_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.Ssd.box_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string class_input = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_class_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.Ssd.class_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ssd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Ssd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional .object_detection.protos.ImageResizer image_resizer = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image_resizer(this), target, stream);
  }

  // optional .object_detection.protos.SsdFeatureExtractor feature_extractor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::feature_extractor(this), target, stream);
  }

  // optional .object_detection.protos.BoxCoder box_coder = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::box_coder(this), target, stream);
  }

  // optional .object_detection.protos.Matcher matcher = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::matcher(this), target, stream);
  }

  // optional .object_detection.protos.RegionSimilarityCalculator similarity_calculator = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::similarity_calculator(this), target, stream);
  }

  // optional .object_detection.protos.BoxPredictor box_predictor = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::box_predictor(this), target, stream);
  }

  // optional .object_detection.protos.AnchorGenerator anchor_generator = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::anchor_generator(this), target, stream);
  }

  // optional .object_detection.protos.PostProcessing post_processing = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::post_processing(this), target, stream);
  }

  // optional bool normalize_loss_by_num_matches = 10 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_normalize_loss_by_num_matches(), target);
  }

  // optional .object_detection.protos.Loss loss = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::loss(this), target, stream);
  }

  // optional bool encode_background_as_zeros = 12 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_encode_background_as_zeros(), target);
  }

  // optional float negative_class_weight = 13 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_negative_class_weight(), target);
  }

  // optional bool normalize_loc_loss_by_codesize = 14 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_normalize_loc_loss_by_codesize(), target);
  }

  // optional bool inplace_batchnorm_update = 15 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_inplace_batchnorm_update(), target);
  }

  // optional bool freeze_batchnorm = 16 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_freeze_batchnorm(), target);
  }

  // optional bool add_background_class = 21 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_add_background_class(), target);
  }

  // optional bool use_confidences_as_targets = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_use_confidences_as_targets(), target);
  }

  // optional float implicit_example_weight = 23 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_implicit_example_weight(), target);
  }

  // optional bool explicit_background_class = 24 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_explicit_background_class(), target);
  }

  // optional .object_detection.protos.Ssd.MaskHead mask_head_config = 25;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::mask_head_config(this), target, stream);
  }

  // repeated string box_input = 26;
  for (int i = 0, n = this->_internal_box_input_size(); i < n; i++) {
    const auto& s = this->_internal_box_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.Ssd.box_input");
    target = stream->WriteString(26, s, target);
  }

  // repeated string class_input = 27;
  for (int i = 0, n = this->_internal_class_input_size(); i < n; i++) {
    const auto& s = this->_internal_class_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.Ssd.class_input");
    target = stream->WriteString(27, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Ssd)
  return target;
}

size_t Ssd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Ssd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string box_input = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(box_input_.size());
  for (int i = 0, n = box_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      box_input_.Get(i));
  }

  // repeated string class_input = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(class_input_.size());
  for (int i = 0, n = class_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      class_input_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .object_detection.protos.ImageResizer image_resizer = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_resizer_);
    }

    // optional .object_detection.protos.SsdFeatureExtractor feature_extractor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_extractor_);
    }

    // optional .object_detection.protos.BoxCoder box_coder = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_coder_);
    }

    // optional .object_detection.protos.Matcher matcher = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matcher_);
    }

    // optional .object_detection.protos.RegionSimilarityCalculator similarity_calculator = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *similarity_calculator_);
    }

    // optional .object_detection.protos.BoxPredictor box_predictor = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *box_predictor_);
    }

    // optional .object_detection.protos.AnchorGenerator anchor_generator = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anchor_generator_);
    }

    // optional .object_detection.protos.PostProcessing post_processing = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *post_processing_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .object_detection.protos.Loss loss = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loss_);
    }

    // optional .object_detection.protos.Ssd.MaskHead mask_head_config = 25;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mask_head_config_);
    }

    // optional int32 num_classes = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_classes());
    }

    // optional bool encode_background_as_zeros = 12 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool normalize_loc_loss_by_codesize = 14 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool freeze_batchnorm = 16 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool inplace_batchnorm_update = 15 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool explicit_background_class = 24 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool use_confidences_as_targets = 22 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional float implicit_example_weight = 23 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float negative_class_weight = 13 [default = 1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional bool normalize_loss_by_num_matches = 10 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool add_background_class = 21 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ssd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Ssd)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ssd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Ssd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Ssd)
    MergeFrom(*source);
  }
}

void Ssd::MergeFrom(const Ssd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Ssd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_input_.MergeFrom(from.box_input_);
  class_input_.MergeFrom(from.class_input_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_image_resizer()->::object_detection::protos::ImageResizer::MergeFrom(from._internal_image_resizer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_feature_extractor()->::object_detection::protos::SsdFeatureExtractor::MergeFrom(from._internal_feature_extractor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_box_coder()->::object_detection::protos::BoxCoder::MergeFrom(from._internal_box_coder());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_matcher()->::object_detection::protos::Matcher::MergeFrom(from._internal_matcher());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_similarity_calculator()->::object_detection::protos::RegionSimilarityCalculator::MergeFrom(from._internal_similarity_calculator());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_box_predictor()->::object_detection::protos::BoxPredictor::MergeFrom(from._internal_box_predictor());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_anchor_generator()->::object_detection::protos::AnchorGenerator::MergeFrom(from._internal_anchor_generator());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_post_processing()->::object_detection::protos::PostProcessing::MergeFrom(from._internal_post_processing());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_loss()->::object_detection::protos::Loss::MergeFrom(from._internal_loss());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_mask_head_config()->::object_detection::protos::Ssd_MaskHead::MergeFrom(from._internal_mask_head_config());
    }
    if (cached_has_bits & 0x00000400u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000800u) {
      encode_background_as_zeros_ = from.encode_background_as_zeros_;
    }
    if (cached_has_bits & 0x00001000u) {
      normalize_loc_loss_by_codesize_ = from.normalize_loc_loss_by_codesize_;
    }
    if (cached_has_bits & 0x00002000u) {
      freeze_batchnorm_ = from.freeze_batchnorm_;
    }
    if (cached_has_bits & 0x00004000u) {
      inplace_batchnorm_update_ = from.inplace_batchnorm_update_;
    }
    if (cached_has_bits & 0x00008000u) {
      explicit_background_class_ = from.explicit_background_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      use_confidences_as_targets_ = from.use_confidences_as_targets_;
    }
    if (cached_has_bits & 0x00020000u) {
      implicit_example_weight_ = from.implicit_example_weight_;
    }
    if (cached_has_bits & 0x00040000u) {
      negative_class_weight_ = from.negative_class_weight_;
    }
    if (cached_has_bits & 0x00080000u) {
      normalize_loss_by_num_matches_ = from.normalize_loss_by_num_matches_;
    }
    if (cached_has_bits & 0x00100000u) {
      add_background_class_ = from.add_background_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ssd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Ssd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssd::CopyFrom(const Ssd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Ssd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssd::IsInitialized() const {
  return true;
}

void Ssd::InternalSwap(Ssd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  box_input_.InternalSwap(&other->box_input_);
  class_input_.InternalSwap(&other->class_input_);
  swap(image_resizer_, other->image_resizer_);
  swap(feature_extractor_, other->feature_extractor_);
  swap(box_coder_, other->box_coder_);
  swap(matcher_, other->matcher_);
  swap(similarity_calculator_, other->similarity_calculator_);
  swap(box_predictor_, other->box_predictor_);
  swap(anchor_generator_, other->anchor_generator_);
  swap(post_processing_, other->post_processing_);
  swap(loss_, other->loss_);
  swap(mask_head_config_, other->mask_head_config_);
  swap(num_classes_, other->num_classes_);
  swap(encode_background_as_zeros_, other->encode_background_as_zeros_);
  swap(normalize_loc_loss_by_codesize_, other->normalize_loc_loss_by_codesize_);
  swap(freeze_batchnorm_, other->freeze_batchnorm_);
  swap(inplace_batchnorm_update_, other->inplace_batchnorm_update_);
  swap(explicit_background_class_, other->explicit_background_class_);
  swap(use_confidences_as_targets_, other->use_confidences_as_targets_);
  swap(implicit_example_weight_, other->implicit_example_weight_);
  swap(negative_class_weight_, other->negative_class_weight_);
  swap(normalize_loss_by_num_matches_, other->normalize_loss_by_num_matches_);
  swap(add_background_class_, other->add_background_class_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ssd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsdFeatureExtractor::InitAsDefaultInstance() {
  ::object_detection::protos::_SsdFeatureExtractor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  ::object_detection::protos::_SsdFeatureExtractor_default_instance_._instance.get_mutable()->fpn_ = const_cast< ::object_detection::protos::FeaturePyramidNetworks*>(
      ::object_detection::protos::FeaturePyramidNetworks::internal_default_instance());
}
class SsdFeatureExtractor::_Internal {
 public:
  using HasBits = decltype(std::declval<SsdFeatureExtractor>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_depth_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_min_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::object_detection::protos::Hyperparams& conv_hyperparams(const SsdFeatureExtractor* msg);
  static void set_has_conv_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_base_feature_extractor_hyperparams(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pad_to_multiple(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_use_explicit_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_depthwise(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::object_detection::protos::FeaturePyramidNetworks& fpn(const SsdFeatureExtractor* msg);
  static void set_has_fpn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::object_detection::protos::Hyperparams&
SsdFeatureExtractor::_Internal::conv_hyperparams(const SsdFeatureExtractor* msg) {
  return *msg->conv_hyperparams_;
}
const ::object_detection::protos::FeaturePyramidNetworks&
SsdFeatureExtractor::_Internal::fpn(const SsdFeatureExtractor* msg) {
  return *msg->fpn_;
}
void SsdFeatureExtractor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != nullptr) conv_hyperparams_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SsdFeatureExtractor::SsdFeatureExtractor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SsdFeatureExtractor)
}
SsdFeatureExtractor::SsdFeatureExtractor(const SsdFeatureExtractor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from._internal_has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = nullptr;
  }
  if (from._internal_has_fpn()) {
    fpn_ = new ::object_detection::protos::FeaturePyramidNetworks(*from.fpn_);
  } else {
    fpn_ = nullptr;
  }
  ::memcpy(&override_base_feature_extractor_hyperparams_, &from.override_base_feature_extractor_hyperparams_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_depth_) -
    reinterpret_cast<char*>(&override_base_feature_extractor_hyperparams_)) + sizeof(min_depth_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SsdFeatureExtractor)
}

void SsdFeatureExtractor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SsdFeatureExtractor_object_5fdetection_2fprotos_2fssd_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&conv_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_depthwise_) -
      reinterpret_cast<char*>(&conv_hyperparams_)) + sizeof(use_depthwise_));
  pad_to_multiple_ = 1;
  depth_multiplier_ = 1;
  min_depth_ = 16;
}

SsdFeatureExtractor::~SsdFeatureExtractor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SsdFeatureExtractor)
  SharedDtor();
}

void SsdFeatureExtractor::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conv_hyperparams_;
  if (this != internal_default_instance()) delete fpn_;
}

void SsdFeatureExtractor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsdFeatureExtractor& SsdFeatureExtractor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsdFeatureExtractor_object_5fdetection_2fprotos_2fssd_2eproto.base);
  return *internal_default_instance();
}


void SsdFeatureExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SsdFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(conv_hyperparams_ != nullptr);
      conv_hyperparams_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fpn_ != nullptr);
      fpn_->Clear();
    }
  }
  ::memset(&override_base_feature_extractor_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_depthwise_) -
      reinterpret_cast<char*>(&override_base_feature_extractor_hyperparams_)) + sizeof(use_depthwise_));
  if (cached_has_bits & 0x000000c0u) {
    pad_to_multiple_ = 1;
    depth_multiplier_ = 1;
  }
  min_depth_ = 16;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SsdFeatureExtractor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "object_detection.protos.SsdFeatureExtractor.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float depth_multiplier = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_depth_multiplier(&has_bits);
          depth_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 min_depth = 3 [default = 16];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_depth(&has_bits);
          min_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv_hyperparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pad_to_multiple = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pad_to_multiple(&has_bits);
          pad_to_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_explicit_padding = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_explicit_padding(&has_bits);
          use_explicit_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_depthwise = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_use_depthwise(&has_bits);
          use_depthwise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_base_feature_extractor_hyperparams = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_override_base_feature_extractor_hyperparams(&has_bits);
          override_base_feature_extractor_hyperparams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .object_detection.protos.FeaturePyramidNetworks fpn = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fpn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsdFeatureExtractor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SsdFeatureExtractor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "object_detection.protos.SsdFeatureExtractor.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional float depth_multiplier = 2 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_depth_multiplier(), target);
  }

  // optional int32 min_depth = 3 [default = 16];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_depth(), target);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::conv_hyperparams(this), target, stream);
  }

  // optional int32 pad_to_multiple = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pad_to_multiple(), target);
  }

  // optional bool use_explicit_padding = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_use_explicit_padding(), target);
  }

  // optional bool use_depthwise = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_use_depthwise(), target);
  }

  // optional bool override_base_feature_extractor_hyperparams = 9 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_override_base_feature_extractor_hyperparams(), target);
  }

  // optional .object_detection.protos.FeaturePyramidNetworks fpn = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::fpn(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SsdFeatureExtractor)
  return target;
}

size_t SsdFeatureExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SsdFeatureExtractor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional .object_detection.protos.Hyperparams conv_hyperparams = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv_hyperparams_);
    }

    // optional .object_detection.protos.FeaturePyramidNetworks fpn = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fpn_);
    }

    // optional bool override_base_feature_extractor_hyperparams = 9 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool use_explicit_padding = 7 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool use_depthwise = 8 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 pad_to_multiple = 5 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pad_to_multiple());
    }

    // optional float depth_multiplier = 2 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional int32 min_depth = 3 [default = 16];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsdFeatureExtractor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SsdFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const SsdFeatureExtractor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsdFeatureExtractor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SsdFeatureExtractor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SsdFeatureExtractor)
    MergeFrom(*source);
  }
}

void SsdFeatureExtractor::MergeFrom(const SsdFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SsdFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from._internal_conv_hyperparams());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_fpn()->::object_detection::protos::FeaturePyramidNetworks::MergeFrom(from._internal_fpn());
    }
    if (cached_has_bits & 0x00000008u) {
      override_base_feature_extractor_hyperparams_ = from.override_base_feature_extractor_hyperparams_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_explicit_padding_ = from.use_explicit_padding_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_depthwise_ = from.use_depthwise_;
    }
    if (cached_has_bits & 0x00000040u) {
      pad_to_multiple_ = from.pad_to_multiple_;
    }
    if (cached_has_bits & 0x00000080u) {
      depth_multiplier_ = from.depth_multiplier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_min_depth(from._internal_min_depth());
  }
}

void SsdFeatureExtractor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SsdFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsdFeatureExtractor::CopyFrom(const SsdFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SsdFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsdFeatureExtractor::IsInitialized() const {
  return true;
}

void SsdFeatureExtractor::InternalSwap(SsdFeatureExtractor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(fpn_, other->fpn_);
  swap(override_base_feature_extractor_hyperparams_, other->override_base_feature_extractor_hyperparams_);
  swap(use_explicit_padding_, other->use_explicit_padding_);
  swap(use_depthwise_, other->use_depthwise_);
  swap(pad_to_multiple_, other->pad_to_multiple_);
  swap(depth_multiplier_, other->depth_multiplier_);
  swap(min_depth_, other->min_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsdFeatureExtractor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeaturePyramidNetworks::InitAsDefaultInstance() {
}
class FeaturePyramidNetworks::_Internal {
 public:
  using HasBits = decltype(std::declval<FeaturePyramidNetworks>()._has_bits_);
  static void set_has_min_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_additional_layer_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FeaturePyramidNetworks::FeaturePyramidNetworks()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FeaturePyramidNetworks)
}
FeaturePyramidNetworks::FeaturePyramidNetworks(const FeaturePyramidNetworks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&additional_layer_depth_, &from.additional_layer_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&additional_layer_depth_)) + sizeof(max_level_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FeaturePyramidNetworks)
}

void FeaturePyramidNetworks::SharedCtor() {
  additional_layer_depth_ = 256;
  min_level_ = 3;
  max_level_ = 7;
}

FeaturePyramidNetworks::~FeaturePyramidNetworks() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FeaturePyramidNetworks)
  SharedDtor();
}

void FeaturePyramidNetworks::SharedDtor() {
}

void FeaturePyramidNetworks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeaturePyramidNetworks& FeaturePyramidNetworks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeaturePyramidNetworks_object_5fdetection_2fprotos_2fssd_2eproto.base);
  return *internal_default_instance();
}


void FeaturePyramidNetworks::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FeaturePyramidNetworks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    additional_layer_depth_ = 256;
    min_level_ = 3;
    max_level_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FeaturePyramidNetworks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 min_level = 1 [default = 3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_level(&has_bits);
          min_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_level = 2 [default = 7];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_level(&has_bits);
          max_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 additional_layer_depth = 3 [default = 256];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_additional_layer_depth(&has_bits);
          additional_layer_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeaturePyramidNetworks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FeaturePyramidNetworks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_level = 1 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_min_level(), target);
  }

  // optional int32 max_level = 2 [default = 7];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_level(), target);
  }

  // optional int32 additional_layer_depth = 3 [default = 256];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_additional_layer_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FeaturePyramidNetworks)
  return target;
}

size_t FeaturePyramidNetworks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FeaturePyramidNetworks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 additional_layer_depth = 3 [default = 256];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_additional_layer_depth());
    }

    // optional int32 min_level = 1 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_level());
    }

    // optional int32 max_level = 2 [default = 7];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeaturePyramidNetworks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FeaturePyramidNetworks)
  GOOGLE_DCHECK_NE(&from, this);
  const FeaturePyramidNetworks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeaturePyramidNetworks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FeaturePyramidNetworks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FeaturePyramidNetworks)
    MergeFrom(*source);
  }
}

void FeaturePyramidNetworks::MergeFrom(const FeaturePyramidNetworks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FeaturePyramidNetworks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      additional_layer_depth_ = from.additional_layer_depth_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_level_ = from.min_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_level_ = from.max_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeaturePyramidNetworks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FeaturePyramidNetworks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturePyramidNetworks::CopyFrom(const FeaturePyramidNetworks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FeaturePyramidNetworks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturePyramidNetworks::IsInitialized() const {
  return true;
}

void FeaturePyramidNetworks::InternalSwap(FeaturePyramidNetworks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(additional_layer_depth_, other->additional_layer_depth_);
  swap(min_level_, other->min_level_);
  swap(max_level_, other->max_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeaturePyramidNetworks::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::object_detection::protos::Ssd_MaskHead* Arena::CreateMaybeMessage< ::object_detection::protos::Ssd_MaskHead >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Ssd_MaskHead >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::Ssd* Arena::CreateMaybeMessage< ::object_detection::protos::Ssd >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::Ssd >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::SsdFeatureExtractor* Arena::CreateMaybeMessage< ::object_detection::protos::SsdFeatureExtractor >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::SsdFeatureExtractor >(arena);
}
template<> PROTOBUF_NOINLINE ::object_detection::protos::FeaturePyramidNetworks* Arena::CreateMaybeMessage< ::object_detection::protos::FeaturePyramidNetworks >(Arena* arena) {
  return Arena::CreateInternal< ::object_detection::protos::FeaturePyramidNetworks >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
