// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/input_reader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2finput_5freader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2finput_5freader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_5fdetection_2fprotos_2finput_5freader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_5fdetection_2fprotos_2finput_5freader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto;
namespace object_detection {
namespace protos {
class ExternalInputReader;
class ExternalInputReaderDefaultTypeInternal;
extern ExternalInputReaderDefaultTypeInternal _ExternalInputReader_default_instance_;
class InputReader;
class InputReaderDefaultTypeInternal;
extern InputReaderDefaultTypeInternal _InputReader_default_instance_;
class TFRecordInputReader;
class TFRecordInputReaderDefaultTypeInternal;
extern TFRecordInputReaderDefaultTypeInternal _TFRecordInputReader_default_instance_;
}  // namespace protos
}  // namespace object_detection
PROTOBUF_NAMESPACE_OPEN
template<> ::object_detection::protos::ExternalInputReader* Arena::CreateMaybeMessage<::object_detection::protos::ExternalInputReader>(Arena*);
template<> ::object_detection::protos::InputReader* Arena::CreateMaybeMessage<::object_detection::protos::InputReader>(Arena*);
template<> ::object_detection::protos::TFRecordInputReader* Arena::CreateMaybeMessage<::object_detection::protos::TFRecordInputReader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace object_detection {
namespace protos {

enum InstanceMaskType : int {
  DEFAULT = 0,
  NUMERICAL_MASKS = 1,
  PNG_MASKS = 2
};
bool InstanceMaskType_IsValid(int value);
constexpr InstanceMaskType InstanceMaskType_MIN = DEFAULT;
constexpr InstanceMaskType InstanceMaskType_MAX = PNG_MASKS;
constexpr int InstanceMaskType_ARRAYSIZE = InstanceMaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstanceMaskType_descriptor();
template<typename T>
inline const std::string& InstanceMaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InstanceMaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InstanceMaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InstanceMaskType_descriptor(), enum_t_value);
}
inline bool InstanceMaskType_Parse(
    const std::string& name, InstanceMaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InstanceMaskType>(
    InstanceMaskType_descriptor(), name, value);
}
// ===================================================================

class InputReader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.InputReader) */ {
 public:
  InputReader();
  virtual ~InputReader();

  InputReader(const InputReader& from);
  InputReader(InputReader&& from) noexcept
    : InputReader() {
    *this = ::std::move(from);
  }

  inline InputReader& operator=(const InputReader& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputReader& operator=(InputReader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputReader& default_instance();

  enum InputReaderCase {
    kTfRecordInputReader = 8,
    kExternalInputReader = 9,
    INPUT_READER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputReader* internal_default_instance() {
    return reinterpret_cast<const InputReader*>(
               &_InputReader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputReader& a, InputReader& b) {
    a.Swap(&b);
  }
  inline void Swap(InputReader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputReader* New() const final {
    return CreateMaybeMessage<InputReader>(nullptr);
  }

  InputReader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputReader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputReader& from);
  void MergeFrom(const InputReader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputReader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.InputReader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelMapPathFieldNumber = 1,
    kNameFieldNumber = 23,
    kNumEpochsFieldNumber = 5,
    kLoadInstanceMasksFieldNumber = 7,
    kUseDisplayNameFieldNumber = 17,
    kNumKeypointsFieldNumber = 16,
    kNumAdditionalChannelsFieldNumber = 18,
    kShuffleFieldNumber = 2,
    kQueueCapacityFieldNumber = 3,
    kMinAfterDequeueFieldNumber = 4,
    kNumReadersFieldNumber = 6,
    kMaskTypeFieldNumber = 10,
    kShuffleBufferSizeFieldNumber = 11,
    kFilenamesShuffleBufferSizeFieldNumber = 12,
    kPrefetchSizeFieldNumber = 13,
    kNumParallelMapCallsFieldNumber = 14,
    kReadBlockLengthFieldNumber = 15,
    kNumParallelBatchesFieldNumber = 19,
    kNumPrefetchBatchesFieldNumber = 20,
    kMaxNumberOfBoxesFieldNumber = 21,
    kSample1OfNExamplesFieldNumber = 22,
    kTfRecordInputReaderFieldNumber = 8,
    kExternalInputReaderFieldNumber = 9,
  };
  // optional string label_map_path = 1 [default = ""];
  bool has_label_map_path() const;
  private:
  bool _internal_has_label_map_path() const;
  public:
  void clear_label_map_path();
  const std::string& label_map_path() const;
  void set_label_map_path(const std::string& value);
  void set_label_map_path(std::string&& value);
  void set_label_map_path(const char* value);
  void set_label_map_path(const char* value, size_t size);
  std::string* mutable_label_map_path();
  std::string* release_label_map_path();
  void set_allocated_label_map_path(std::string* label_map_path);
  private:
  const std::string& _internal_label_map_path() const;
  void _internal_set_label_map_path(const std::string& value);
  std::string* _internal_mutable_label_map_path();
  public:

  // optional string name = 23 [default = ""];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 num_epochs = 5 [default = 0];
  bool has_num_epochs() const;
  private:
  bool _internal_has_num_epochs() const;
  public:
  void clear_num_epochs();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_epochs() const;
  void set_num_epochs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_epochs() const;
  void _internal_set_num_epochs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool load_instance_masks = 7 [default = false];
  bool has_load_instance_masks() const;
  private:
  bool _internal_has_load_instance_masks() const;
  public:
  void clear_load_instance_masks();
  bool load_instance_masks() const;
  void set_load_instance_masks(bool value);
  private:
  bool _internal_load_instance_masks() const;
  void _internal_set_load_instance_masks(bool value);
  public:

  // optional bool use_display_name = 17 [default = false];
  bool has_use_display_name() const;
  private:
  bool _internal_has_use_display_name() const;
  public:
  void clear_use_display_name();
  bool use_display_name() const;
  void set_use_display_name(bool value);
  private:
  bool _internal_use_display_name() const;
  void _internal_set_use_display_name(bool value);
  public:

  // optional uint32 num_keypoints = 16 [default = 0];
  bool has_num_keypoints() const;
  private:
  bool _internal_has_num_keypoints() const;
  public:
  void clear_num_keypoints();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_keypoints() const;
  void set_num_keypoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_keypoints() const;
  void _internal_set_num_keypoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 num_additional_channels = 18 [default = 0];
  bool has_num_additional_channels() const;
  private:
  bool _internal_has_num_additional_channels() const;
  public:
  void clear_num_additional_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 num_additional_channels() const;
  void set_num_additional_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_additional_channels() const;
  void _internal_set_num_additional_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool shuffle = 2 [default = true];
  bool has_shuffle() const;
  private:
  bool _internal_has_shuffle() const;
  public:
  void clear_shuffle();
  bool shuffle() const;
  void set_shuffle(bool value);
  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);
  public:

  // optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
  PROTOBUF_DEPRECATED bool has_queue_capacity() const;
  private:
  bool _internal_has_queue_capacity() const;
  public:
  PROTOBUF_DEPRECATED void clear_queue_capacity();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 queue_capacity() const;
  PROTOBUF_DEPRECATED void set_queue_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_queue_capacity() const;
  void _internal_set_queue_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
  PROTOBUF_DEPRECATED bool has_min_after_dequeue() const;
  private:
  bool _internal_has_min_after_dequeue() const;
  public:
  PROTOBUF_DEPRECATED void clear_min_after_dequeue();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 min_after_dequeue() const;
  PROTOBUF_DEPRECATED void set_min_after_dequeue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_after_dequeue() const;
  void _internal_set_min_after_dequeue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_readers = 6 [default = 64];
  bool has_num_readers() const;
  private:
  bool _internal_has_num_readers() const;
  public:
  void clear_num_readers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_readers() const;
  void set_num_readers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_readers() const;
  void _internal_set_num_readers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
  bool has_mask_type() const;
  private:
  bool _internal_has_mask_type() const;
  public:
  void clear_mask_type();
  ::object_detection::protos::InstanceMaskType mask_type() const;
  void set_mask_type(::object_detection::protos::InstanceMaskType value);
  private:
  ::object_detection::protos::InstanceMaskType _internal_mask_type() const;
  void _internal_set_mask_type(::object_detection::protos::InstanceMaskType value);
  public:

  // optional uint32 shuffle_buffer_size = 11 [default = 2048];
  bool has_shuffle_buffer_size() const;
  private:
  bool _internal_has_shuffle_buffer_size() const;
  public:
  void clear_shuffle_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 shuffle_buffer_size() const;
  void set_shuffle_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shuffle_buffer_size() const;
  void _internal_set_shuffle_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
  bool has_filenames_shuffle_buffer_size() const;
  private:
  bool _internal_has_filenames_shuffle_buffer_size() const;
  public:
  void clear_filenames_shuffle_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 filenames_shuffle_buffer_size() const;
  void set_filenames_shuffle_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filenames_shuffle_buffer_size() const;
  void _internal_set_filenames_shuffle_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
  PROTOBUF_DEPRECATED bool has_prefetch_size() const;
  private:
  bool _internal_has_prefetch_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_prefetch_size();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 prefetch_size() const;
  PROTOBUF_DEPRECATED void set_prefetch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefetch_size() const;
  void _internal_set_prefetch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
  PROTOBUF_DEPRECATED bool has_num_parallel_map_calls() const;
  private:
  bool _internal_has_num_parallel_map_calls() const;
  public:
  PROTOBUF_DEPRECATED void clear_num_parallel_map_calls();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 num_parallel_map_calls() const;
  PROTOBUF_DEPRECATED void set_num_parallel_map_calls(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_parallel_map_calls() const;
  void _internal_set_num_parallel_map_calls(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 read_block_length = 15 [default = 32];
  bool has_read_block_length() const;
  private:
  bool _internal_has_read_block_length() const;
  public:
  void clear_read_block_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 read_block_length() const;
  void set_read_block_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_read_block_length() const;
  void _internal_set_read_block_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_parallel_batches = 19 [default = 8];
  bool has_num_parallel_batches() const;
  private:
  bool _internal_has_num_parallel_batches() const;
  public:
  void clear_num_parallel_batches();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_parallel_batches() const;
  void set_num_parallel_batches(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_parallel_batches() const;
  void _internal_set_num_parallel_batches(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 num_prefetch_batches = 20 [default = 2];
  bool has_num_prefetch_batches() const;
  private:
  bool _internal_has_num_prefetch_batches() const;
  public:
  void clear_num_prefetch_batches();
  ::PROTOBUF_NAMESPACE_ID::int32 num_prefetch_batches() const;
  void set_num_prefetch_batches(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_prefetch_batches() const;
  void _internal_set_num_prefetch_batches(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_number_of_boxes = 21 [default = 100];
  bool has_max_number_of_boxes() const;
  private:
  bool _internal_has_max_number_of_boxes() const;
  public:
  void clear_max_number_of_boxes();
  ::PROTOBUF_NAMESPACE_ID::int32 max_number_of_boxes() const;
  void set_max_number_of_boxes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_number_of_boxes() const;
  void _internal_set_max_number_of_boxes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 sample_1_of_n_examples = 22 [default = 1];
  bool has_sample_1_of_n_examples() const;
  private:
  bool _internal_has_sample_1_of_n_examples() const;
  public:
  void clear_sample_1_of_n_examples();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_1_of_n_examples() const;
  void set_sample_1_of_n_examples(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_1_of_n_examples() const;
  void _internal_set_sample_1_of_n_examples(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .object_detection.protos.TFRecordInputReader tf_record_input_reader = 8;
  bool has_tf_record_input_reader() const;
  private:
  bool _internal_has_tf_record_input_reader() const;
  public:
  void clear_tf_record_input_reader();
  const ::object_detection::protos::TFRecordInputReader& tf_record_input_reader() const;
  ::object_detection::protos::TFRecordInputReader* release_tf_record_input_reader();
  ::object_detection::protos::TFRecordInputReader* mutable_tf_record_input_reader();
  void set_allocated_tf_record_input_reader(::object_detection::protos::TFRecordInputReader* tf_record_input_reader);
  private:
  const ::object_detection::protos::TFRecordInputReader& _internal_tf_record_input_reader() const;
  ::object_detection::protos::TFRecordInputReader* _internal_mutable_tf_record_input_reader();
  public:

  // optional .object_detection.protos.ExternalInputReader external_input_reader = 9;
  bool has_external_input_reader() const;
  private:
  bool _internal_has_external_input_reader() const;
  public:
  void clear_external_input_reader();
  const ::object_detection::protos::ExternalInputReader& external_input_reader() const;
  ::object_detection::protos::ExternalInputReader* release_external_input_reader();
  ::object_detection::protos::ExternalInputReader* mutable_external_input_reader();
  void set_allocated_external_input_reader(::object_detection::protos::ExternalInputReader* external_input_reader);
  private:
  const ::object_detection::protos::ExternalInputReader& _internal_external_input_reader() const;
  ::object_detection::protos::ExternalInputReader* _internal_mutable_external_input_reader();
  public:

  void clear_input_reader();
  InputReaderCase input_reader_case() const;
  // @@protoc_insertion_point(class_scope:object_detection.protos.InputReader)
 private:
  class _Internal;
  void set_has_tf_record_input_reader();
  void set_has_external_input_reader();

  inline bool has_input_reader() const;
  inline void clear_has_input_reader();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_map_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_epochs_;
  bool load_instance_masks_;
  bool use_display_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_keypoints_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_additional_channels_;
  bool shuffle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 queue_capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_after_dequeue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_readers_;
  int mask_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shuffle_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filenames_shuffle_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefetch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_parallel_map_calls_;
  ::PROTOBUF_NAMESPACE_ID::uint32 read_block_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_parallel_batches_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_prefetch_batches_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_number_of_boxes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_1_of_n_examples_;
  union InputReaderUnion {
    InputReaderUnion() {}
    ::object_detection::protos::TFRecordInputReader* tf_record_input_reader_;
    ::object_detection::protos::ExternalInputReader* external_input_reader_;
  } input_reader_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_object_5fdetection_2fprotos_2finput_5freader_2eproto;
};
// -------------------------------------------------------------------

class TFRecordInputReader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.TFRecordInputReader) */ {
 public:
  TFRecordInputReader();
  virtual ~TFRecordInputReader();

  TFRecordInputReader(const TFRecordInputReader& from);
  TFRecordInputReader(TFRecordInputReader&& from) noexcept
    : TFRecordInputReader() {
    *this = ::std::move(from);
  }

  inline TFRecordInputReader& operator=(const TFRecordInputReader& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFRecordInputReader& operator=(TFRecordInputReader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TFRecordInputReader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFRecordInputReader* internal_default_instance() {
    return reinterpret_cast<const TFRecordInputReader*>(
               &_TFRecordInputReader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TFRecordInputReader& a, TFRecordInputReader& b) {
    a.Swap(&b);
  }
  inline void Swap(TFRecordInputReader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFRecordInputReader* New() const final {
    return CreateMaybeMessage<TFRecordInputReader>(nullptr);
  }

  TFRecordInputReader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFRecordInputReader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFRecordInputReader& from);
  void MergeFrom(const TFRecordInputReader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFRecordInputReader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.TFRecordInputReader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputPathFieldNumber = 1,
  };
  // repeated string input_path = 1;
  int input_path_size() const;
  private:
  int _internal_input_path_size() const;
  public:
  void clear_input_path();
  const std::string& input_path(int index) const;
  std::string* mutable_input_path(int index);
  void set_input_path(int index, const std::string& value);
  void set_input_path(int index, std::string&& value);
  void set_input_path(int index, const char* value);
  void set_input_path(int index, const char* value, size_t size);
  std::string* add_input_path();
  void add_input_path(const std::string& value);
  void add_input_path(std::string&& value);
  void add_input_path(const char* value);
  void add_input_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_path();
  private:
  const std::string& _internal_input_path(int index) const;
  std::string* _internal_add_input_path();
  public:

  // @@protoc_insertion_point(class_scope:object_detection.protos.TFRecordInputReader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_path_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2finput_5freader_2eproto;
};
// -------------------------------------------------------------------

class ExternalInputReader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.ExternalInputReader) */ {
 public:
  ExternalInputReader();
  virtual ~ExternalInputReader();

  ExternalInputReader(const ExternalInputReader& from);
  ExternalInputReader(ExternalInputReader&& from) noexcept
    : ExternalInputReader() {
    *this = ::std::move(from);
  }

  inline ExternalInputReader& operator=(const ExternalInputReader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalInputReader& operator=(ExternalInputReader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExternalInputReader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalInputReader* internal_default_instance() {
    return reinterpret_cast<const ExternalInputReader*>(
               &_ExternalInputReader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExternalInputReader& a, ExternalInputReader& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalInputReader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalInputReader* New() const final {
    return CreateMaybeMessage<ExternalInputReader>(nullptr);
  }

  ExternalInputReader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalInputReader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExternalInputReader& from);
  void MergeFrom(const ExternalInputReader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalInputReader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "object_detection.protos.ExternalInputReader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto);
    return ::descriptor_table_object_5fdetection_2fprotos_2finput_5freader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ExternalInputReader)
  // @@protoc_insertion_point(class_scope:object_detection.protos.ExternalInputReader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fdetection_2fprotos_2finput_5freader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputReader

// optional string name = 23 [default = ""];
inline bool InputReader::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InputReader::has_name() const {
  return _internal_has_name();
}
inline void InputReader::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InputReader::name() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.name)
  return _internal_name();
}
inline void InputReader::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.name)
}
inline std::string* InputReader::mutable_name() {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.InputReader.name)
  return _internal_mutable_name();
}
inline const std::string& InputReader::_internal_name() const {
  return name_.GetNoArena();
}
inline void InputReader::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InputReader::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.InputReader.name)
}
inline void InputReader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.InputReader.name)
}
inline void InputReader::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.InputReader.name)
}
inline std::string* InputReader::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputReader::release_name() {
  // @@protoc_insertion_point(field_release:object_detection.protos.InputReader.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputReader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.InputReader.name)
}

// optional string label_map_path = 1 [default = ""];
inline bool InputReader::_internal_has_label_map_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InputReader::has_label_map_path() const {
  return _internal_has_label_map_path();
}
inline void InputReader::clear_label_map_path() {
  label_map_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputReader::label_map_path() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.label_map_path)
  return _internal_label_map_path();
}
inline void InputReader::set_label_map_path(const std::string& value) {
  _internal_set_label_map_path(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.label_map_path)
}
inline std::string* InputReader::mutable_label_map_path() {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.InputReader.label_map_path)
  return _internal_mutable_label_map_path();
}
inline const std::string& InputReader::_internal_label_map_path() const {
  return label_map_path_.GetNoArena();
}
inline void InputReader::_internal_set_label_map_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_map_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InputReader::set_label_map_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_map_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.InputReader.label_map_path)
}
inline void InputReader::set_label_map_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_map_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.InputReader.label_map_path)
}
inline void InputReader::set_label_map_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_map_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.InputReader.label_map_path)
}
inline std::string* InputReader::_internal_mutable_label_map_path() {
  _has_bits_[0] |= 0x00000001u;
  return label_map_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputReader::release_label_map_path() {
  // @@protoc_insertion_point(field_release:object_detection.protos.InputReader.label_map_path)
  if (!_internal_has_label_map_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_map_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputReader::set_allocated_label_map_path(std::string* label_map_path) {
  if (label_map_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_map_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_map_path);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.InputReader.label_map_path)
}

// optional bool shuffle = 2 [default = true];
inline bool InputReader::_internal_has_shuffle() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool InputReader::has_shuffle() const {
  return _internal_has_shuffle();
}
inline void InputReader::clear_shuffle() {
  shuffle_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool InputReader::_internal_shuffle() const {
  return shuffle_;
}
inline bool InputReader::shuffle() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.shuffle)
  return _internal_shuffle();
}
inline void InputReader::_internal_set_shuffle(bool value) {
  _has_bits_[0] |= 0x00000080u;
  shuffle_ = value;
}
inline void InputReader::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.shuffle)
}

// optional uint32 shuffle_buffer_size = 11 [default = 2048];
inline bool InputReader::_internal_has_shuffle_buffer_size() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool InputReader::has_shuffle_buffer_size() const {
  return _internal_has_shuffle_buffer_size();
}
inline void InputReader::clear_shuffle_buffer_size() {
  shuffle_buffer_size_ = 2048u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_shuffle_buffer_size() const {
  return shuffle_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::shuffle_buffer_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.shuffle_buffer_size)
  return _internal_shuffle_buffer_size();
}
inline void InputReader::_internal_set_shuffle_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  shuffle_buffer_size_ = value;
}
inline void InputReader::set_shuffle_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shuffle_buffer_size(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.shuffle_buffer_size)
}

// optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
inline bool InputReader::_internal_has_filenames_shuffle_buffer_size() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool InputReader::has_filenames_shuffle_buffer_size() const {
  return _internal_has_filenames_shuffle_buffer_size();
}
inline void InputReader::clear_filenames_shuffle_buffer_size() {
  filenames_shuffle_buffer_size_ = 100u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_filenames_shuffle_buffer_size() const {
  return filenames_shuffle_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::filenames_shuffle_buffer_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.filenames_shuffle_buffer_size)
  return _internal_filenames_shuffle_buffer_size();
}
inline void InputReader::_internal_set_filenames_shuffle_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  filenames_shuffle_buffer_size_ = value;
}
inline void InputReader::set_filenames_shuffle_buffer_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filenames_shuffle_buffer_size(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.filenames_shuffle_buffer_size)
}

// optional uint32 num_epochs = 5 [default = 0];
inline bool InputReader::_internal_has_num_epochs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InputReader::has_num_epochs() const {
  return _internal_has_num_epochs();
}
inline void InputReader::clear_num_epochs() {
  num_epochs_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_num_epochs() const {
  return num_epochs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::num_epochs() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_epochs)
  return _internal_num_epochs();
}
inline void InputReader::_internal_set_num_epochs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_epochs_ = value;
}
inline void InputReader::set_num_epochs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_epochs(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_epochs)
}

// optional uint32 sample_1_of_n_examples = 22 [default = 1];
inline bool InputReader::_internal_has_sample_1_of_n_examples() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool InputReader::has_sample_1_of_n_examples() const {
  return _internal_has_sample_1_of_n_examples();
}
inline void InputReader::clear_sample_1_of_n_examples() {
  sample_1_of_n_examples_ = 1u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_sample_1_of_n_examples() const {
  return sample_1_of_n_examples_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::sample_1_of_n_examples() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.sample_1_of_n_examples)
  return _internal_sample_1_of_n_examples();
}
inline void InputReader::_internal_set_sample_1_of_n_examples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  sample_1_of_n_examples_ = value;
}
inline void InputReader::set_sample_1_of_n_examples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_1_of_n_examples(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.sample_1_of_n_examples)
}

// optional uint32 num_readers = 6 [default = 64];
inline bool InputReader::_internal_has_num_readers() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool InputReader::has_num_readers() const {
  return _internal_has_num_readers();
}
inline void InputReader::clear_num_readers() {
  num_readers_ = 64u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_num_readers() const {
  return num_readers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::num_readers() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_readers)
  return _internal_num_readers();
}
inline void InputReader::_internal_set_num_readers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  num_readers_ = value;
}
inline void InputReader::set_num_readers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_readers(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_readers)
}

// optional uint32 num_parallel_batches = 19 [default = 8];
inline bool InputReader::_internal_has_num_parallel_batches() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool InputReader::has_num_parallel_batches() const {
  return _internal_has_num_parallel_batches();
}
inline void InputReader::clear_num_parallel_batches() {
  num_parallel_batches_ = 8u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_num_parallel_batches() const {
  return num_parallel_batches_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::num_parallel_batches() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_parallel_batches)
  return _internal_num_parallel_batches();
}
inline void InputReader::_internal_set_num_parallel_batches(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  num_parallel_batches_ = value;
}
inline void InputReader::set_num_parallel_batches(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_parallel_batches(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_parallel_batches)
}

// optional int32 num_prefetch_batches = 20 [default = 2];
inline bool InputReader::_internal_has_num_prefetch_batches() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool InputReader::has_num_prefetch_batches() const {
  return _internal_has_num_prefetch_batches();
}
inline void InputReader::clear_num_prefetch_batches() {
  num_prefetch_batches_ = 2;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputReader::_internal_num_prefetch_batches() const {
  return num_prefetch_batches_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputReader::num_prefetch_batches() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_prefetch_batches)
  return _internal_num_prefetch_batches();
}
inline void InputReader::_internal_set_num_prefetch_batches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  num_prefetch_batches_ = value;
}
inline void InputReader::set_num_prefetch_batches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_prefetch_batches(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_prefetch_batches)
}

// optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
inline bool InputReader::_internal_has_queue_capacity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool InputReader::has_queue_capacity() const {
  return _internal_has_queue_capacity();
}
inline void InputReader::clear_queue_capacity() {
  queue_capacity_ = 2000u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_queue_capacity() const {
  return queue_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::queue_capacity() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.queue_capacity)
  return _internal_queue_capacity();
}
inline void InputReader::_internal_set_queue_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  queue_capacity_ = value;
}
inline void InputReader::set_queue_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_queue_capacity(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.queue_capacity)
}

// optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
inline bool InputReader::_internal_has_min_after_dequeue() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool InputReader::has_min_after_dequeue() const {
  return _internal_has_min_after_dequeue();
}
inline void InputReader::clear_min_after_dequeue() {
  min_after_dequeue_ = 1000u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_min_after_dequeue() const {
  return min_after_dequeue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::min_after_dequeue() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.min_after_dequeue)
  return _internal_min_after_dequeue();
}
inline void InputReader::_internal_set_min_after_dequeue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  min_after_dequeue_ = value;
}
inline void InputReader::set_min_after_dequeue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_after_dequeue(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.min_after_dequeue)
}

// optional uint32 read_block_length = 15 [default = 32];
inline bool InputReader::_internal_has_read_block_length() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool InputReader::has_read_block_length() const {
  return _internal_has_read_block_length();
}
inline void InputReader::clear_read_block_length() {
  read_block_length_ = 32u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_read_block_length() const {
  return read_block_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::read_block_length() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.read_block_length)
  return _internal_read_block_length();
}
inline void InputReader::_internal_set_read_block_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  read_block_length_ = value;
}
inline void InputReader::set_read_block_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_read_block_length(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.read_block_length)
}

// optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
inline bool InputReader::_internal_has_prefetch_size() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool InputReader::has_prefetch_size() const {
  return _internal_has_prefetch_size();
}
inline void InputReader::clear_prefetch_size() {
  prefetch_size_ = 512u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_prefetch_size() const {
  return prefetch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::prefetch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.prefetch_size)
  return _internal_prefetch_size();
}
inline void InputReader::_internal_set_prefetch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  prefetch_size_ = value;
}
inline void InputReader::set_prefetch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefetch_size(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.prefetch_size)
}

// optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
inline bool InputReader::_internal_has_num_parallel_map_calls() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool InputReader::has_num_parallel_map_calls() const {
  return _internal_has_num_parallel_map_calls();
}
inline void InputReader::clear_num_parallel_map_calls() {
  num_parallel_map_calls_ = 64u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_num_parallel_map_calls() const {
  return num_parallel_map_calls_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::num_parallel_map_calls() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_parallel_map_calls)
  return _internal_num_parallel_map_calls();
}
inline void InputReader::_internal_set_num_parallel_map_calls(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  num_parallel_map_calls_ = value;
}
inline void InputReader::set_num_parallel_map_calls(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_parallel_map_calls(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_parallel_map_calls)
}

// optional int32 num_additional_channels = 18 [default = 0];
inline bool InputReader::_internal_has_num_additional_channels() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool InputReader::has_num_additional_channels() const {
  return _internal_has_num_additional_channels();
}
inline void InputReader::clear_num_additional_channels() {
  num_additional_channels_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputReader::_internal_num_additional_channels() const {
  return num_additional_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputReader::num_additional_channels() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_additional_channels)
  return _internal_num_additional_channels();
}
inline void InputReader::_internal_set_num_additional_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_additional_channels_ = value;
}
inline void InputReader::set_num_additional_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_additional_channels(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_additional_channels)
}

// optional uint32 num_keypoints = 16 [default = 0];
inline bool InputReader::_internal_has_num_keypoints() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InputReader::has_num_keypoints() const {
  return _internal_has_num_keypoints();
}
inline void InputReader::clear_num_keypoints() {
  num_keypoints_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::_internal_num_keypoints() const {
  return num_keypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputReader::num_keypoints() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_keypoints)
  return _internal_num_keypoints();
}
inline void InputReader::_internal_set_num_keypoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_keypoints_ = value;
}
inline void InputReader::set_num_keypoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_keypoints(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_keypoints)
}

// optional int32 max_number_of_boxes = 21 [default = 100];
inline bool InputReader::_internal_has_max_number_of_boxes() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool InputReader::has_max_number_of_boxes() const {
  return _internal_has_max_number_of_boxes();
}
inline void InputReader::clear_max_number_of_boxes() {
  max_number_of_boxes_ = 100;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputReader::_internal_max_number_of_boxes() const {
  return max_number_of_boxes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputReader::max_number_of_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.max_number_of_boxes)
  return _internal_max_number_of_boxes();
}
inline void InputReader::_internal_set_max_number_of_boxes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  max_number_of_boxes_ = value;
}
inline void InputReader::set_max_number_of_boxes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_number_of_boxes(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.max_number_of_boxes)
}

// optional bool load_instance_masks = 7 [default = false];
inline bool InputReader::_internal_has_load_instance_masks() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InputReader::has_load_instance_masks() const {
  return _internal_has_load_instance_masks();
}
inline void InputReader::clear_load_instance_masks() {
  load_instance_masks_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool InputReader::_internal_load_instance_masks() const {
  return load_instance_masks_;
}
inline bool InputReader::load_instance_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.load_instance_masks)
  return _internal_load_instance_masks();
}
inline void InputReader::_internal_set_load_instance_masks(bool value) {
  _has_bits_[0] |= 0x00000008u;
  load_instance_masks_ = value;
}
inline void InputReader::set_load_instance_masks(bool value) {
  _internal_set_load_instance_masks(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.load_instance_masks)
}

// optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
inline bool InputReader::_internal_has_mask_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool InputReader::has_mask_type() const {
  return _internal_has_mask_type();
}
inline void InputReader::clear_mask_type() {
  mask_type_ = 1;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::object_detection::protos::InstanceMaskType InputReader::_internal_mask_type() const {
  return static_cast< ::object_detection::protos::InstanceMaskType >(mask_type_);
}
inline ::object_detection::protos::InstanceMaskType InputReader::mask_type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.mask_type)
  return _internal_mask_type();
}
inline void InputReader::_internal_set_mask_type(::object_detection::protos::InstanceMaskType value) {
  assert(::object_detection::protos::InstanceMaskType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  mask_type_ = value;
}
inline void InputReader::set_mask_type(::object_detection::protos::InstanceMaskType value) {
  _internal_set_mask_type(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.mask_type)
}

// optional bool use_display_name = 17 [default = false];
inline bool InputReader::_internal_has_use_display_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InputReader::has_use_display_name() const {
  return _internal_has_use_display_name();
}
inline void InputReader::clear_use_display_name() {
  use_display_name_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool InputReader::_internal_use_display_name() const {
  return use_display_name_;
}
inline bool InputReader::use_display_name() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.use_display_name)
  return _internal_use_display_name();
}
inline void InputReader::_internal_set_use_display_name(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_display_name_ = value;
}
inline void InputReader::set_use_display_name(bool value) {
  _internal_set_use_display_name(value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.use_display_name)
}

// optional .object_detection.protos.TFRecordInputReader tf_record_input_reader = 8;
inline bool InputReader::_internal_has_tf_record_input_reader() const {
  return input_reader_case() == kTfRecordInputReader;
}
inline bool InputReader::has_tf_record_input_reader() const {
  return _internal_has_tf_record_input_reader();
}
inline void InputReader::set_has_tf_record_input_reader() {
  _oneof_case_[0] = kTfRecordInputReader;
}
inline void InputReader::clear_tf_record_input_reader() {
  if (_internal_has_tf_record_input_reader()) {
    delete input_reader_.tf_record_input_reader_;
    clear_has_input_reader();
  }
}
inline ::object_detection::protos::TFRecordInputReader* InputReader::release_tf_record_input_reader() {
  // @@protoc_insertion_point(field_release:object_detection.protos.InputReader.tf_record_input_reader)
  if (_internal_has_tf_record_input_reader()) {
    clear_has_input_reader();
      ::object_detection::protos::TFRecordInputReader* temp = input_reader_.tf_record_input_reader_;
    input_reader_.tf_record_input_reader_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::TFRecordInputReader& InputReader::_internal_tf_record_input_reader() const {
  return _internal_has_tf_record_input_reader()
      ? *input_reader_.tf_record_input_reader_
      : *reinterpret_cast< ::object_detection::protos::TFRecordInputReader*>(&::object_detection::protos::_TFRecordInputReader_default_instance_);
}
inline const ::object_detection::protos::TFRecordInputReader& InputReader::tf_record_input_reader() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.tf_record_input_reader)
  return _internal_tf_record_input_reader();
}
inline ::object_detection::protos::TFRecordInputReader* InputReader::_internal_mutable_tf_record_input_reader() {
  if (!_internal_has_tf_record_input_reader()) {
    clear_input_reader();
    set_has_tf_record_input_reader();
    input_reader_.tf_record_input_reader_ = CreateMaybeMessage< ::object_detection::protos::TFRecordInputReader >(
        GetArenaNoVirtual());
  }
  return input_reader_.tf_record_input_reader_;
}
inline ::object_detection::protos::TFRecordInputReader* InputReader::mutable_tf_record_input_reader() {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.InputReader.tf_record_input_reader)
  return _internal_mutable_tf_record_input_reader();
}

// optional .object_detection.protos.ExternalInputReader external_input_reader = 9;
inline bool InputReader::_internal_has_external_input_reader() const {
  return input_reader_case() == kExternalInputReader;
}
inline bool InputReader::has_external_input_reader() const {
  return _internal_has_external_input_reader();
}
inline void InputReader::set_has_external_input_reader() {
  _oneof_case_[0] = kExternalInputReader;
}
inline void InputReader::clear_external_input_reader() {
  if (_internal_has_external_input_reader()) {
    delete input_reader_.external_input_reader_;
    clear_has_input_reader();
  }
}
inline ::object_detection::protos::ExternalInputReader* InputReader::release_external_input_reader() {
  // @@protoc_insertion_point(field_release:object_detection.protos.InputReader.external_input_reader)
  if (_internal_has_external_input_reader()) {
    clear_has_input_reader();
      ::object_detection::protos::ExternalInputReader* temp = input_reader_.external_input_reader_;
    input_reader_.external_input_reader_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::object_detection::protos::ExternalInputReader& InputReader::_internal_external_input_reader() const {
  return _internal_has_external_input_reader()
      ? *input_reader_.external_input_reader_
      : *reinterpret_cast< ::object_detection::protos::ExternalInputReader*>(&::object_detection::protos::_ExternalInputReader_default_instance_);
}
inline const ::object_detection::protos::ExternalInputReader& InputReader::external_input_reader() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.external_input_reader)
  return _internal_external_input_reader();
}
inline ::object_detection::protos::ExternalInputReader* InputReader::_internal_mutable_external_input_reader() {
  if (!_internal_has_external_input_reader()) {
    clear_input_reader();
    set_has_external_input_reader();
    input_reader_.external_input_reader_ = CreateMaybeMessage< ::object_detection::protos::ExternalInputReader >(
        GetArenaNoVirtual());
  }
  return input_reader_.external_input_reader_;
}
inline ::object_detection::protos::ExternalInputReader* InputReader::mutable_external_input_reader() {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.InputReader.external_input_reader)
  return _internal_mutable_external_input_reader();
}

inline bool InputReader::has_input_reader() const {
  return input_reader_case() != INPUT_READER_NOT_SET;
}
inline void InputReader::clear_has_input_reader() {
  _oneof_case_[0] = INPUT_READER_NOT_SET;
}
inline InputReader::InputReaderCase InputReader::input_reader_case() const {
  return InputReader::InputReaderCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TFRecordInputReader

// repeated string input_path = 1;
inline int TFRecordInputReader::_internal_input_path_size() const {
  return input_path_.size();
}
inline int TFRecordInputReader::input_path_size() const {
  return _internal_input_path_size();
}
inline void TFRecordInputReader::clear_input_path() {
  input_path_.Clear();
}
inline std::string* TFRecordInputReader::add_input_path() {
  // @@protoc_insertion_point(field_add_mutable:object_detection.protos.TFRecordInputReader.input_path)
  return _internal_add_input_path();
}
inline const std::string& TFRecordInputReader::_internal_input_path(int index) const {
  return input_path_.Get(index);
}
inline const std::string& TFRecordInputReader::input_path(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TFRecordInputReader.input_path)
  return _internal_input_path(index);
}
inline std::string* TFRecordInputReader::mutable_input_path(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TFRecordInputReader.input_path)
  return input_path_.Mutable(index);
}
inline void TFRecordInputReader::set_input_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.TFRecordInputReader.input_path)
  input_path_.Mutable(index)->assign(value);
}
inline void TFRecordInputReader::set_input_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.TFRecordInputReader.input_path)
  input_path_.Mutable(index)->assign(std::move(value));
}
inline void TFRecordInputReader::set_input_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:object_detection.protos.TFRecordInputReader.input_path)
}
inline void TFRecordInputReader::set_input_path(int index, const char* value, size_t size) {
  input_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.TFRecordInputReader.input_path)
}
inline std::string* TFRecordInputReader::_internal_add_input_path() {
  return input_path_.Add();
}
inline void TFRecordInputReader::add_input_path(const std::string& value) {
  input_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.TFRecordInputReader.input_path)
}
inline void TFRecordInputReader::add_input_path(std::string&& value) {
  input_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:object_detection.protos.TFRecordInputReader.input_path)
}
inline void TFRecordInputReader::add_input_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:object_detection.protos.TFRecordInputReader.input_path)
}
inline void TFRecordInputReader::add_input_path(const char* value, size_t size) {
  input_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:object_detection.protos.TFRecordInputReader.input_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TFRecordInputReader::input_path() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.TFRecordInputReader.input_path)
  return input_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TFRecordInputReader::mutable_input_path() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.TFRecordInputReader.input_path)
  return &input_path_;
}

// -------------------------------------------------------------------

// ExternalInputReader

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::object_detection::protos::InstanceMaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::object_detection::protos::InstanceMaskType>() {
  return ::object_detection::protos::InstanceMaskType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_5fdetection_2fprotos_2finput_5freader_2eproto
