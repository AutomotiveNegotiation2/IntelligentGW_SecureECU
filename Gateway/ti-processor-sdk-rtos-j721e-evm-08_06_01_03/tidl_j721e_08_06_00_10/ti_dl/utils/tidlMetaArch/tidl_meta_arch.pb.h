// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tidl_meta_arch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tidl_5fmeta_5farch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tidl_5fmeta_5farch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tidl_5fmeta_5farch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tidl_5fmeta_5farch_2eproto;
namespace tidl_meta_arch {
class PriorBox3DODParameter;
class PriorBox3DODParameterDefaultTypeInternal;
extern PriorBox3DODParameterDefaultTypeInternal _PriorBox3DODParameter_default_instance_;
class PriorBoxParameter;
class PriorBoxParameterDefaultTypeInternal;
extern PriorBoxParameterDefaultTypeInternal _PriorBoxParameter_default_instance_;
class RetinaNetAnchorParameter;
class RetinaNetAnchorParameterDefaultTypeInternal;
extern RetinaNetAnchorParameterDefaultTypeInternal _RetinaNetAnchorParameter_default_instance_;
class TIDLCameraIntrinsicParams;
class TIDLCameraIntrinsicParamsDefaultTypeInternal;
extern TIDLCameraIntrinsicParamsDefaultTypeInternal _TIDLCameraIntrinsicParams_default_instance_;
class TIDLMetaArch;
class TIDLMetaArchDefaultTypeInternal;
extern TIDLMetaArchDefaultTypeInternal _TIDLMetaArch_default_instance_;
class TIDLNmsParam;
class TIDLNmsParamDefaultTypeInternal;
extern TIDLNmsParamDefaultTypeInternal _TIDLNmsParam_default_instance_;
class TIDLOdPostProc;
class TIDLOdPostProcDefaultTypeInternal;
extern TIDLOdPostProcDefaultTypeInternal _TIDLOdPostProc_default_instance_;
class TIDLOdSaveParams;
class TIDLOdSaveParamsDefaultTypeInternal;
extern TIDLOdSaveParamsDefaultTypeInternal _TIDLOdSaveParams_default_instance_;
class TIDLYoloParams;
class TIDLYoloParamsDefaultTypeInternal;
extern TIDLYoloParamsDefaultTypeInternal _TIDLYoloParams_default_instance_;
class TidlMa3DOD;
class TidlMa3DODDefaultTypeInternal;
extern TidlMa3DODDefaultTypeInternal _TidlMa3DOD_default_instance_;
class TidlMaCaffeSsd;
class TidlMaCaffeSsdDefaultTypeInternal;
extern TidlMaCaffeSsdDefaultTypeInternal _TidlMaCaffeSsd_default_instance_;
class TidlMaFasterRcnn;
class TidlMaFasterRcnnDefaultTypeInternal;
extern TidlMaFasterRcnnDefaultTypeInternal _TidlMaFasterRcnn_default_instance_;
class TidlMaRetinaNet;
class TidlMaRetinaNetDefaultTypeInternal;
extern TidlMaRetinaNetDefaultTypeInternal _TidlMaRetinaNet_default_instance_;
class TidlMaSsd;
class TidlMaSsdDefaultTypeInternal;
extern TidlMaSsdDefaultTypeInternal _TidlMaSsd_default_instance_;
class TidlMaTfOdApiSsd;
class TidlMaTfOdApiSsdDefaultTypeInternal;
extern TidlMaTfOdApiSsdDefaultTypeInternal _TidlMaTfOdApiSsd_default_instance_;
class TidlYoloOd;
class TidlYoloOdDefaultTypeInternal;
extern TidlYoloOdDefaultTypeInternal _TidlYoloOd_default_instance_;
}  // namespace tidl_meta_arch
PROTOBUF_NAMESPACE_OPEN
template<> ::tidl_meta_arch::PriorBox3DODParameter* Arena::CreateMaybeMessage<::tidl_meta_arch::PriorBox3DODParameter>(Arena*);
template<> ::tidl_meta_arch::PriorBoxParameter* Arena::CreateMaybeMessage<::tidl_meta_arch::PriorBoxParameter>(Arena*);
template<> ::tidl_meta_arch::RetinaNetAnchorParameter* Arena::CreateMaybeMessage<::tidl_meta_arch::RetinaNetAnchorParameter>(Arena*);
template<> ::tidl_meta_arch::TIDLCameraIntrinsicParams* Arena::CreateMaybeMessage<::tidl_meta_arch::TIDLCameraIntrinsicParams>(Arena*);
template<> ::tidl_meta_arch::TIDLMetaArch* Arena::CreateMaybeMessage<::tidl_meta_arch::TIDLMetaArch>(Arena*);
template<> ::tidl_meta_arch::TIDLNmsParam* Arena::CreateMaybeMessage<::tidl_meta_arch::TIDLNmsParam>(Arena*);
template<> ::tidl_meta_arch::TIDLOdPostProc* Arena::CreateMaybeMessage<::tidl_meta_arch::TIDLOdPostProc>(Arena*);
template<> ::tidl_meta_arch::TIDLOdSaveParams* Arena::CreateMaybeMessage<::tidl_meta_arch::TIDLOdSaveParams>(Arena*);
template<> ::tidl_meta_arch::TIDLYoloParams* Arena::CreateMaybeMessage<::tidl_meta_arch::TIDLYoloParams>(Arena*);
template<> ::tidl_meta_arch::TidlMa3DOD* Arena::CreateMaybeMessage<::tidl_meta_arch::TidlMa3DOD>(Arena*);
template<> ::tidl_meta_arch::TidlMaCaffeSsd* Arena::CreateMaybeMessage<::tidl_meta_arch::TidlMaCaffeSsd>(Arena*);
template<> ::tidl_meta_arch::TidlMaFasterRcnn* Arena::CreateMaybeMessage<::tidl_meta_arch::TidlMaFasterRcnn>(Arena*);
template<> ::tidl_meta_arch::TidlMaRetinaNet* Arena::CreateMaybeMessage<::tidl_meta_arch::TidlMaRetinaNet>(Arena*);
template<> ::tidl_meta_arch::TidlMaSsd* Arena::CreateMaybeMessage<::tidl_meta_arch::TidlMaSsd>(Arena*);
template<> ::tidl_meta_arch::TidlMaTfOdApiSsd* Arena::CreateMaybeMessage<::tidl_meta_arch::TidlMaTfOdApiSsd>(Arena*);
template<> ::tidl_meta_arch::TidlYoloOd* Arena::CreateMaybeMessage<::tidl_meta_arch::TidlYoloOd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tidl_meta_arch {

enum TIDLBoxCodeType : int {
  CORNER = 1,
  CENTER_SIZE = 2,
  CORNER_SIZE = 3,
  CENTER_SIZE_EXP = 4,
  CENTER_SIZE_YXHW = 5,
  CODE_TYPE_YOLO_V5 = 6,
  CODE_TYPE_YOLO_X = 7,
  CODE_TYPE_3DOD = 8
};
bool TIDLBoxCodeType_IsValid(int value);
constexpr TIDLBoxCodeType TIDLBoxCodeType_MIN = CORNER;
constexpr TIDLBoxCodeType TIDLBoxCodeType_MAX = CODE_TYPE_3DOD;
constexpr int TIDLBoxCodeType_ARRAYSIZE = TIDLBoxCodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TIDLBoxCodeType_descriptor();
template<typename T>
inline const std::string& TIDLBoxCodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TIDLBoxCodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TIDLBoxCodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TIDLBoxCodeType_descriptor(), enum_t_value);
}
inline bool TIDLBoxCodeType_Parse(
    const std::string& name, TIDLBoxCodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TIDLBoxCodeType>(
    TIDLBoxCodeType_descriptor(), name, value);
}
enum TIDLScoreConverter : int {
  IDENTITY = 0,
  SIGMOID = 1,
  SOFTMAX = 2
};
bool TIDLScoreConverter_IsValid(int value);
constexpr TIDLScoreConverter TIDLScoreConverter_MIN = IDENTITY;
constexpr TIDLScoreConverter TIDLScoreConverter_MAX = SOFTMAX;
constexpr int TIDLScoreConverter_ARRAYSIZE = TIDLScoreConverter_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TIDLScoreConverter_descriptor();
template<typename T>
inline const std::string& TIDLScoreConverter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TIDLScoreConverter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TIDLScoreConverter_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TIDLScoreConverter_descriptor(), enum_t_value);
}
inline bool TIDLScoreConverter_Parse(
    const std::string& name, TIDLScoreConverter* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TIDLScoreConverter>(
    TIDLScoreConverter_descriptor(), name, value);
}
enum TIDLAnchorDataLayout : int {
  SEPARATED = 0,
  INTERLEAVED = 1
};
bool TIDLAnchorDataLayout_IsValid(int value);
constexpr TIDLAnchorDataLayout TIDLAnchorDataLayout_MIN = SEPARATED;
constexpr TIDLAnchorDataLayout TIDLAnchorDataLayout_MAX = INTERLEAVED;
constexpr int TIDLAnchorDataLayout_ARRAYSIZE = TIDLAnchorDataLayout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TIDLAnchorDataLayout_descriptor();
template<typename T>
inline const std::string& TIDLAnchorDataLayout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TIDLAnchorDataLayout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TIDLAnchorDataLayout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TIDLAnchorDataLayout_descriptor(), enum_t_value);
}
inline bool TIDLAnchorDataLayout_Parse(
    const std::string& name, TIDLAnchorDataLayout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TIDLAnchorDataLayout>(
    TIDLAnchorDataLayout_descriptor(), name, value);
}
// ===================================================================

class TIDLMetaArch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TIDLMetaArch) */ {
 public:
  TIDLMetaArch();
  virtual ~TIDLMetaArch();

  TIDLMetaArch(const TIDLMetaArch& from);
  TIDLMetaArch(TIDLMetaArch&& from) noexcept
    : TIDLMetaArch() {
    *this = ::std::move(from);
  }

  inline TIDLMetaArch& operator=(const TIDLMetaArch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TIDLMetaArch& operator=(TIDLMetaArch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TIDLMetaArch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TIDLMetaArch* internal_default_instance() {
    return reinterpret_cast<const TIDLMetaArch*>(
               &_TIDLMetaArch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TIDLMetaArch& a, TIDLMetaArch& b) {
    a.Swap(&b);
  }
  inline void Swap(TIDLMetaArch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TIDLMetaArch* New() const final {
    return CreateMaybeMessage<TIDLMetaArch>(nullptr);
  }

  TIDLMetaArch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TIDLMetaArch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TIDLMetaArch& from);
  void MergeFrom(const TIDLMetaArch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TIDLMetaArch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TIDLMetaArch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaffeSsdFieldNumber = 2,
    kTfOdApiSsdFieldNumber = 3,
    kTidlSsdFieldNumber = 4,
    kTidlFasterRcnnFieldNumber = 5,
    kTidlYoloFieldNumber = 6,
    kTidlRetinanetFieldNumber = 7,
    kTidl3DodFieldNumber = 8,
    kNameFieldNumber = 1,
  };
  // repeated .tidl_meta_arch.TidlMaCaffeSsd caffe_ssd = 2;
  int caffe_ssd_size() const;
  private:
  int _internal_caffe_ssd_size() const;
  public:
  void clear_caffe_ssd();
  ::tidl_meta_arch::TidlMaCaffeSsd* mutable_caffe_ssd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaCaffeSsd >*
      mutable_caffe_ssd();
  private:
  const ::tidl_meta_arch::TidlMaCaffeSsd& _internal_caffe_ssd(int index) const;
  ::tidl_meta_arch::TidlMaCaffeSsd* _internal_add_caffe_ssd();
  public:
  const ::tidl_meta_arch::TidlMaCaffeSsd& caffe_ssd(int index) const;
  ::tidl_meta_arch::TidlMaCaffeSsd* add_caffe_ssd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaCaffeSsd >&
      caffe_ssd() const;

  // repeated .tidl_meta_arch.TidlMaTfOdApiSsd tf_od_api_ssd = 3;
  int tf_od_api_ssd_size() const;
  private:
  int _internal_tf_od_api_ssd_size() const;
  public:
  void clear_tf_od_api_ssd();
  ::tidl_meta_arch::TidlMaTfOdApiSsd* mutable_tf_od_api_ssd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaTfOdApiSsd >*
      mutable_tf_od_api_ssd();
  private:
  const ::tidl_meta_arch::TidlMaTfOdApiSsd& _internal_tf_od_api_ssd(int index) const;
  ::tidl_meta_arch::TidlMaTfOdApiSsd* _internal_add_tf_od_api_ssd();
  public:
  const ::tidl_meta_arch::TidlMaTfOdApiSsd& tf_od_api_ssd(int index) const;
  ::tidl_meta_arch::TidlMaTfOdApiSsd* add_tf_od_api_ssd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaTfOdApiSsd >&
      tf_od_api_ssd() const;

  // repeated .tidl_meta_arch.TidlMaSsd tidl_ssd = 4;
  int tidl_ssd_size() const;
  private:
  int _internal_tidl_ssd_size() const;
  public:
  void clear_tidl_ssd();
  ::tidl_meta_arch::TidlMaSsd* mutable_tidl_ssd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaSsd >*
      mutable_tidl_ssd();
  private:
  const ::tidl_meta_arch::TidlMaSsd& _internal_tidl_ssd(int index) const;
  ::tidl_meta_arch::TidlMaSsd* _internal_add_tidl_ssd();
  public:
  const ::tidl_meta_arch::TidlMaSsd& tidl_ssd(int index) const;
  ::tidl_meta_arch::TidlMaSsd* add_tidl_ssd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaSsd >&
      tidl_ssd() const;

  // repeated .tidl_meta_arch.TidlMaFasterRcnn tidl_faster_rcnn = 5;
  int tidl_faster_rcnn_size() const;
  private:
  int _internal_tidl_faster_rcnn_size() const;
  public:
  void clear_tidl_faster_rcnn();
  ::tidl_meta_arch::TidlMaFasterRcnn* mutable_tidl_faster_rcnn(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaFasterRcnn >*
      mutable_tidl_faster_rcnn();
  private:
  const ::tidl_meta_arch::TidlMaFasterRcnn& _internal_tidl_faster_rcnn(int index) const;
  ::tidl_meta_arch::TidlMaFasterRcnn* _internal_add_tidl_faster_rcnn();
  public:
  const ::tidl_meta_arch::TidlMaFasterRcnn& tidl_faster_rcnn(int index) const;
  ::tidl_meta_arch::TidlMaFasterRcnn* add_tidl_faster_rcnn();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaFasterRcnn >&
      tidl_faster_rcnn() const;

  // repeated .tidl_meta_arch.TidlYoloOd tidl_yolo = 6;
  int tidl_yolo_size() const;
  private:
  int _internal_tidl_yolo_size() const;
  public:
  void clear_tidl_yolo();
  ::tidl_meta_arch::TidlYoloOd* mutable_tidl_yolo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlYoloOd >*
      mutable_tidl_yolo();
  private:
  const ::tidl_meta_arch::TidlYoloOd& _internal_tidl_yolo(int index) const;
  ::tidl_meta_arch::TidlYoloOd* _internal_add_tidl_yolo();
  public:
  const ::tidl_meta_arch::TidlYoloOd& tidl_yolo(int index) const;
  ::tidl_meta_arch::TidlYoloOd* add_tidl_yolo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlYoloOd >&
      tidl_yolo() const;

  // repeated .tidl_meta_arch.TidlMaRetinaNet tidl_retinanet = 7;
  int tidl_retinanet_size() const;
  private:
  int _internal_tidl_retinanet_size() const;
  public:
  void clear_tidl_retinanet();
  ::tidl_meta_arch::TidlMaRetinaNet* mutable_tidl_retinanet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaRetinaNet >*
      mutable_tidl_retinanet();
  private:
  const ::tidl_meta_arch::TidlMaRetinaNet& _internal_tidl_retinanet(int index) const;
  ::tidl_meta_arch::TidlMaRetinaNet* _internal_add_tidl_retinanet();
  public:
  const ::tidl_meta_arch::TidlMaRetinaNet& tidl_retinanet(int index) const;
  ::tidl_meta_arch::TidlMaRetinaNet* add_tidl_retinanet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaRetinaNet >&
      tidl_retinanet() const;

  // repeated .tidl_meta_arch.TidlMa3DOD tidl_3dod = 8;
  int tidl_3dod_size() const;
  private:
  int _internal_tidl_3dod_size() const;
  public:
  void clear_tidl_3dod();
  ::tidl_meta_arch::TidlMa3DOD* mutable_tidl_3dod(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMa3DOD >*
      mutable_tidl_3dod();
  private:
  const ::tidl_meta_arch::TidlMa3DOD& _internal_tidl_3dod(int index) const;
  ::tidl_meta_arch::TidlMa3DOD* _internal_add_tidl_3dod();
  public:
  const ::tidl_meta_arch::TidlMa3DOD& tidl_3dod(int index) const;
  ::tidl_meta_arch::TidlMa3DOD* add_tidl_3dod();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMa3DOD >&
      tidl_3dod() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TIDLMetaArch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaCaffeSsd > caffe_ssd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaTfOdApiSsd > tf_od_api_ssd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaSsd > tidl_ssd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaFasterRcnn > tidl_faster_rcnn_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlYoloOd > tidl_yolo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaRetinaNet > tidl_retinanet_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMa3DOD > tidl_3dod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TIDLNmsParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TIDLNmsParam) */ {
 public:
  TIDLNmsParam();
  virtual ~TIDLNmsParam();

  TIDLNmsParam(const TIDLNmsParam& from);
  TIDLNmsParam(TIDLNmsParam&& from) noexcept
    : TIDLNmsParam() {
    *this = ::std::move(from);
  }

  inline TIDLNmsParam& operator=(const TIDLNmsParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TIDLNmsParam& operator=(TIDLNmsParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TIDLNmsParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TIDLNmsParam* internal_default_instance() {
    return reinterpret_cast<const TIDLNmsParam*>(
               &_TIDLNmsParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TIDLNmsParam& a, TIDLNmsParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TIDLNmsParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TIDLNmsParam* New() const final {
    return CreateMaybeMessage<TIDLNmsParam>(nullptr);
  }

  TIDLNmsParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TIDLNmsParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TIDLNmsParam& from);
  void MergeFrom(const TIDLNmsParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TIDLNmsParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TIDLNmsParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopKFieldNumber = 2,
    kEtaFieldNumber = 4,
    kNmsThresholdFieldNumber = 1,
    kTopKAllClassFieldNumber = 3,
  };
  // optional int32 top_k = 2;
  bool has_top_k() const;
  private:
  bool _internal_has_top_k() const;
  public:
  void clear_top_k();
  ::PROTOBUF_NAMESPACE_ID::int32 top_k() const;
  void set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_k() const;
  void _internal_set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float eta = 4 [default = 1];
  bool has_eta() const;
  private:
  bool _internal_has_eta() const;
  public:
  void clear_eta();
  float eta() const;
  void set_eta(float value);
  private:
  float _internal_eta() const;
  void _internal_set_eta(float value);
  public:

  // optional float nms_threshold = 1 [default = 0.3];
  bool has_nms_threshold() const;
  private:
  bool _internal_has_nms_threshold() const;
  public:
  void clear_nms_threshold();
  float nms_threshold() const;
  void set_nms_threshold(float value);
  private:
  float _internal_nms_threshold() const;
  void _internal_set_nms_threshold(float value);
  public:

  // optional int32 top_k_all_class = 3 [default = -1];
  bool has_top_k_all_class() const;
  private:
  bool _internal_has_top_k_all_class() const;
  public:
  void clear_top_k_all_class();
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_all_class() const;
  void set_top_k_all_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_k_all_class() const;
  void _internal_set_top_k_all_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TIDLNmsParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_;
  float eta_;
  float nms_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_k_all_class_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class PriorBoxParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.PriorBoxParameter) */ {
 public:
  PriorBoxParameter();
  virtual ~PriorBoxParameter();

  PriorBoxParameter(const PriorBoxParameter& from);
  PriorBoxParameter(PriorBoxParameter&& from) noexcept
    : PriorBoxParameter() {
    *this = ::std::move(from);
  }

  inline PriorBoxParameter& operator=(const PriorBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriorBoxParameter& operator=(PriorBoxParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriorBoxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriorBoxParameter* internal_default_instance() {
    return reinterpret_cast<const PriorBoxParameter*>(
               &_PriorBoxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PriorBoxParameter& a, PriorBoxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PriorBoxParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriorBoxParameter* New() const final {
    return CreateMaybeMessage<PriorBoxParameter>(nullptr);
  }

  PriorBoxParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriorBoxParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriorBoxParameter& from);
  void MergeFrom(const PriorBoxParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriorBoxParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.PriorBoxParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinSizeFieldNumber = 1,
    kMaxSizeFieldNumber = 2,
    kAspectRatioFieldNumber = 3,
    kVarianceFieldNumber = 6,
    kClipFieldNumber = 5,
    kImgSizeFieldNumber = 7,
    kImgHFieldNumber = 8,
    kImgWFieldNumber = 9,
    kStepFieldNumber = 10,
    kStepHFieldNumber = 11,
    kStepWFieldNumber = 12,
    kNumKeypointFieldNumber = 14,
    kFlipFieldNumber = 4,
    kOffsetFieldNumber = 13,
  };
  // repeated float min_size = 1;
  int min_size_size() const;
  private:
  int _internal_min_size_size() const;
  public:
  void clear_min_size();
  private:
  float _internal_min_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_min_size() const;
  void _internal_add_min_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_min_size();
  public:
  float min_size(int index) const;
  void set_min_size(int index, float value);
  void add_min_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      min_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_min_size();

  // repeated float max_size = 2;
  int max_size_size() const;
  private:
  int _internal_max_size_size() const;
  public:
  void clear_max_size();
  private:
  float _internal_max_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_size() const;
  void _internal_add_max_size(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_size();
  public:
  float max_size(int index) const;
  void set_max_size(int index, float value);
  void add_max_size(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_size();

  // repeated float aspect_ratio = 3;
  int aspect_ratio_size() const;
  private:
  int _internal_aspect_ratio_size() const;
  public:
  void clear_aspect_ratio();
  private:
  float _internal_aspect_ratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_aspect_ratio() const;
  void _internal_add_aspect_ratio(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_aspect_ratio();
  public:
  float aspect_ratio(int index) const;
  void set_aspect_ratio(int index, float value);
  void add_aspect_ratio(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      aspect_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_aspect_ratio();

  // repeated float variance = 6;
  int variance_size() const;
  private:
  int _internal_variance_size() const;
  public:
  void clear_variance();
  private:
  float _internal_variance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_variance() const;
  void _internal_add_variance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_variance();
  public:
  float variance(int index) const;
  void set_variance(int index, float value);
  void add_variance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      variance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_variance();

  // optional bool clip = 5 [default = false];
  bool has_clip() const;
  private:
  bool _internal_has_clip() const;
  public:
  void clear_clip();
  bool clip() const;
  void set_clip(bool value);
  private:
  bool _internal_clip() const;
  void _internal_set_clip(bool value);
  public:

  // optional uint32 img_size = 7;
  bool has_img_size() const;
  private:
  bool _internal_has_img_size() const;
  public:
  void clear_img_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_size() const;
  void set_img_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_size() const;
  void _internal_set_img_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 img_h = 8;
  bool has_img_h() const;
  private:
  bool _internal_has_img_h() const;
  public:
  void clear_img_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_h() const;
  void set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_h() const;
  void _internal_set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 img_w = 9;
  bool has_img_w() const;
  private:
  bool _internal_has_img_w() const;
  public:
  void clear_img_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 img_w() const;
  void set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_img_w() const;
  void _internal_set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float step = 10;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  float step() const;
  void set_step(float value);
  private:
  float _internal_step() const;
  void _internal_set_step(float value);
  public:

  // optional float step_h = 11;
  bool has_step_h() const;
  private:
  bool _internal_has_step_h() const;
  public:
  void clear_step_h();
  float step_h() const;
  void set_step_h(float value);
  private:
  float _internal_step_h() const;
  void _internal_set_step_h(float value);
  public:

  // optional float step_w = 12;
  bool has_step_w() const;
  private:
  bool _internal_has_step_w() const;
  public:
  void clear_step_w();
  float step_w() const;
  void set_step_w(float value);
  private:
  float _internal_step_w() const;
  void _internal_set_step_w(float value);
  public:

  // optional uint32 num_keypoint = 14 [default = 0];
  bool has_num_keypoint() const;
  private:
  bool _internal_has_num_keypoint() const;
  public:
  void clear_num_keypoint();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_keypoint() const;
  void set_num_keypoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_keypoint() const;
  void _internal_set_num_keypoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool flip = 4 [default = true];
  bool has_flip() const;
  private:
  bool _internal_has_flip() const;
  public:
  void clear_flip();
  bool flip() const;
  void set_flip(bool value);
  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);
  public:

  // optional float offset = 13 [default = 0.5];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  float offset() const;
  void set_offset(float value);
  private:
  float _internal_offset() const;
  void _internal_set_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.PriorBoxParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > min_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > aspect_ratio_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > variance_;
  bool clip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 img_w_;
  float step_;
  float step_h_;
  float step_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_keypoint_;
  bool flip_;
  float offset_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class PriorBox3DODParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.PriorBox3DODParameter) */ {
 public:
  PriorBox3DODParameter();
  virtual ~PriorBox3DODParameter();

  PriorBox3DODParameter(const PriorBox3DODParameter& from);
  PriorBox3DODParameter(PriorBox3DODParameter&& from) noexcept
    : PriorBox3DODParameter() {
    *this = ::std::move(from);
  }

  inline PriorBox3DODParameter& operator=(const PriorBox3DODParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriorBox3DODParameter& operator=(PriorBox3DODParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriorBox3DODParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriorBox3DODParameter* internal_default_instance() {
    return reinterpret_cast<const PriorBox3DODParameter*>(
               &_PriorBox3DODParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PriorBox3DODParameter& a, PriorBox3DODParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PriorBox3DODParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriorBox3DODParameter* New() const final {
    return CreateMaybeMessage<PriorBox3DODParameter>(nullptr);
  }

  PriorBox3DODParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriorBox3DODParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriorBox3DODParameter& from);
  void MergeFrom(const PriorBox3DODParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriorBox3DODParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.PriorBox3DODParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorWidthFieldNumber = 1,
    kAnchorHeightFieldNumber = 2,
    kAnchorLengthFieldNumber = 3,
    kRotationFieldNumber = 11,
    kStepXFieldNumber = 4,
    kStepYFieldNumber = 5,
    kStepZFieldNumber = 6,
    kOffsetXFieldNumber = 7,
    kOffsetYFieldNumber = 8,
    kOffsetZFieldNumber = 9,
    kOffsetDirFieldNumber = 10,
  };
  // repeated float anchor_width = 1;
  int anchor_width_size() const;
  private:
  int _internal_anchor_width_size() const;
  public:
  void clear_anchor_width();
  private:
  float _internal_anchor_width(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_width() const;
  void _internal_add_anchor_width(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_width();
  public:
  float anchor_width(int index) const;
  void set_anchor_width(int index, float value);
  void add_anchor_width(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_width() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_width();

  // repeated float anchor_height = 2;
  int anchor_height_size() const;
  private:
  int _internal_anchor_height_size() const;
  public:
  void clear_anchor_height();
  private:
  float _internal_anchor_height(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_height() const;
  void _internal_add_anchor_height(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_height();
  public:
  float anchor_height(int index) const;
  void set_anchor_height(int index, float value);
  void add_anchor_height(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_height() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_height();

  // repeated float anchor_length = 3;
  int anchor_length_size() const;
  private:
  int _internal_anchor_length_size() const;
  public:
  void clear_anchor_length();
  private:
  float _internal_anchor_length(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_length() const;
  void _internal_add_anchor_length(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_length();
  public:
  float anchor_length(int index) const;
  void set_anchor_length(int index, float value);
  void add_anchor_length(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_length() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_length();

  // repeated float rotation = 11;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  private:
  float _internal_rotation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rotation() const;
  void _internal_add_rotation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rotation();
  public:
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotation();

  // required float step_x = 4;
  bool has_step_x() const;
  private:
  bool _internal_has_step_x() const;
  public:
  void clear_step_x();
  float step_x() const;
  void set_step_x(float value);
  private:
  float _internal_step_x() const;
  void _internal_set_step_x(float value);
  public:

  // required float step_y = 5;
  bool has_step_y() const;
  private:
  bool _internal_has_step_y() const;
  public:
  void clear_step_y();
  float step_y() const;
  void set_step_y(float value);
  private:
  float _internal_step_y() const;
  void _internal_set_step_y(float value);
  public:

  // required float step_z = 6;
  bool has_step_z() const;
  private:
  bool _internal_has_step_z() const;
  public:
  void clear_step_z();
  float step_z() const;
  void set_step_z(float value);
  private:
  float _internal_step_z() const;
  void _internal_set_step_z(float value);
  public:

  // required float offset_x = 7;
  bool has_offset_x() const;
  private:
  bool _internal_has_offset_x() const;
  public:
  void clear_offset_x();
  float offset_x() const;
  void set_offset_x(float value);
  private:
  float _internal_offset_x() const;
  void _internal_set_offset_x(float value);
  public:

  // required float offset_y = 8;
  bool has_offset_y() const;
  private:
  bool _internal_has_offset_y() const;
  public:
  void clear_offset_y();
  float offset_y() const;
  void set_offset_y(float value);
  private:
  float _internal_offset_y() const;
  void _internal_set_offset_y(float value);
  public:

  // required float offset_z = 9;
  bool has_offset_z() const;
  private:
  bool _internal_has_offset_z() const;
  public:
  void clear_offset_z();
  float offset_z() const;
  void set_offset_z(float value);
  private:
  float _internal_offset_z() const;
  void _internal_set_offset_z(float value);
  public:

  // required float offset_dir = 10;
  bool has_offset_dir() const;
  private:
  bool _internal_has_offset_dir() const;
  public:
  void clear_offset_dir();
  float offset_dir() const;
  void set_offset_dir(float value);
  private:
  float _internal_offset_dir() const;
  void _internal_set_offset_dir(float value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.PriorBox3DODParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_width_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_height_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_length_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotation_;
  float step_x_;
  float step_y_;
  float step_z_;
  float offset_x_;
  float offset_y_;
  float offset_z_;
  float offset_dir_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TIDLOdSaveParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TIDLOdSaveParams) */ {
 public:
  TIDLOdSaveParams();
  virtual ~TIDLOdSaveParams();

  TIDLOdSaveParams(const TIDLOdSaveParams& from);
  TIDLOdSaveParams(TIDLOdSaveParams&& from) noexcept
    : TIDLOdSaveParams() {
    *this = ::std::move(from);
  }

  inline TIDLOdSaveParams& operator=(const TIDLOdSaveParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TIDLOdSaveParams& operator=(TIDLOdSaveParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TIDLOdSaveParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TIDLOdSaveParams* internal_default_instance() {
    return reinterpret_cast<const TIDLOdSaveParams*>(
               &_TIDLOdSaveParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TIDLOdSaveParams& a, TIDLOdSaveParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TIDLOdSaveParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TIDLOdSaveParams* New() const final {
    return CreateMaybeMessage<TIDLOdSaveParams>(nullptr);
  }

  TIDLOdSaveParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TIDLOdSaveParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TIDLOdSaveParams& from);
  void MergeFrom(const TIDLOdSaveParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TIDLOdSaveParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TIDLOdSaveParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDirectoryFieldNumber = 1,
    kOutputNamePrefixFieldNumber = 2,
    kOutputFormatFieldNumber = 3,
    kLabelMapFileFieldNumber = 4,
    kNameSizeFileFieldNumber = 5,
    kResizeParamFieldNumber = 7,
    kNumTestImageFieldNumber = 6,
  };
  // optional string output_directory = 1;
  bool has_output_directory() const;
  private:
  bool _internal_has_output_directory() const;
  public:
  void clear_output_directory();
  const std::string& output_directory() const;
  void set_output_directory(const std::string& value);
  void set_output_directory(std::string&& value);
  void set_output_directory(const char* value);
  void set_output_directory(const char* value, size_t size);
  std::string* mutable_output_directory();
  std::string* release_output_directory();
  void set_allocated_output_directory(std::string* output_directory);
  private:
  const std::string& _internal_output_directory() const;
  void _internal_set_output_directory(const std::string& value);
  std::string* _internal_mutable_output_directory();
  public:

  // optional string output_name_prefix = 2;
  bool has_output_name_prefix() const;
  private:
  bool _internal_has_output_name_prefix() const;
  public:
  void clear_output_name_prefix();
  const std::string& output_name_prefix() const;
  void set_output_name_prefix(const std::string& value);
  void set_output_name_prefix(std::string&& value);
  void set_output_name_prefix(const char* value);
  void set_output_name_prefix(const char* value, size_t size);
  std::string* mutable_output_name_prefix();
  std::string* release_output_name_prefix();
  void set_allocated_output_name_prefix(std::string* output_name_prefix);
  private:
  const std::string& _internal_output_name_prefix() const;
  void _internal_set_output_name_prefix(const std::string& value);
  std::string* _internal_mutable_output_name_prefix();
  public:

  // optional string output_format = 3;
  bool has_output_format() const;
  private:
  bool _internal_has_output_format() const;
  public:
  void clear_output_format();
  const std::string& output_format() const;
  void set_output_format(const std::string& value);
  void set_output_format(std::string&& value);
  void set_output_format(const char* value);
  void set_output_format(const char* value, size_t size);
  std::string* mutable_output_format();
  std::string* release_output_format();
  void set_allocated_output_format(std::string* output_format);
  private:
  const std::string& _internal_output_format() const;
  void _internal_set_output_format(const std::string& value);
  std::string* _internal_mutable_output_format();
  public:

  // optional string label_map_file = 4;
  bool has_label_map_file() const;
  private:
  bool _internal_has_label_map_file() const;
  public:
  void clear_label_map_file();
  const std::string& label_map_file() const;
  void set_label_map_file(const std::string& value);
  void set_label_map_file(std::string&& value);
  void set_label_map_file(const char* value);
  void set_label_map_file(const char* value, size_t size);
  std::string* mutable_label_map_file();
  std::string* release_label_map_file();
  void set_allocated_label_map_file(std::string* label_map_file);
  private:
  const std::string& _internal_label_map_file() const;
  void _internal_set_label_map_file(const std::string& value);
  std::string* _internal_mutable_label_map_file();
  public:

  // optional string name_size_file = 5;
  bool has_name_size_file() const;
  private:
  bool _internal_has_name_size_file() const;
  public:
  void clear_name_size_file();
  const std::string& name_size_file() const;
  void set_name_size_file(const std::string& value);
  void set_name_size_file(std::string&& value);
  void set_name_size_file(const char* value);
  void set_name_size_file(const char* value, size_t size);
  std::string* mutable_name_size_file();
  std::string* release_name_size_file();
  void set_allocated_name_size_file(std::string* name_size_file);
  private:
  const std::string& _internal_name_size_file() const;
  void _internal_set_name_size_file(const std::string& value);
  std::string* _internal_mutable_name_size_file();
  public:

  // optional string resize_param = 7;
  bool has_resize_param() const;
  private:
  bool _internal_has_resize_param() const;
  public:
  void clear_resize_param();
  const std::string& resize_param() const;
  void set_resize_param(const std::string& value);
  void set_resize_param(std::string&& value);
  void set_resize_param(const char* value);
  void set_resize_param(const char* value, size_t size);
  std::string* mutable_resize_param();
  std::string* release_resize_param();
  void set_allocated_resize_param(std::string* resize_param);
  private:
  const std::string& _internal_resize_param() const;
  void _internal_set_resize_param(const std::string& value);
  std::string* _internal_mutable_resize_param();
  public:

  // optional uint32 num_test_image = 6;
  bool has_num_test_image() const;
  private:
  bool _internal_has_num_test_image() const;
  public:
  void clear_num_test_image();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_test_image() const;
  void set_num_test_image(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_test_image() const;
  void _internal_set_num_test_image(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TIDLOdSaveParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_name_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_map_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_size_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resize_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_test_image_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TIDLOdPostProc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TIDLOdPostProc) */ {
 public:
  TIDLOdPostProc();
  virtual ~TIDLOdPostProc();

  TIDLOdPostProc(const TIDLOdPostProc& from);
  TIDLOdPostProc(TIDLOdPostProc&& from) noexcept
    : TIDLOdPostProc() {
    *this = ::std::move(from);
  }

  inline TIDLOdPostProc& operator=(const TIDLOdPostProc& from) {
    CopyFrom(from);
    return *this;
  }
  inline TIDLOdPostProc& operator=(TIDLOdPostProc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TIDLOdPostProc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TIDLOdPostProc* internal_default_instance() {
    return reinterpret_cast<const TIDLOdPostProc*>(
               &_TIDLOdPostProc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TIDLOdPostProc& a, TIDLOdPostProc& b) {
    a.Swap(&b);
  }
  inline void Swap(TIDLOdPostProc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TIDLOdPostProc* New() const final {
    return CreateMaybeMessage<TIDLOdPostProc>(nullptr);
  }

  TIDLOdPostProc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TIDLOdPostProc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TIDLOdPostProc& from);
  void MergeFrom(const TIDLOdPostProc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TIDLOdPostProc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TIDLOdPostProc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaveFileFieldNumber = 12,
    kNmsParamFieldNumber = 4,
    kSaveOutputParamFieldNumber = 5,
    kCameraIntrinsicParamsFieldNumber = 16,
    kNumClassesFieldNumber = 1,
    kBackgroundLabelIdFieldNumber = 3,
    kConfidenceThresholdFieldNumber = 9,
    kVarianceEncodedInTargetFieldNumber = 8,
    kVisualizeFieldNumber = 10,
    kKeypointConfidenceFieldNumber = 14,
    kVisualizeThresholdFieldNumber = 11,
    kNumKeypointFieldNumber = 13,
    kSubCodeTypeFieldNumber = 15,
    kKeepTopKFieldNumber = 7,
    kShareLocationFieldNumber = 2,
    kCodeTypeFieldNumber = 6,
  };
  // optional string save_file = 12;
  bool has_save_file() const;
  private:
  bool _internal_has_save_file() const;
  public:
  void clear_save_file();
  const std::string& save_file() const;
  void set_save_file(const std::string& value);
  void set_save_file(std::string&& value);
  void set_save_file(const char* value);
  void set_save_file(const char* value, size_t size);
  std::string* mutable_save_file();
  std::string* release_save_file();
  void set_allocated_save_file(std::string* save_file);
  private:
  const std::string& _internal_save_file() const;
  void _internal_set_save_file(const std::string& value);
  std::string* _internal_mutable_save_file();
  public:

  // optional .tidl_meta_arch.TIDLNmsParam nms_param = 4;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::tidl_meta_arch::TIDLNmsParam& nms_param() const;
  ::tidl_meta_arch::TIDLNmsParam* release_nms_param();
  ::tidl_meta_arch::TIDLNmsParam* mutable_nms_param();
  void set_allocated_nms_param(::tidl_meta_arch::TIDLNmsParam* nms_param);
  private:
  const ::tidl_meta_arch::TIDLNmsParam& _internal_nms_param() const;
  ::tidl_meta_arch::TIDLNmsParam* _internal_mutable_nms_param();
  public:

  // optional .tidl_meta_arch.TIDLOdSaveParams save_output_param = 5;
  bool has_save_output_param() const;
  private:
  bool _internal_has_save_output_param() const;
  public:
  void clear_save_output_param();
  const ::tidl_meta_arch::TIDLOdSaveParams& save_output_param() const;
  ::tidl_meta_arch::TIDLOdSaveParams* release_save_output_param();
  ::tidl_meta_arch::TIDLOdSaveParams* mutable_save_output_param();
  void set_allocated_save_output_param(::tidl_meta_arch::TIDLOdSaveParams* save_output_param);
  private:
  const ::tidl_meta_arch::TIDLOdSaveParams& _internal_save_output_param() const;
  ::tidl_meta_arch::TIDLOdSaveParams* _internal_mutable_save_output_param();
  public:

  // optional .tidl_meta_arch.TIDLCameraIntrinsicParams camera_intrinsic_params = 16;
  bool has_camera_intrinsic_params() const;
  private:
  bool _internal_has_camera_intrinsic_params() const;
  public:
  void clear_camera_intrinsic_params();
  const ::tidl_meta_arch::TIDLCameraIntrinsicParams& camera_intrinsic_params() const;
  ::tidl_meta_arch::TIDLCameraIntrinsicParams* release_camera_intrinsic_params();
  ::tidl_meta_arch::TIDLCameraIntrinsicParams* mutable_camera_intrinsic_params();
  void set_allocated_camera_intrinsic_params(::tidl_meta_arch::TIDLCameraIntrinsicParams* camera_intrinsic_params);
  private:
  const ::tidl_meta_arch::TIDLCameraIntrinsicParams& _internal_camera_intrinsic_params() const;
  ::tidl_meta_arch::TIDLCameraIntrinsicParams* _internal_mutable_camera_intrinsic_params();
  public:

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  private:
  bool _internal_has_num_classes() const;
  public:
  void clear_num_classes();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_classes() const;
  void set_num_classes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_classes() const;
  void _internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 background_label_id = 3 [default = 0];
  bool has_background_label_id() const;
  private:
  bool _internal_has_background_label_id() const;
  public:
  void clear_background_label_id();
  ::PROTOBUF_NAMESPACE_ID::int32 background_label_id() const;
  void set_background_label_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_background_label_id() const;
  void _internal_set_background_label_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float confidence_threshold = 9;
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional bool variance_encoded_in_target = 8 [default = false];
  bool has_variance_encoded_in_target() const;
  private:
  bool _internal_has_variance_encoded_in_target() const;
  public:
  void clear_variance_encoded_in_target();
  bool variance_encoded_in_target() const;
  void set_variance_encoded_in_target(bool value);
  private:
  bool _internal_variance_encoded_in_target() const;
  void _internal_set_variance_encoded_in_target(bool value);
  public:

  // optional bool visualize = 10 [default = false];
  bool has_visualize() const;
  private:
  bool _internal_has_visualize() const;
  public:
  void clear_visualize();
  bool visualize() const;
  void set_visualize(bool value);
  private:
  bool _internal_visualize() const;
  void _internal_set_visualize(bool value);
  public:

  // optional bool keypoint_confidence = 14 [default = false];
  bool has_keypoint_confidence() const;
  private:
  bool _internal_has_keypoint_confidence() const;
  public:
  void clear_keypoint_confidence();
  bool keypoint_confidence() const;
  void set_keypoint_confidence(bool value);
  private:
  bool _internal_keypoint_confidence() const;
  void _internal_set_keypoint_confidence(bool value);
  public:

  // optional float visualize_threshold = 11;
  bool has_visualize_threshold() const;
  private:
  bool _internal_has_visualize_threshold() const;
  public:
  void clear_visualize_threshold();
  float visualize_threshold() const;
  void set_visualize_threshold(float value);
  private:
  float _internal_visualize_threshold() const;
  void _internal_set_visualize_threshold(float value);
  public:

  // optional uint32 num_keypoint = 13 [default = 0];
  bool has_num_keypoint() const;
  private:
  bool _internal_has_num_keypoint() const;
  public:
  void clear_num_keypoint();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_keypoint() const;
  void set_num_keypoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_keypoint() const;
  void _internal_set_num_keypoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sub_code_type = 15 [default = 0];
  bool has_sub_code_type() const;
  private:
  bool _internal_has_sub_code_type() const;
  public:
  void clear_sub_code_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_code_type() const;
  void set_sub_code_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_code_type() const;
  void _internal_set_sub_code_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 keep_top_k = 7 [default = -1];
  bool has_keep_top_k() const;
  private:
  bool _internal_has_keep_top_k() const;
  public:
  void clear_keep_top_k();
  ::PROTOBUF_NAMESPACE_ID::int32 keep_top_k() const;
  void set_keep_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keep_top_k() const;
  void _internal_set_keep_top_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool share_location = 2 [default = true];
  bool has_share_location() const;
  private:
  bool _internal_has_share_location() const;
  public:
  void clear_share_location();
  bool share_location() const;
  void set_share_location(bool value);
  private:
  bool _internal_share_location() const;
  void _internal_set_share_location(bool value);
  public:

  // optional .tidl_meta_arch.TIDLBoxCodeType code_type = 6 [default = CORNER];
  bool has_code_type() const;
  private:
  bool _internal_has_code_type() const;
  public:
  void clear_code_type();
  ::tidl_meta_arch::TIDLBoxCodeType code_type() const;
  void set_code_type(::tidl_meta_arch::TIDLBoxCodeType value);
  private:
  ::tidl_meta_arch::TIDLBoxCodeType _internal_code_type() const;
  void _internal_set_code_type(::tidl_meta_arch::TIDLBoxCodeType value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TIDLOdPostProc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_file_;
  ::tidl_meta_arch::TIDLNmsParam* nms_param_;
  ::tidl_meta_arch::TIDLOdSaveParams* save_output_param_;
  ::tidl_meta_arch::TIDLCameraIntrinsicParams* camera_intrinsic_params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_classes_;
  ::PROTOBUF_NAMESPACE_ID::int32 background_label_id_;
  float confidence_threshold_;
  bool variance_encoded_in_target_;
  bool visualize_;
  bool keypoint_confidence_;
  float visualize_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_keypoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_code_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 keep_top_k_;
  bool share_location_;
  int code_type_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TidlMaSsd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TidlMaSsd) */ {
 public:
  TidlMaSsd();
  virtual ~TidlMaSsd();

  TidlMaSsd(const TidlMaSsd& from);
  TidlMaSsd(TidlMaSsd&& from) noexcept
    : TidlMaSsd() {
    *this = ::std::move(from);
  }

  inline TidlMaSsd& operator=(const TidlMaSsd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TidlMaSsd& operator=(TidlMaSsd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TidlMaSsd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TidlMaSsd* internal_default_instance() {
    return reinterpret_cast<const TidlMaSsd*>(
               &_TidlMaSsd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TidlMaSsd& a, TidlMaSsd& b) {
    a.Swap(&b);
  }
  inline void Swap(TidlMaSsd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TidlMaSsd* New() const final {
    return CreateMaybeMessage<TidlMaSsd>(nullptr);
  }

  TidlMaSsd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TidlMaSsd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TidlMaSsd& from);
  void MergeFrom(const TidlMaSsd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TidlMaSsd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TidlMaSsd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxInputFieldNumber = 1,
    kClassInputFieldNumber = 2,
    kPriorBoxParamFieldNumber = 8,
    kOutputFieldNumber = 3,
    kNameFieldNumber = 4,
    kDetectionOutputParamFieldNumber = 9,
    kInWidthFieldNumber = 5,
    kInHeightFieldNumber = 6,
    kDataLayoutFieldNumber = 10,
    kScoreConverterFieldNumber = 7,
  };
  // repeated string box_input = 1;
  int box_input_size() const;
  private:
  int _internal_box_input_size() const;
  public:
  void clear_box_input();
  const std::string& box_input(int index) const;
  std::string* mutable_box_input(int index);
  void set_box_input(int index, const std::string& value);
  void set_box_input(int index, std::string&& value);
  void set_box_input(int index, const char* value);
  void set_box_input(int index, const char* value, size_t size);
  std::string* add_box_input();
  void add_box_input(const std::string& value);
  void add_box_input(std::string&& value);
  void add_box_input(const char* value);
  void add_box_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& box_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_box_input();
  private:
  const std::string& _internal_box_input(int index) const;
  std::string* _internal_add_box_input();
  public:

  // repeated string class_input = 2;
  int class_input_size() const;
  private:
  int _internal_class_input_size() const;
  public:
  void clear_class_input();
  const std::string& class_input(int index) const;
  std::string* mutable_class_input(int index);
  void set_class_input(int index, const std::string& value);
  void set_class_input(int index, std::string&& value);
  void set_class_input(int index, const char* value);
  void set_class_input(int index, const char* value, size_t size);
  std::string* add_class_input();
  void add_class_input(const std::string& value);
  void add_class_input(std::string&& value);
  void add_class_input(const char* value);
  void add_class_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& class_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_class_input();
  private:
  const std::string& _internal_class_input(int index) const;
  std::string* _internal_add_class_input();
  public:

  // repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
  int prior_box_param_size() const;
  private:
  int _internal_prior_box_param_size() const;
  public:
  void clear_prior_box_param();
  ::tidl_meta_arch::PriorBoxParameter* mutable_prior_box_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter >*
      mutable_prior_box_param();
  private:
  const ::tidl_meta_arch::PriorBoxParameter& _internal_prior_box_param(int index) const;
  ::tidl_meta_arch::PriorBoxParameter* _internal_add_prior_box_param();
  public:
  const ::tidl_meta_arch::PriorBoxParameter& prior_box_param(int index) const;
  ::tidl_meta_arch::PriorBoxParameter* add_prior_box_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter >&
      prior_box_param() const;

  // optional string output = 3;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const std::string& output() const;
  void set_output(const std::string& value);
  void set_output(std::string&& value);
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  std::string* mutable_output();
  std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
  bool has_detection_output_param() const;
  private:
  bool _internal_has_detection_output_param() const;
  public:
  void clear_detection_output_param();
  const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* release_detection_output_param();
  ::tidl_meta_arch::TIDLOdPostProc* mutable_detection_output_param();
  void set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param);
  private:
  const ::tidl_meta_arch::TIDLOdPostProc& _internal_detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* _internal_mutable_detection_output_param();
  public:

  // optional uint32 in_width = 5;
  bool has_in_width() const;
  private:
  bool _internal_has_in_width() const;
  public:
  void clear_in_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 in_width() const;
  void set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_width() const;
  void _internal_set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 in_height = 6;
  bool has_in_height() const;
  private:
  bool _internal_has_in_height() const;
  public:
  void clear_in_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 in_height() const;
  void set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_height() const;
  void _internal_set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
  bool has_data_layout() const;
  private:
  bool _internal_has_data_layout() const;
  public:
  void clear_data_layout();
  ::tidl_meta_arch::TIDLAnchorDataLayout data_layout() const;
  void set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value);
  private:
  ::tidl_meta_arch::TIDLAnchorDataLayout _internal_data_layout() const;
  void _internal_set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value);
  public:

  // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
  bool has_score_converter() const;
  private:
  bool _internal_has_score_converter() const;
  public:
  void clear_score_converter();
  ::tidl_meta_arch::TIDLScoreConverter score_converter() const;
  void set_score_converter(::tidl_meta_arch::TIDLScoreConverter value);
  private:
  ::tidl_meta_arch::TIDLScoreConverter _internal_score_converter() const;
  void _internal_set_score_converter(::tidl_meta_arch::TIDLScoreConverter value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TidlMaSsd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> box_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> class_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter > prior_box_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tidl_meta_arch::TIDLOdPostProc* detection_output_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_height_;
  int data_layout_;
  int score_converter_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TidlMaCaffeSsd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TidlMaCaffeSsd) */ {
 public:
  TidlMaCaffeSsd();
  virtual ~TidlMaCaffeSsd();

  TidlMaCaffeSsd(const TidlMaCaffeSsd& from);
  TidlMaCaffeSsd(TidlMaCaffeSsd&& from) noexcept
    : TidlMaCaffeSsd() {
    *this = ::std::move(from);
  }

  inline TidlMaCaffeSsd& operator=(const TidlMaCaffeSsd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TidlMaCaffeSsd& operator=(TidlMaCaffeSsd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TidlMaCaffeSsd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TidlMaCaffeSsd* internal_default_instance() {
    return reinterpret_cast<const TidlMaCaffeSsd*>(
               &_TidlMaCaffeSsd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TidlMaCaffeSsd& a, TidlMaCaffeSsd& b) {
    a.Swap(&b);
  }
  inline void Swap(TidlMaCaffeSsd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TidlMaCaffeSsd* New() const final {
    return CreateMaybeMessage<TidlMaCaffeSsd>(nullptr);
  }

  TidlMaCaffeSsd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TidlMaCaffeSsd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TidlMaCaffeSsd& from);
  void MergeFrom(const TidlMaCaffeSsd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TidlMaCaffeSsd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TidlMaCaffeSsd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxInputFieldNumber = 1,
    kClassInputFieldNumber = 2,
    kOutputFieldNumber = 3,
    kPriorBoxParamFieldNumber = 8,
    kNameFieldNumber = 4,
    kFrameworkFieldNumber = 11,
    kDetectionOutputParamFieldNumber = 9,
    kInWidthFieldNumber = 5,
    kInHeightFieldNumber = 6,
    kDataLayoutFieldNumber = 10,
    kScoreConverterFieldNumber = 7,
  };
  // repeated string box_input = 1;
  int box_input_size() const;
  private:
  int _internal_box_input_size() const;
  public:
  void clear_box_input();
  const std::string& box_input(int index) const;
  std::string* mutable_box_input(int index);
  void set_box_input(int index, const std::string& value);
  void set_box_input(int index, std::string&& value);
  void set_box_input(int index, const char* value);
  void set_box_input(int index, const char* value, size_t size);
  std::string* add_box_input();
  void add_box_input(const std::string& value);
  void add_box_input(std::string&& value);
  void add_box_input(const char* value);
  void add_box_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& box_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_box_input();
  private:
  const std::string& _internal_box_input(int index) const;
  std::string* _internal_add_box_input();
  public:

  // repeated string class_input = 2;
  int class_input_size() const;
  private:
  int _internal_class_input_size() const;
  public:
  void clear_class_input();
  const std::string& class_input(int index) const;
  std::string* mutable_class_input(int index);
  void set_class_input(int index, const std::string& value);
  void set_class_input(int index, std::string&& value);
  void set_class_input(int index, const char* value);
  void set_class_input(int index, const char* value, size_t size);
  std::string* add_class_input();
  void add_class_input(const std::string& value);
  void add_class_input(std::string&& value);
  void add_class_input(const char* value);
  void add_class_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& class_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_class_input();
  private:
  const std::string& _internal_class_input(int index) const;
  std::string* _internal_add_class_input();
  public:

  // repeated string output = 3;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  const std::string& output(int index) const;
  std::string* mutable_output(int index);
  void set_output(int index, const std::string& value);
  void set_output(int index, std::string&& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  std::string* add_output();
  void add_output(const std::string& value);
  void add_output(std::string&& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output();
  private:
  const std::string& _internal_output(int index) const;
  std::string* _internal_add_output();
  public:

  // repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
  int prior_box_param_size() const;
  private:
  int _internal_prior_box_param_size() const;
  public:
  void clear_prior_box_param();
  ::tidl_meta_arch::PriorBoxParameter* mutable_prior_box_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter >*
      mutable_prior_box_param();
  private:
  const ::tidl_meta_arch::PriorBoxParameter& _internal_prior_box_param(int index) const;
  ::tidl_meta_arch::PriorBoxParameter* _internal_add_prior_box_param();
  public:
  const ::tidl_meta_arch::PriorBoxParameter& prior_box_param(int index) const;
  ::tidl_meta_arch::PriorBoxParameter* add_prior_box_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter >&
      prior_box_param() const;

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string framework = 11;
  bool has_framework() const;
  private:
  bool _internal_has_framework() const;
  public:
  void clear_framework();
  const std::string& framework() const;
  void set_framework(const std::string& value);
  void set_framework(std::string&& value);
  void set_framework(const char* value);
  void set_framework(const char* value, size_t size);
  std::string* mutable_framework();
  std::string* release_framework();
  void set_allocated_framework(std::string* framework);
  private:
  const std::string& _internal_framework() const;
  void _internal_set_framework(const std::string& value);
  std::string* _internal_mutable_framework();
  public:

  // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
  bool has_detection_output_param() const;
  private:
  bool _internal_has_detection_output_param() const;
  public:
  void clear_detection_output_param();
  const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* release_detection_output_param();
  ::tidl_meta_arch::TIDLOdPostProc* mutable_detection_output_param();
  void set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param);
  private:
  const ::tidl_meta_arch::TIDLOdPostProc& _internal_detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* _internal_mutable_detection_output_param();
  public:

  // optional uint32 in_width = 5;
  bool has_in_width() const;
  private:
  bool _internal_has_in_width() const;
  public:
  void clear_in_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 in_width() const;
  void set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_width() const;
  void _internal_set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 in_height = 6;
  bool has_in_height() const;
  private:
  bool _internal_has_in_height() const;
  public:
  void clear_in_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 in_height() const;
  void set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_height() const;
  void _internal_set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
  bool has_data_layout() const;
  private:
  bool _internal_has_data_layout() const;
  public:
  void clear_data_layout();
  ::tidl_meta_arch::TIDLAnchorDataLayout data_layout() const;
  void set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value);
  private:
  ::tidl_meta_arch::TIDLAnchorDataLayout _internal_data_layout() const;
  void _internal_set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value);
  public:

  // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
  bool has_score_converter() const;
  private:
  bool _internal_has_score_converter() const;
  public:
  void clear_score_converter();
  ::tidl_meta_arch::TIDLScoreConverter score_converter() const;
  void set_score_converter(::tidl_meta_arch::TIDLScoreConverter value);
  private:
  ::tidl_meta_arch::TIDLScoreConverter _internal_score_converter() const;
  void _internal_set_score_converter(::tidl_meta_arch::TIDLScoreConverter value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TidlMaCaffeSsd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> box_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> class_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter > prior_box_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr framework_;
  ::tidl_meta_arch::TIDLOdPostProc* detection_output_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_height_;
  int data_layout_;
  int score_converter_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TidlMaTfOdApiSsd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TidlMaTfOdApiSsd) */ {
 public:
  TidlMaTfOdApiSsd();
  virtual ~TidlMaTfOdApiSsd();

  TidlMaTfOdApiSsd(const TidlMaTfOdApiSsd& from);
  TidlMaTfOdApiSsd(TidlMaTfOdApiSsd&& from) noexcept
    : TidlMaTfOdApiSsd() {
    *this = ::std::move(from);
  }

  inline TidlMaTfOdApiSsd& operator=(const TidlMaTfOdApiSsd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TidlMaTfOdApiSsd& operator=(TidlMaTfOdApiSsd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TidlMaTfOdApiSsd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TidlMaTfOdApiSsd* internal_default_instance() {
    return reinterpret_cast<const TidlMaTfOdApiSsd*>(
               &_TidlMaTfOdApiSsd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TidlMaTfOdApiSsd& a, TidlMaTfOdApiSsd& b) {
    a.Swap(&b);
  }
  inline void Swap(TidlMaTfOdApiSsd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TidlMaTfOdApiSsd* New() const final {
    return CreateMaybeMessage<TidlMaTfOdApiSsd>(nullptr);
  }

  TidlMaTfOdApiSsd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TidlMaTfOdApiSsd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TidlMaTfOdApiSsd& from);
  void MergeFrom(const TidlMaTfOdApiSsd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TidlMaTfOdApiSsd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TidlMaTfOdApiSsd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TidlMaTfOdApiSsd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TidlMaFasterRcnn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TidlMaFasterRcnn) */ {
 public:
  TidlMaFasterRcnn();
  virtual ~TidlMaFasterRcnn();

  TidlMaFasterRcnn(const TidlMaFasterRcnn& from);
  TidlMaFasterRcnn(TidlMaFasterRcnn&& from) noexcept
    : TidlMaFasterRcnn() {
    *this = ::std::move(from);
  }

  inline TidlMaFasterRcnn& operator=(const TidlMaFasterRcnn& from) {
    CopyFrom(from);
    return *this;
  }
  inline TidlMaFasterRcnn& operator=(TidlMaFasterRcnn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TidlMaFasterRcnn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TidlMaFasterRcnn* internal_default_instance() {
    return reinterpret_cast<const TidlMaFasterRcnn*>(
               &_TidlMaFasterRcnn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TidlMaFasterRcnn& a, TidlMaFasterRcnn& b) {
    a.Swap(&b);
  }
  inline void Swap(TidlMaFasterRcnn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TidlMaFasterRcnn* New() const final {
    return CreateMaybeMessage<TidlMaFasterRcnn>(nullptr);
  }

  TidlMaFasterRcnn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TidlMaFasterRcnn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TidlMaFasterRcnn& from);
  void MergeFrom(const TidlMaFasterRcnn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TidlMaFasterRcnn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TidlMaFasterRcnn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TidlMaFasterRcnn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TidlYoloOd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TidlYoloOd) */ {
 public:
  TidlYoloOd();
  virtual ~TidlYoloOd();

  TidlYoloOd(const TidlYoloOd& from);
  TidlYoloOd(TidlYoloOd&& from) noexcept
    : TidlYoloOd() {
    *this = ::std::move(from);
  }

  inline TidlYoloOd& operator=(const TidlYoloOd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TidlYoloOd& operator=(TidlYoloOd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TidlYoloOd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TidlYoloOd* internal_default_instance() {
    return reinterpret_cast<const TidlYoloOd*>(
               &_TidlYoloOd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TidlYoloOd& a, TidlYoloOd& b) {
    a.Swap(&b);
  }
  inline void Swap(TidlYoloOd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TidlYoloOd* New() const final {
    return CreateMaybeMessage<TidlYoloOd>(nullptr);
  }

  TidlYoloOd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TidlYoloOd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TidlYoloOd& from);
  void MergeFrom(const TidlYoloOd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TidlYoloOd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TidlYoloOd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYoloParamFieldNumber = 1,
    kOutputFieldNumber = 6,
    kNameFieldNumber = 3,
    kFrameworkFieldNumber = 7,
    kDetectionOutputParamFieldNumber = 2,
    kInWidthFieldNumber = 4,
    kInHeightFieldNumber = 5,
  };
  // repeated .tidl_meta_arch.TIDLYoloParams yolo_param = 1;
  int yolo_param_size() const;
  private:
  int _internal_yolo_param_size() const;
  public:
  void clear_yolo_param();
  ::tidl_meta_arch::TIDLYoloParams* mutable_yolo_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TIDLYoloParams >*
      mutable_yolo_param();
  private:
  const ::tidl_meta_arch::TIDLYoloParams& _internal_yolo_param(int index) const;
  ::tidl_meta_arch::TIDLYoloParams* _internal_add_yolo_param();
  public:
  const ::tidl_meta_arch::TIDLYoloParams& yolo_param(int index) const;
  ::tidl_meta_arch::TIDLYoloParams* add_yolo_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TIDLYoloParams >&
      yolo_param() const;

  // repeated string output = 6;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  const std::string& output(int index) const;
  std::string* mutable_output(int index);
  void set_output(int index, const std::string& value);
  void set_output(int index, std::string&& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  std::string* add_output();
  void add_output(const std::string& value);
  void add_output(std::string&& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output();
  private:
  const std::string& _internal_output(int index) const;
  std::string* _internal_add_output();
  public:

  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string framework = 7;
  bool has_framework() const;
  private:
  bool _internal_has_framework() const;
  public:
  void clear_framework();
  const std::string& framework() const;
  void set_framework(const std::string& value);
  void set_framework(std::string&& value);
  void set_framework(const char* value);
  void set_framework(const char* value, size_t size);
  std::string* mutable_framework();
  std::string* release_framework();
  void set_allocated_framework(std::string* framework);
  private:
  const std::string& _internal_framework() const;
  void _internal_set_framework(const std::string& value);
  std::string* _internal_mutable_framework();
  public:

  // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 2;
  bool has_detection_output_param() const;
  private:
  bool _internal_has_detection_output_param() const;
  public:
  void clear_detection_output_param();
  const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* release_detection_output_param();
  ::tidl_meta_arch::TIDLOdPostProc* mutable_detection_output_param();
  void set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param);
  private:
  const ::tidl_meta_arch::TIDLOdPostProc& _internal_detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* _internal_mutable_detection_output_param();
  public:

  // required uint32 in_width = 4;
  bool has_in_width() const;
  private:
  bool _internal_has_in_width() const;
  public:
  void clear_in_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 in_width() const;
  void set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_width() const;
  void _internal_set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 in_height = 5;
  bool has_in_height() const;
  private:
  bool _internal_has_in_height() const;
  public:
  void clear_in_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 in_height() const;
  void set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_height() const;
  void _internal_set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TidlYoloOd)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TIDLYoloParams > yolo_param_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr framework_;
  ::tidl_meta_arch::TIDLOdPostProc* detection_output_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_height_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TIDLYoloParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TIDLYoloParams) */ {
 public:
  TIDLYoloParams();
  virtual ~TIDLYoloParams();

  TIDLYoloParams(const TIDLYoloParams& from);
  TIDLYoloParams(TIDLYoloParams&& from) noexcept
    : TIDLYoloParams() {
    *this = ::std::move(from);
  }

  inline TIDLYoloParams& operator=(const TIDLYoloParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TIDLYoloParams& operator=(TIDLYoloParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TIDLYoloParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TIDLYoloParams* internal_default_instance() {
    return reinterpret_cast<const TIDLYoloParams*>(
               &_TIDLYoloParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TIDLYoloParams& a, TIDLYoloParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TIDLYoloParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TIDLYoloParams* New() const final {
    return CreateMaybeMessage<TIDLYoloParams>(nullptr);
  }

  TIDLYoloParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TIDLYoloParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TIDLYoloParams& from);
  void MergeFrom(const TIDLYoloParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TIDLYoloParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TIDLYoloParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorWidthFieldNumber = 2,
    kAnchorHeightFieldNumber = 3,
    kInputFieldNumber = 1,
  };
  // repeated float anchor_width = 2;
  int anchor_width_size() const;
  private:
  int _internal_anchor_width_size() const;
  public:
  void clear_anchor_width();
  private:
  float _internal_anchor_width(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_width() const;
  void _internal_add_anchor_width(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_width();
  public:
  float anchor_width(int index) const;
  void set_anchor_width(int index, float value);
  void add_anchor_width(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_width() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_width();

  // repeated float anchor_height = 3;
  int anchor_height_size() const;
  private:
  int _internal_anchor_height_size() const;
  public:
  void clear_anchor_height();
  private:
  float _internal_anchor_height(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_anchor_height() const;
  void _internal_add_anchor_height(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_anchor_height();
  public:
  float anchor_height(int index) const;
  void set_anchor_height(int index, float value);
  void add_anchor_height(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      anchor_height() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_anchor_height();

  // required string input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const std::string& input() const;
  void set_input(const std::string& value);
  void set_input(std::string&& value);
  void set_input(const char* value);
  void set_input(const char* value, size_t size);
  std::string* mutable_input();
  std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TIDLYoloParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_width_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > anchor_height_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class RetinaNetAnchorParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.RetinaNetAnchorParameter) */ {
 public:
  RetinaNetAnchorParameter();
  virtual ~RetinaNetAnchorParameter();

  RetinaNetAnchorParameter(const RetinaNetAnchorParameter& from);
  RetinaNetAnchorParameter(RetinaNetAnchorParameter&& from) noexcept
    : RetinaNetAnchorParameter() {
    *this = ::std::move(from);
  }

  inline RetinaNetAnchorParameter& operator=(const RetinaNetAnchorParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetinaNetAnchorParameter& operator=(RetinaNetAnchorParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetinaNetAnchorParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetinaNetAnchorParameter* internal_default_instance() {
    return reinterpret_cast<const RetinaNetAnchorParameter*>(
               &_RetinaNetAnchorParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RetinaNetAnchorParameter& a, RetinaNetAnchorParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RetinaNetAnchorParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetinaNetAnchorParameter* New() const final {
    return CreateMaybeMessage<RetinaNetAnchorParameter>(nullptr);
  }

  RetinaNetAnchorParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetinaNetAnchorParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetinaNetAnchorParameter& from);
  void MergeFrom(const RetinaNetAnchorParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetinaNetAnchorParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.RetinaNetAnchorParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAspectRatioFieldNumber = 1,
    kOctaveBaseScaleFieldNumber = 2,
    kScalesPerOctaveFieldNumber = 3,
  };
  // repeated float aspect_ratio = 1;
  int aspect_ratio_size() const;
  private:
  int _internal_aspect_ratio_size() const;
  public:
  void clear_aspect_ratio();
  private:
  float _internal_aspect_ratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_aspect_ratio() const;
  void _internal_add_aspect_ratio(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_aspect_ratio();
  public:
  float aspect_ratio(int index) const;
  void set_aspect_ratio(int index, float value);
  void add_aspect_ratio(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      aspect_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_aspect_ratio();

  // required float octave_base_scale = 2;
  bool has_octave_base_scale() const;
  private:
  bool _internal_has_octave_base_scale() const;
  public:
  void clear_octave_base_scale();
  float octave_base_scale() const;
  void set_octave_base_scale(float value);
  private:
  float _internal_octave_base_scale() const;
  void _internal_set_octave_base_scale(float value);
  public:

  // required uint32 scales_per_octave = 3;
  bool has_scales_per_octave() const;
  private:
  bool _internal_has_scales_per_octave() const;
  public:
  void clear_scales_per_octave();
  ::PROTOBUF_NAMESPACE_ID::uint32 scales_per_octave() const;
  void set_scales_per_octave(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scales_per_octave() const;
  void _internal_set_scales_per_octave(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.RetinaNetAnchorParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > aspect_ratio_;
  float octave_base_scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scales_per_octave_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TidlMaRetinaNet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TidlMaRetinaNet) */ {
 public:
  TidlMaRetinaNet();
  virtual ~TidlMaRetinaNet();

  TidlMaRetinaNet(const TidlMaRetinaNet& from);
  TidlMaRetinaNet(TidlMaRetinaNet&& from) noexcept
    : TidlMaRetinaNet() {
    *this = ::std::move(from);
  }

  inline TidlMaRetinaNet& operator=(const TidlMaRetinaNet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TidlMaRetinaNet& operator=(TidlMaRetinaNet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TidlMaRetinaNet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TidlMaRetinaNet* internal_default_instance() {
    return reinterpret_cast<const TidlMaRetinaNet*>(
               &_TidlMaRetinaNet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TidlMaRetinaNet& a, TidlMaRetinaNet& b) {
    a.Swap(&b);
  }
  inline void Swap(TidlMaRetinaNet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TidlMaRetinaNet* New() const final {
    return CreateMaybeMessage<TidlMaRetinaNet>(nullptr);
  }

  TidlMaRetinaNet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TidlMaRetinaNet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TidlMaRetinaNet& from);
  void MergeFrom(const TidlMaRetinaNet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TidlMaRetinaNet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TidlMaRetinaNet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxInputFieldNumber = 1,
    kClassInputFieldNumber = 2,
    kOutputFieldNumber = 3,
    kNameFieldNumber = 4,
    kFrameworkFieldNumber = 17,
    kAnchorParamFieldNumber = 12,
    kDetectionOutputParamFieldNumber = 13,
    kInWidthFieldNumber = 5,
    kInHeightFieldNumber = 6,
    kXOffsetFieldNumber = 14,
    kYOffsetFieldNumber = 15,
    kAnchorboxOrderFieldNumber = 16,
    kScoreConverterFieldNumber = 11,
    kXScaleFieldNumber = 7,
    kYScaleFieldNumber = 8,
    kWidthScaleFieldNumber = 9,
    kHeightScaleFieldNumber = 10,
  };
  // repeated string box_input = 1;
  int box_input_size() const;
  private:
  int _internal_box_input_size() const;
  public:
  void clear_box_input();
  const std::string& box_input(int index) const;
  std::string* mutable_box_input(int index);
  void set_box_input(int index, const std::string& value);
  void set_box_input(int index, std::string&& value);
  void set_box_input(int index, const char* value);
  void set_box_input(int index, const char* value, size_t size);
  std::string* add_box_input();
  void add_box_input(const std::string& value);
  void add_box_input(std::string&& value);
  void add_box_input(const char* value);
  void add_box_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& box_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_box_input();
  private:
  const std::string& _internal_box_input(int index) const;
  std::string* _internal_add_box_input();
  public:

  // repeated string class_input = 2;
  int class_input_size() const;
  private:
  int _internal_class_input_size() const;
  public:
  void clear_class_input();
  const std::string& class_input(int index) const;
  std::string* mutable_class_input(int index);
  void set_class_input(int index, const std::string& value);
  void set_class_input(int index, std::string&& value);
  void set_class_input(int index, const char* value);
  void set_class_input(int index, const char* value, size_t size);
  std::string* add_class_input();
  void add_class_input(const std::string& value);
  void add_class_input(std::string&& value);
  void add_class_input(const char* value);
  void add_class_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& class_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_class_input();
  private:
  const std::string& _internal_class_input(int index) const;
  std::string* _internal_add_class_input();
  public:

  // repeated string output = 3;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  const std::string& output(int index) const;
  std::string* mutable_output(int index);
  void set_output(int index, const std::string& value);
  void set_output(int index, std::string&& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  std::string* add_output();
  void add_output(const std::string& value);
  void add_output(std::string&& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output();
  private:
  const std::string& _internal_output(int index) const;
  std::string* _internal_add_output();
  public:

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string framework = 17;
  bool has_framework() const;
  private:
  bool _internal_has_framework() const;
  public:
  void clear_framework();
  const std::string& framework() const;
  void set_framework(const std::string& value);
  void set_framework(std::string&& value);
  void set_framework(const char* value);
  void set_framework(const char* value, size_t size);
  std::string* mutable_framework();
  std::string* release_framework();
  void set_allocated_framework(std::string* framework);
  private:
  const std::string& _internal_framework() const;
  void _internal_set_framework(const std::string& value);
  std::string* _internal_mutable_framework();
  public:

  // required .tidl_meta_arch.RetinaNetAnchorParameter anchor_param = 12;
  bool has_anchor_param() const;
  private:
  bool _internal_has_anchor_param() const;
  public:
  void clear_anchor_param();
  const ::tidl_meta_arch::RetinaNetAnchorParameter& anchor_param() const;
  ::tidl_meta_arch::RetinaNetAnchorParameter* release_anchor_param();
  ::tidl_meta_arch::RetinaNetAnchorParameter* mutable_anchor_param();
  void set_allocated_anchor_param(::tidl_meta_arch::RetinaNetAnchorParameter* anchor_param);
  private:
  const ::tidl_meta_arch::RetinaNetAnchorParameter& _internal_anchor_param() const;
  ::tidl_meta_arch::RetinaNetAnchorParameter* _internal_mutable_anchor_param();
  public:

  // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 13;
  bool has_detection_output_param() const;
  private:
  bool _internal_has_detection_output_param() const;
  public:
  void clear_detection_output_param();
  const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* release_detection_output_param();
  ::tidl_meta_arch::TIDLOdPostProc* mutable_detection_output_param();
  void set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param);
  private:
  const ::tidl_meta_arch::TIDLOdPostProc& _internal_detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* _internal_mutable_detection_output_param();
  public:

  // required uint32 in_width = 5;
  bool has_in_width() const;
  private:
  bool _internal_has_in_width() const;
  public:
  void clear_in_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 in_width() const;
  void set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_width() const;
  void _internal_set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 in_height = 6;
  bool has_in_height() const;
  private:
  bool _internal_has_in_height() const;
  public:
  void clear_in_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 in_height() const;
  void set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in_height() const;
  void _internal_set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float x_offset = 14 [default = 0];
  bool has_x_offset() const;
  private:
  bool _internal_has_x_offset() const;
  public:
  void clear_x_offset();
  float x_offset() const;
  void set_x_offset(float value);
  private:
  float _internal_x_offset() const;
  void _internal_set_x_offset(float value);
  public:

  // optional float y_offset = 15 [default = 0];
  bool has_y_offset() const;
  private:
  bool _internal_has_y_offset() const;
  public:
  void clear_y_offset();
  float y_offset() const;
  void set_y_offset(float value);
  private:
  float _internal_y_offset() const;
  void _internal_set_y_offset(float value);
  public:

  // optional uint32 anchorbox_order = 16 [default = 0];
  bool has_anchorbox_order() const;
  private:
  bool _internal_has_anchorbox_order() const;
  public:
  void clear_anchorbox_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 anchorbox_order() const;
  void set_anchorbox_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_anchorbox_order() const;
  void _internal_set_anchorbox_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 11 [default = SOFTMAX];
  bool has_score_converter() const;
  private:
  bool _internal_has_score_converter() const;
  public:
  void clear_score_converter();
  ::tidl_meta_arch::TIDLScoreConverter score_converter() const;
  void set_score_converter(::tidl_meta_arch::TIDLScoreConverter value);
  private:
  ::tidl_meta_arch::TIDLScoreConverter _internal_score_converter() const;
  void _internal_set_score_converter(::tidl_meta_arch::TIDLScoreConverter value);
  public:

  // optional float x_scale = 7 [default = 10];
  bool has_x_scale() const;
  private:
  bool _internal_has_x_scale() const;
  public:
  void clear_x_scale();
  float x_scale() const;
  void set_x_scale(float value);
  private:
  float _internal_x_scale() const;
  void _internal_set_x_scale(float value);
  public:

  // optional float y_scale = 8 [default = 10];
  bool has_y_scale() const;
  private:
  bool _internal_has_y_scale() const;
  public:
  void clear_y_scale();
  float y_scale() const;
  void set_y_scale(float value);
  private:
  float _internal_y_scale() const;
  void _internal_set_y_scale(float value);
  public:

  // optional float width_scale = 9 [default = 5];
  bool has_width_scale() const;
  private:
  bool _internal_has_width_scale() const;
  public:
  void clear_width_scale();
  float width_scale() const;
  void set_width_scale(float value);
  private:
  float _internal_width_scale() const;
  void _internal_set_width_scale(float value);
  public:

  // optional float height_scale = 10 [default = 5];
  bool has_height_scale() const;
  private:
  bool _internal_has_height_scale() const;
  public:
  void clear_height_scale();
  float height_scale() const;
  void set_height_scale(float value);
  private:
  float _internal_height_scale() const;
  void _internal_set_height_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TidlMaRetinaNet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> box_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> class_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr framework_;
  ::tidl_meta_arch::RetinaNetAnchorParameter* anchor_param_;
  ::tidl_meta_arch::TIDLOdPostProc* detection_output_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_height_;
  float x_offset_;
  float y_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 anchorbox_order_;
  int score_converter_;
  float x_scale_;
  float y_scale_;
  float width_scale_;
  float height_scale_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TidlMa3DOD :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TidlMa3DOD) */ {
 public:
  TidlMa3DOD();
  virtual ~TidlMa3DOD();

  TidlMa3DOD(const TidlMa3DOD& from);
  TidlMa3DOD(TidlMa3DOD&& from) noexcept
    : TidlMa3DOD() {
    *this = ::std::move(from);
  }

  inline TidlMa3DOD& operator=(const TidlMa3DOD& from) {
    CopyFrom(from);
    return *this;
  }
  inline TidlMa3DOD& operator=(TidlMa3DOD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TidlMa3DOD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TidlMa3DOD* internal_default_instance() {
    return reinterpret_cast<const TidlMa3DOD*>(
               &_TidlMa3DOD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TidlMa3DOD& a, TidlMa3DOD& b) {
    a.Swap(&b);
  }
  inline void Swap(TidlMa3DOD* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TidlMa3DOD* New() const final {
    return CreateMaybeMessage<TidlMa3DOD>(nullptr);
  }

  TidlMa3DOD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TidlMa3DOD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TidlMa3DOD& from);
  void MergeFrom(const TidlMa3DOD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TidlMa3DOD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TidlMa3DOD";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxInputFieldNumber = 1,
    kClassInputFieldNumber = 2,
    kDirInputFieldNumber = 3,
    kOutputFieldNumber = 4,
    kPriorBox3DodParamFieldNumber = 17,
    kNameFieldNumber = 5,
    kDetectionOutputParamFieldNumber = 18,
    kMinXFieldNumber = 6,
    kMaxXFieldNumber = 7,
    kMinYFieldNumber = 8,
    kMaxYFieldNumber = 9,
    kMinZFieldNumber = 10,
    kMaxZFieldNumber = 11,
    kVoxelSizeXFieldNumber = 12,
    kVoxelSizeYFieldNumber = 13,
    kVoxelSizeZFieldNumber = 14,
    kMaxPointsPerVoxelFieldNumber = 15,
    kDataLayoutFieldNumber = 19,
    kScoreConverterFieldNumber = 16,
  };
  // repeated string box_input = 1;
  int box_input_size() const;
  private:
  int _internal_box_input_size() const;
  public:
  void clear_box_input();
  const std::string& box_input(int index) const;
  std::string* mutable_box_input(int index);
  void set_box_input(int index, const std::string& value);
  void set_box_input(int index, std::string&& value);
  void set_box_input(int index, const char* value);
  void set_box_input(int index, const char* value, size_t size);
  std::string* add_box_input();
  void add_box_input(const std::string& value);
  void add_box_input(std::string&& value);
  void add_box_input(const char* value);
  void add_box_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& box_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_box_input();
  private:
  const std::string& _internal_box_input(int index) const;
  std::string* _internal_add_box_input();
  public:

  // repeated string class_input = 2;
  int class_input_size() const;
  private:
  int _internal_class_input_size() const;
  public:
  void clear_class_input();
  const std::string& class_input(int index) const;
  std::string* mutable_class_input(int index);
  void set_class_input(int index, const std::string& value);
  void set_class_input(int index, std::string&& value);
  void set_class_input(int index, const char* value);
  void set_class_input(int index, const char* value, size_t size);
  std::string* add_class_input();
  void add_class_input(const std::string& value);
  void add_class_input(std::string&& value);
  void add_class_input(const char* value);
  void add_class_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& class_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_class_input();
  private:
  const std::string& _internal_class_input(int index) const;
  std::string* _internal_add_class_input();
  public:

  // repeated string dir_input = 3;
  int dir_input_size() const;
  private:
  int _internal_dir_input_size() const;
  public:
  void clear_dir_input();
  const std::string& dir_input(int index) const;
  std::string* mutable_dir_input(int index);
  void set_dir_input(int index, const std::string& value);
  void set_dir_input(int index, std::string&& value);
  void set_dir_input(int index, const char* value);
  void set_dir_input(int index, const char* value, size_t size);
  std::string* add_dir_input();
  void add_dir_input(const std::string& value);
  void add_dir_input(std::string&& value);
  void add_dir_input(const char* value);
  void add_dir_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dir_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dir_input();
  private:
  const std::string& _internal_dir_input(int index) const;
  std::string* _internal_add_dir_input();
  public:

  // repeated string output = 4;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  const std::string& output(int index) const;
  std::string* mutable_output(int index);
  void set_output(int index, const std::string& value);
  void set_output(int index, std::string&& value);
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  std::string* add_output();
  void add_output(const std::string& value);
  void add_output(std::string&& value);
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output();
  private:
  const std::string& _internal_output(int index) const;
  std::string* _internal_add_output();
  public:

  // repeated .tidl_meta_arch.PriorBox3DODParameter prior_box_3dod_param = 17;
  int prior_box_3dod_param_size() const;
  private:
  int _internal_prior_box_3dod_param_size() const;
  public:
  void clear_prior_box_3dod_param();
  ::tidl_meta_arch::PriorBox3DODParameter* mutable_prior_box_3dod_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBox3DODParameter >*
      mutable_prior_box_3dod_param();
  private:
  const ::tidl_meta_arch::PriorBox3DODParameter& _internal_prior_box_3dod_param(int index) const;
  ::tidl_meta_arch::PriorBox3DODParameter* _internal_add_prior_box_3dod_param();
  public:
  const ::tidl_meta_arch::PriorBox3DODParameter& prior_box_3dod_param(int index) const;
  ::tidl_meta_arch::PriorBox3DODParameter* add_prior_box_3dod_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBox3DODParameter >&
      prior_box_3dod_param() const;

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 18;
  bool has_detection_output_param() const;
  private:
  bool _internal_has_detection_output_param() const;
  public:
  void clear_detection_output_param();
  const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* release_detection_output_param();
  ::tidl_meta_arch::TIDLOdPostProc* mutable_detection_output_param();
  void set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param);
  private:
  const ::tidl_meta_arch::TIDLOdPostProc& _internal_detection_output_param() const;
  ::tidl_meta_arch::TIDLOdPostProc* _internal_mutable_detection_output_param();
  public:

  // required float min_x = 6;
  bool has_min_x() const;
  private:
  bool _internal_has_min_x() const;
  public:
  void clear_min_x();
  float min_x() const;
  void set_min_x(float value);
  private:
  float _internal_min_x() const;
  void _internal_set_min_x(float value);
  public:

  // required float max_x = 7;
  bool has_max_x() const;
  private:
  bool _internal_has_max_x() const;
  public:
  void clear_max_x();
  float max_x() const;
  void set_max_x(float value);
  private:
  float _internal_max_x() const;
  void _internal_set_max_x(float value);
  public:

  // required float min_y = 8;
  bool has_min_y() const;
  private:
  bool _internal_has_min_y() const;
  public:
  void clear_min_y();
  float min_y() const;
  void set_min_y(float value);
  private:
  float _internal_min_y() const;
  void _internal_set_min_y(float value);
  public:

  // required float max_y = 9;
  bool has_max_y() const;
  private:
  bool _internal_has_max_y() const;
  public:
  void clear_max_y();
  float max_y() const;
  void set_max_y(float value);
  private:
  float _internal_max_y() const;
  void _internal_set_max_y(float value);
  public:

  // required float min_z = 10;
  bool has_min_z() const;
  private:
  bool _internal_has_min_z() const;
  public:
  void clear_min_z();
  float min_z() const;
  void set_min_z(float value);
  private:
  float _internal_min_z() const;
  void _internal_set_min_z(float value);
  public:

  // required float max_z = 11;
  bool has_max_z() const;
  private:
  bool _internal_has_max_z() const;
  public:
  void clear_max_z();
  float max_z() const;
  void set_max_z(float value);
  private:
  float _internal_max_z() const;
  void _internal_set_max_z(float value);
  public:

  // required float voxel_size_x = 12;
  bool has_voxel_size_x() const;
  private:
  bool _internal_has_voxel_size_x() const;
  public:
  void clear_voxel_size_x();
  float voxel_size_x() const;
  void set_voxel_size_x(float value);
  private:
  float _internal_voxel_size_x() const;
  void _internal_set_voxel_size_x(float value);
  public:

  // required float voxel_size_y = 13;
  bool has_voxel_size_y() const;
  private:
  bool _internal_has_voxel_size_y() const;
  public:
  void clear_voxel_size_y();
  float voxel_size_y() const;
  void set_voxel_size_y(float value);
  private:
  float _internal_voxel_size_y() const;
  void _internal_set_voxel_size_y(float value);
  public:

  // required float voxel_size_z = 14;
  bool has_voxel_size_z() const;
  private:
  bool _internal_has_voxel_size_z() const;
  public:
  void clear_voxel_size_z();
  float voxel_size_z() const;
  void set_voxel_size_z(float value);
  private:
  float _internal_voxel_size_z() const;
  void _internal_set_voxel_size_z(float value);
  public:

  // required uint32 max_points_per_voxel = 15;
  bool has_max_points_per_voxel() const;
  private:
  bool _internal_has_max_points_per_voxel() const;
  public:
  void clear_max_points_per_voxel();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_per_voxel() const;
  void set_max_points_per_voxel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_points_per_voxel() const;
  void _internal_set_max_points_per_voxel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 19 [default = SEPARATED];
  bool has_data_layout() const;
  private:
  bool _internal_has_data_layout() const;
  public:
  void clear_data_layout();
  ::tidl_meta_arch::TIDLAnchorDataLayout data_layout() const;
  void set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value);
  private:
  ::tidl_meta_arch::TIDLAnchorDataLayout _internal_data_layout() const;
  void _internal_set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value);
  public:

  // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 16 [default = SIGMOID];
  bool has_score_converter() const;
  private:
  bool _internal_has_score_converter() const;
  public:
  void clear_score_converter();
  ::tidl_meta_arch::TIDLScoreConverter score_converter() const;
  void set_score_converter(::tidl_meta_arch::TIDLScoreConverter value);
  private:
  ::tidl_meta_arch::TIDLScoreConverter _internal_score_converter() const;
  void _internal_set_score_converter(::tidl_meta_arch::TIDLScoreConverter value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TidlMa3DOD)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> box_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> class_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dir_input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBox3DODParameter > prior_box_3dod_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tidl_meta_arch::TIDLOdPostProc* detection_output_param_;
  float min_x_;
  float max_x_;
  float min_y_;
  float max_y_;
  float min_z_;
  float max_z_;
  float voxel_size_x_;
  float voxel_size_y_;
  float voxel_size_z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_per_voxel_;
  int data_layout_;
  int score_converter_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// -------------------------------------------------------------------

class TIDLCameraIntrinsicParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tidl_meta_arch.TIDLCameraIntrinsicParams) */ {
 public:
  TIDLCameraIntrinsicParams();
  virtual ~TIDLCameraIntrinsicParams();

  TIDLCameraIntrinsicParams(const TIDLCameraIntrinsicParams& from);
  TIDLCameraIntrinsicParams(TIDLCameraIntrinsicParams&& from) noexcept
    : TIDLCameraIntrinsicParams() {
    *this = ::std::move(from);
  }

  inline TIDLCameraIntrinsicParams& operator=(const TIDLCameraIntrinsicParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TIDLCameraIntrinsicParams& operator=(TIDLCameraIntrinsicParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TIDLCameraIntrinsicParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TIDLCameraIntrinsicParams* internal_default_instance() {
    return reinterpret_cast<const TIDLCameraIntrinsicParams*>(
               &_TIDLCameraIntrinsicParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TIDLCameraIntrinsicParams& a, TIDLCameraIntrinsicParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TIDLCameraIntrinsicParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TIDLCameraIntrinsicParams* New() const final {
    return CreateMaybeMessage<TIDLCameraIntrinsicParams>(nullptr);
  }

  TIDLCameraIntrinsicParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TIDLCameraIntrinsicParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TIDLCameraIntrinsicParams& from);
  void MergeFrom(const TIDLCameraIntrinsicParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TIDLCameraIntrinsicParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tidl_meta_arch.TIDLCameraIntrinsicParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tidl_5fmeta_5farch_2eproto);
    return ::descriptor_table_tidl_5fmeta_5farch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPxFieldNumber = 3,
    kPyFieldNumber = 4,
    kFxFieldNumber = 1,
    kFyFieldNumber = 2,
  };
  // optional float px = 3 [default = 0];
  bool has_px() const;
  private:
  bool _internal_has_px() const;
  public:
  void clear_px();
  float px() const;
  void set_px(float value);
  private:
  float _internal_px() const;
  void _internal_set_px(float value);
  public:

  // optional float py = 4 [default = 0];
  bool has_py() const;
  private:
  bool _internal_has_py() const;
  public:
  void clear_py();
  float py() const;
  void set_py(float value);
  private:
  float _internal_py() const;
  void _internal_set_py(float value);
  public:

  // optional float fx = 1 [default = 1];
  bool has_fx() const;
  private:
  bool _internal_has_fx() const;
  public:
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // optional float fy = 2 [default = 1];
  bool has_fy() const;
  private:
  bool _internal_has_fy() const;
  public:
  void clear_fy();
  float fy() const;
  void set_fy(float value);
  private:
  float _internal_fy() const;
  void _internal_set_fy(float value);
  public:

  // @@protoc_insertion_point(class_scope:tidl_meta_arch.TIDLCameraIntrinsicParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float px_;
  float py_;
  float fx_;
  float fy_;
  friend struct ::TableStruct_tidl_5fmeta_5farch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TIDLMetaArch

// optional string name = 1;
inline bool TIDLMetaArch::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TIDLMetaArch::has_name() const {
  return _internal_has_name();
}
inline void TIDLMetaArch::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TIDLMetaArch::name() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLMetaArch.name)
  return _internal_name();
}
inline void TIDLMetaArch::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLMetaArch.name)
}
inline std::string* TIDLMetaArch::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLMetaArch.name)
  return _internal_mutable_name();
}
inline const std::string& TIDLMetaArch::_internal_name() const {
  return name_.GetNoArena();
}
inline void TIDLMetaArch::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLMetaArch::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLMetaArch.name)
}
inline void TIDLMetaArch::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLMetaArch.name)
}
inline void TIDLMetaArch::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLMetaArch.name)
}
inline std::string* TIDLMetaArch::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLMetaArch::release_name() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLMetaArch.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLMetaArch::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLMetaArch.name)
}

// repeated .tidl_meta_arch.TidlMaCaffeSsd caffe_ssd = 2;
inline int TIDLMetaArch::_internal_caffe_ssd_size() const {
  return caffe_ssd_.size();
}
inline int TIDLMetaArch::caffe_ssd_size() const {
  return _internal_caffe_ssd_size();
}
inline void TIDLMetaArch::clear_caffe_ssd() {
  caffe_ssd_.Clear();
}
inline ::tidl_meta_arch::TidlMaCaffeSsd* TIDLMetaArch::mutable_caffe_ssd(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLMetaArch.caffe_ssd)
  return caffe_ssd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaCaffeSsd >*
TIDLMetaArch::mutable_caffe_ssd() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLMetaArch.caffe_ssd)
  return &caffe_ssd_;
}
inline const ::tidl_meta_arch::TidlMaCaffeSsd& TIDLMetaArch::_internal_caffe_ssd(int index) const {
  return caffe_ssd_.Get(index);
}
inline const ::tidl_meta_arch::TidlMaCaffeSsd& TIDLMetaArch::caffe_ssd(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLMetaArch.caffe_ssd)
  return _internal_caffe_ssd(index);
}
inline ::tidl_meta_arch::TidlMaCaffeSsd* TIDLMetaArch::_internal_add_caffe_ssd() {
  return caffe_ssd_.Add();
}
inline ::tidl_meta_arch::TidlMaCaffeSsd* TIDLMetaArch::add_caffe_ssd() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLMetaArch.caffe_ssd)
  return _internal_add_caffe_ssd();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaCaffeSsd >&
TIDLMetaArch::caffe_ssd() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLMetaArch.caffe_ssd)
  return caffe_ssd_;
}

// repeated .tidl_meta_arch.TidlMaTfOdApiSsd tf_od_api_ssd = 3;
inline int TIDLMetaArch::_internal_tf_od_api_ssd_size() const {
  return tf_od_api_ssd_.size();
}
inline int TIDLMetaArch::tf_od_api_ssd_size() const {
  return _internal_tf_od_api_ssd_size();
}
inline void TIDLMetaArch::clear_tf_od_api_ssd() {
  tf_od_api_ssd_.Clear();
}
inline ::tidl_meta_arch::TidlMaTfOdApiSsd* TIDLMetaArch::mutable_tf_od_api_ssd(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLMetaArch.tf_od_api_ssd)
  return tf_od_api_ssd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaTfOdApiSsd >*
TIDLMetaArch::mutable_tf_od_api_ssd() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLMetaArch.tf_od_api_ssd)
  return &tf_od_api_ssd_;
}
inline const ::tidl_meta_arch::TidlMaTfOdApiSsd& TIDLMetaArch::_internal_tf_od_api_ssd(int index) const {
  return tf_od_api_ssd_.Get(index);
}
inline const ::tidl_meta_arch::TidlMaTfOdApiSsd& TIDLMetaArch::tf_od_api_ssd(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLMetaArch.tf_od_api_ssd)
  return _internal_tf_od_api_ssd(index);
}
inline ::tidl_meta_arch::TidlMaTfOdApiSsd* TIDLMetaArch::_internal_add_tf_od_api_ssd() {
  return tf_od_api_ssd_.Add();
}
inline ::tidl_meta_arch::TidlMaTfOdApiSsd* TIDLMetaArch::add_tf_od_api_ssd() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLMetaArch.tf_od_api_ssd)
  return _internal_add_tf_od_api_ssd();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaTfOdApiSsd >&
TIDLMetaArch::tf_od_api_ssd() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLMetaArch.tf_od_api_ssd)
  return tf_od_api_ssd_;
}

// repeated .tidl_meta_arch.TidlMaSsd tidl_ssd = 4;
inline int TIDLMetaArch::_internal_tidl_ssd_size() const {
  return tidl_ssd_.size();
}
inline int TIDLMetaArch::tidl_ssd_size() const {
  return _internal_tidl_ssd_size();
}
inline void TIDLMetaArch::clear_tidl_ssd() {
  tidl_ssd_.Clear();
}
inline ::tidl_meta_arch::TidlMaSsd* TIDLMetaArch::mutable_tidl_ssd(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLMetaArch.tidl_ssd)
  return tidl_ssd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaSsd >*
TIDLMetaArch::mutable_tidl_ssd() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLMetaArch.tidl_ssd)
  return &tidl_ssd_;
}
inline const ::tidl_meta_arch::TidlMaSsd& TIDLMetaArch::_internal_tidl_ssd(int index) const {
  return tidl_ssd_.Get(index);
}
inline const ::tidl_meta_arch::TidlMaSsd& TIDLMetaArch::tidl_ssd(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLMetaArch.tidl_ssd)
  return _internal_tidl_ssd(index);
}
inline ::tidl_meta_arch::TidlMaSsd* TIDLMetaArch::_internal_add_tidl_ssd() {
  return tidl_ssd_.Add();
}
inline ::tidl_meta_arch::TidlMaSsd* TIDLMetaArch::add_tidl_ssd() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLMetaArch.tidl_ssd)
  return _internal_add_tidl_ssd();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaSsd >&
TIDLMetaArch::tidl_ssd() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLMetaArch.tidl_ssd)
  return tidl_ssd_;
}

// repeated .tidl_meta_arch.TidlMaFasterRcnn tidl_faster_rcnn = 5;
inline int TIDLMetaArch::_internal_tidl_faster_rcnn_size() const {
  return tidl_faster_rcnn_.size();
}
inline int TIDLMetaArch::tidl_faster_rcnn_size() const {
  return _internal_tidl_faster_rcnn_size();
}
inline void TIDLMetaArch::clear_tidl_faster_rcnn() {
  tidl_faster_rcnn_.Clear();
}
inline ::tidl_meta_arch::TidlMaFasterRcnn* TIDLMetaArch::mutable_tidl_faster_rcnn(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLMetaArch.tidl_faster_rcnn)
  return tidl_faster_rcnn_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaFasterRcnn >*
TIDLMetaArch::mutable_tidl_faster_rcnn() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLMetaArch.tidl_faster_rcnn)
  return &tidl_faster_rcnn_;
}
inline const ::tidl_meta_arch::TidlMaFasterRcnn& TIDLMetaArch::_internal_tidl_faster_rcnn(int index) const {
  return tidl_faster_rcnn_.Get(index);
}
inline const ::tidl_meta_arch::TidlMaFasterRcnn& TIDLMetaArch::tidl_faster_rcnn(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLMetaArch.tidl_faster_rcnn)
  return _internal_tidl_faster_rcnn(index);
}
inline ::tidl_meta_arch::TidlMaFasterRcnn* TIDLMetaArch::_internal_add_tidl_faster_rcnn() {
  return tidl_faster_rcnn_.Add();
}
inline ::tidl_meta_arch::TidlMaFasterRcnn* TIDLMetaArch::add_tidl_faster_rcnn() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLMetaArch.tidl_faster_rcnn)
  return _internal_add_tidl_faster_rcnn();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaFasterRcnn >&
TIDLMetaArch::tidl_faster_rcnn() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLMetaArch.tidl_faster_rcnn)
  return tidl_faster_rcnn_;
}

// repeated .tidl_meta_arch.TidlYoloOd tidl_yolo = 6;
inline int TIDLMetaArch::_internal_tidl_yolo_size() const {
  return tidl_yolo_.size();
}
inline int TIDLMetaArch::tidl_yolo_size() const {
  return _internal_tidl_yolo_size();
}
inline void TIDLMetaArch::clear_tidl_yolo() {
  tidl_yolo_.Clear();
}
inline ::tidl_meta_arch::TidlYoloOd* TIDLMetaArch::mutable_tidl_yolo(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLMetaArch.tidl_yolo)
  return tidl_yolo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlYoloOd >*
TIDLMetaArch::mutable_tidl_yolo() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLMetaArch.tidl_yolo)
  return &tidl_yolo_;
}
inline const ::tidl_meta_arch::TidlYoloOd& TIDLMetaArch::_internal_tidl_yolo(int index) const {
  return tidl_yolo_.Get(index);
}
inline const ::tidl_meta_arch::TidlYoloOd& TIDLMetaArch::tidl_yolo(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLMetaArch.tidl_yolo)
  return _internal_tidl_yolo(index);
}
inline ::tidl_meta_arch::TidlYoloOd* TIDLMetaArch::_internal_add_tidl_yolo() {
  return tidl_yolo_.Add();
}
inline ::tidl_meta_arch::TidlYoloOd* TIDLMetaArch::add_tidl_yolo() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLMetaArch.tidl_yolo)
  return _internal_add_tidl_yolo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlYoloOd >&
TIDLMetaArch::tidl_yolo() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLMetaArch.tidl_yolo)
  return tidl_yolo_;
}

// repeated .tidl_meta_arch.TidlMaRetinaNet tidl_retinanet = 7;
inline int TIDLMetaArch::_internal_tidl_retinanet_size() const {
  return tidl_retinanet_.size();
}
inline int TIDLMetaArch::tidl_retinanet_size() const {
  return _internal_tidl_retinanet_size();
}
inline void TIDLMetaArch::clear_tidl_retinanet() {
  tidl_retinanet_.Clear();
}
inline ::tidl_meta_arch::TidlMaRetinaNet* TIDLMetaArch::mutable_tidl_retinanet(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLMetaArch.tidl_retinanet)
  return tidl_retinanet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaRetinaNet >*
TIDLMetaArch::mutable_tidl_retinanet() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLMetaArch.tidl_retinanet)
  return &tidl_retinanet_;
}
inline const ::tidl_meta_arch::TidlMaRetinaNet& TIDLMetaArch::_internal_tidl_retinanet(int index) const {
  return tidl_retinanet_.Get(index);
}
inline const ::tidl_meta_arch::TidlMaRetinaNet& TIDLMetaArch::tidl_retinanet(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLMetaArch.tidl_retinanet)
  return _internal_tidl_retinanet(index);
}
inline ::tidl_meta_arch::TidlMaRetinaNet* TIDLMetaArch::_internal_add_tidl_retinanet() {
  return tidl_retinanet_.Add();
}
inline ::tidl_meta_arch::TidlMaRetinaNet* TIDLMetaArch::add_tidl_retinanet() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLMetaArch.tidl_retinanet)
  return _internal_add_tidl_retinanet();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMaRetinaNet >&
TIDLMetaArch::tidl_retinanet() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLMetaArch.tidl_retinanet)
  return tidl_retinanet_;
}

// repeated .tidl_meta_arch.TidlMa3DOD tidl_3dod = 8;
inline int TIDLMetaArch::_internal_tidl_3dod_size() const {
  return tidl_3dod_.size();
}
inline int TIDLMetaArch::tidl_3dod_size() const {
  return _internal_tidl_3dod_size();
}
inline void TIDLMetaArch::clear_tidl_3dod() {
  tidl_3dod_.Clear();
}
inline ::tidl_meta_arch::TidlMa3DOD* TIDLMetaArch::mutable_tidl_3dod(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLMetaArch.tidl_3dod)
  return tidl_3dod_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMa3DOD >*
TIDLMetaArch::mutable_tidl_3dod() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLMetaArch.tidl_3dod)
  return &tidl_3dod_;
}
inline const ::tidl_meta_arch::TidlMa3DOD& TIDLMetaArch::_internal_tidl_3dod(int index) const {
  return tidl_3dod_.Get(index);
}
inline const ::tidl_meta_arch::TidlMa3DOD& TIDLMetaArch::tidl_3dod(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLMetaArch.tidl_3dod)
  return _internal_tidl_3dod(index);
}
inline ::tidl_meta_arch::TidlMa3DOD* TIDLMetaArch::_internal_add_tidl_3dod() {
  return tidl_3dod_.Add();
}
inline ::tidl_meta_arch::TidlMa3DOD* TIDLMetaArch::add_tidl_3dod() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLMetaArch.tidl_3dod)
  return _internal_add_tidl_3dod();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TidlMa3DOD >&
TIDLMetaArch::tidl_3dod() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLMetaArch.tidl_3dod)
  return tidl_3dod_;
}

// -------------------------------------------------------------------

// TIDLNmsParam

// optional float nms_threshold = 1 [default = 0.3];
inline bool TIDLNmsParam::_internal_has_nms_threshold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TIDLNmsParam::has_nms_threshold() const {
  return _internal_has_nms_threshold();
}
inline void TIDLNmsParam::clear_nms_threshold() {
  nms_threshold_ = 0.3f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TIDLNmsParam::_internal_nms_threshold() const {
  return nms_threshold_;
}
inline float TIDLNmsParam::nms_threshold() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLNmsParam.nms_threshold)
  return _internal_nms_threshold();
}
inline void TIDLNmsParam::_internal_set_nms_threshold(float value) {
  _has_bits_[0] |= 0x00000004u;
  nms_threshold_ = value;
}
inline void TIDLNmsParam::set_nms_threshold(float value) {
  _internal_set_nms_threshold(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLNmsParam.nms_threshold)
}

// optional int32 top_k = 2;
inline bool TIDLNmsParam::_internal_has_top_k() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TIDLNmsParam::has_top_k() const {
  return _internal_has_top_k();
}
inline void TIDLNmsParam::clear_top_k() {
  top_k_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TIDLNmsParam::_internal_top_k() const {
  return top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TIDLNmsParam::top_k() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLNmsParam.top_k)
  return _internal_top_k();
}
inline void TIDLNmsParam::_internal_set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  top_k_ = value;
}
inline void TIDLNmsParam::set_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLNmsParam.top_k)
}

// optional int32 top_k_all_class = 3 [default = -1];
inline bool TIDLNmsParam::_internal_has_top_k_all_class() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TIDLNmsParam::has_top_k_all_class() const {
  return _internal_has_top_k_all_class();
}
inline void TIDLNmsParam::clear_top_k_all_class() {
  top_k_all_class_ = -1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TIDLNmsParam::_internal_top_k_all_class() const {
  return top_k_all_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TIDLNmsParam::top_k_all_class() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLNmsParam.top_k_all_class)
  return _internal_top_k_all_class();
}
inline void TIDLNmsParam::_internal_set_top_k_all_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  top_k_all_class_ = value;
}
inline void TIDLNmsParam::set_top_k_all_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_k_all_class(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLNmsParam.top_k_all_class)
}

// optional float eta = 4 [default = 1];
inline bool TIDLNmsParam::_internal_has_eta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TIDLNmsParam::has_eta() const {
  return _internal_has_eta();
}
inline void TIDLNmsParam::clear_eta() {
  eta_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TIDLNmsParam::_internal_eta() const {
  return eta_;
}
inline float TIDLNmsParam::eta() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLNmsParam.eta)
  return _internal_eta();
}
inline void TIDLNmsParam::_internal_set_eta(float value) {
  _has_bits_[0] |= 0x00000002u;
  eta_ = value;
}
inline void TIDLNmsParam::set_eta(float value) {
  _internal_set_eta(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLNmsParam.eta)
}

// -------------------------------------------------------------------

// PriorBoxParameter

// repeated float min_size = 1;
inline int PriorBoxParameter::_internal_min_size_size() const {
  return min_size_.size();
}
inline int PriorBoxParameter::min_size_size() const {
  return _internal_min_size_size();
}
inline void PriorBoxParameter::clear_min_size() {
  min_size_.Clear();
}
inline float PriorBoxParameter::_internal_min_size(int index) const {
  return min_size_.Get(index);
}
inline float PriorBoxParameter::min_size(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.min_size)
  return _internal_min_size(index);
}
inline void PriorBoxParameter::set_min_size(int index, float value) {
  min_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.min_size)
}
inline void PriorBoxParameter::_internal_add_min_size(float value) {
  min_size_.Add(value);
}
inline void PriorBoxParameter::add_min_size(float value) {
  _internal_add_min_size(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.PriorBoxParameter.min_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_min_size() const {
  return min_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::min_size() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.PriorBoxParameter.min_size)
  return _internal_min_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_min_size() {
  return &min_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_min_size() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.PriorBoxParameter.min_size)
  return _internal_mutable_min_size();
}

// repeated float max_size = 2;
inline int PriorBoxParameter::_internal_max_size_size() const {
  return max_size_.size();
}
inline int PriorBoxParameter::max_size_size() const {
  return _internal_max_size_size();
}
inline void PriorBoxParameter::clear_max_size() {
  max_size_.Clear();
}
inline float PriorBoxParameter::_internal_max_size(int index) const {
  return max_size_.Get(index);
}
inline float PriorBoxParameter::max_size(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.max_size)
  return _internal_max_size(index);
}
inline void PriorBoxParameter::set_max_size(int index, float value) {
  max_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.max_size)
}
inline void PriorBoxParameter::_internal_add_max_size(float value) {
  max_size_.Add(value);
}
inline void PriorBoxParameter::add_max_size(float value) {
  _internal_add_max_size(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.PriorBoxParameter.max_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_max_size() const {
  return max_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::max_size() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.PriorBoxParameter.max_size)
  return _internal_max_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_max_size() {
  return &max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.PriorBoxParameter.max_size)
  return _internal_mutable_max_size();
}

// repeated float aspect_ratio = 3;
inline int PriorBoxParameter::_internal_aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline int PriorBoxParameter::aspect_ratio_size() const {
  return _internal_aspect_ratio_size();
}
inline void PriorBoxParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float PriorBoxParameter::_internal_aspect_ratio(int index) const {
  return aspect_ratio_.Get(index);
}
inline float PriorBoxParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.aspect_ratio)
  return _internal_aspect_ratio(index);
}
inline void PriorBoxParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.aspect_ratio)
}
inline void PriorBoxParameter::_internal_add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
}
inline void PriorBoxParameter::add_aspect_ratio(float value) {
  _internal_add_aspect_ratio(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.PriorBoxParameter.aspect_ratio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_aspect_ratio() const {
  return aspect_ratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.PriorBoxParameter.aspect_ratio)
  return _internal_aspect_ratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_aspect_ratio() {
  return &aspect_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.PriorBoxParameter.aspect_ratio)
  return _internal_mutable_aspect_ratio();
}

// optional bool flip = 4 [default = true];
inline bool PriorBoxParameter::_internal_has_flip() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_flip() const {
  return _internal_has_flip();
}
inline void PriorBoxParameter::clear_flip() {
  flip_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool PriorBoxParameter::_internal_flip() const {
  return flip_;
}
inline bool PriorBoxParameter::flip() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.flip)
  return _internal_flip();
}
inline void PriorBoxParameter::_internal_set_flip(bool value) {
  _has_bits_[0] |= 0x00000100u;
  flip_ = value;
}
inline void PriorBoxParameter::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.flip)
}

// optional bool clip = 5 [default = false];
inline bool PriorBoxParameter::_internal_has_clip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_clip() const {
  return _internal_has_clip();
}
inline void PriorBoxParameter::clear_clip() {
  clip_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PriorBoxParameter::_internal_clip() const {
  return clip_;
}
inline bool PriorBoxParameter::clip() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.clip)
  return _internal_clip();
}
inline void PriorBoxParameter::_internal_set_clip(bool value) {
  _has_bits_[0] |= 0x00000001u;
  clip_ = value;
}
inline void PriorBoxParameter::set_clip(bool value) {
  _internal_set_clip(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.clip)
}

// repeated float variance = 6;
inline int PriorBoxParameter::_internal_variance_size() const {
  return variance_.size();
}
inline int PriorBoxParameter::variance_size() const {
  return _internal_variance_size();
}
inline void PriorBoxParameter::clear_variance() {
  variance_.Clear();
}
inline float PriorBoxParameter::_internal_variance(int index) const {
  return variance_.Get(index);
}
inline float PriorBoxParameter::variance(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.variance)
  return _internal_variance(index);
}
inline void PriorBoxParameter::set_variance(int index, float value) {
  variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.variance)
}
inline void PriorBoxParameter::_internal_add_variance(float value) {
  variance_.Add(value);
}
inline void PriorBoxParameter::add_variance(float value) {
  _internal_add_variance(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.PriorBoxParameter.variance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::_internal_variance() const {
  return variance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBoxParameter::variance() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.PriorBoxParameter.variance)
  return _internal_variance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::_internal_mutable_variance() {
  return &variance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBoxParameter::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.PriorBoxParameter.variance)
  return _internal_mutable_variance();
}

// optional uint32 img_size = 7;
inline bool PriorBoxParameter::_internal_has_img_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_size() const {
  return _internal_has_img_size();
}
inline void PriorBoxParameter::clear_img_size() {
  img_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::_internal_img_size() const {
  return img_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::img_size() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.img_size)
  return _internal_img_size();
}
inline void PriorBoxParameter::_internal_set_img_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  img_size_ = value;
}
inline void PriorBoxParameter::set_img_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_size(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.img_size)
}

// optional uint32 img_h = 8;
inline bool PriorBoxParameter::_internal_has_img_h() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_h() const {
  return _internal_has_img_h();
}
inline void PriorBoxParameter::clear_img_h() {
  img_h_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::_internal_img_h() const {
  return img_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::img_h() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.img_h)
  return _internal_img_h();
}
inline void PriorBoxParameter::_internal_set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  img_h_ = value;
}
inline void PriorBoxParameter::set_img_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_h(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.img_h)
}

// optional uint32 img_w = 9;
inline bool PriorBoxParameter::_internal_has_img_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_img_w() const {
  return _internal_has_img_w();
}
inline void PriorBoxParameter::clear_img_w() {
  img_w_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::_internal_img_w() const {
  return img_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::img_w() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.img_w)
  return _internal_img_w();
}
inline void PriorBoxParameter::_internal_set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  img_w_ = value;
}
inline void PriorBoxParameter::set_img_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_img_w(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.img_w)
}

// optional float step = 10;
inline bool PriorBoxParameter::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step() const {
  return _internal_has_step();
}
inline void PriorBoxParameter::clear_step() {
  step_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PriorBoxParameter::_internal_step() const {
  return step_;
}
inline float PriorBoxParameter::step() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.step)
  return _internal_step();
}
inline void PriorBoxParameter::_internal_set_step(float value) {
  _has_bits_[0] |= 0x00000010u;
  step_ = value;
}
inline void PriorBoxParameter::set_step(float value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.step)
}

// optional float step_h = 11;
inline bool PriorBoxParameter::_internal_has_step_h() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step_h() const {
  return _internal_has_step_h();
}
inline void PriorBoxParameter::clear_step_h() {
  step_h_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PriorBoxParameter::_internal_step_h() const {
  return step_h_;
}
inline float PriorBoxParameter::step_h() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.step_h)
  return _internal_step_h();
}
inline void PriorBoxParameter::_internal_set_step_h(float value) {
  _has_bits_[0] |= 0x00000020u;
  step_h_ = value;
}
inline void PriorBoxParameter::set_step_h(float value) {
  _internal_set_step_h(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.step_h)
}

// optional float step_w = 12;
inline bool PriorBoxParameter::_internal_has_step_w() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_step_w() const {
  return _internal_has_step_w();
}
inline void PriorBoxParameter::clear_step_w() {
  step_w_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PriorBoxParameter::_internal_step_w() const {
  return step_w_;
}
inline float PriorBoxParameter::step_w() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.step_w)
  return _internal_step_w();
}
inline void PriorBoxParameter::_internal_set_step_w(float value) {
  _has_bits_[0] |= 0x00000040u;
  step_w_ = value;
}
inline void PriorBoxParameter::set_step_w(float value) {
  _internal_set_step_w(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.step_w)
}

// optional float offset = 13 [default = 0.5];
inline bool PriorBoxParameter::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_offset() const {
  return _internal_has_offset();
}
inline void PriorBoxParameter::clear_offset() {
  offset_ = 0.5f;
  _has_bits_[0] &= ~0x00000200u;
}
inline float PriorBoxParameter::_internal_offset() const {
  return offset_;
}
inline float PriorBoxParameter::offset() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.offset)
  return _internal_offset();
}
inline void PriorBoxParameter::_internal_set_offset(float value) {
  _has_bits_[0] |= 0x00000200u;
  offset_ = value;
}
inline void PriorBoxParameter::set_offset(float value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.offset)
}

// optional uint32 num_keypoint = 14 [default = 0];
inline bool PriorBoxParameter::_internal_has_num_keypoint() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PriorBoxParameter::has_num_keypoint() const {
  return _internal_has_num_keypoint();
}
inline void PriorBoxParameter::clear_num_keypoint() {
  num_keypoint_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::_internal_num_keypoint() const {
  return num_keypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriorBoxParameter::num_keypoint() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBoxParameter.num_keypoint)
  return _internal_num_keypoint();
}
inline void PriorBoxParameter::_internal_set_num_keypoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  num_keypoint_ = value;
}
inline void PriorBoxParameter::set_num_keypoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_keypoint(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBoxParameter.num_keypoint)
}

// -------------------------------------------------------------------

// PriorBox3DODParameter

// repeated float anchor_width = 1;
inline int PriorBox3DODParameter::_internal_anchor_width_size() const {
  return anchor_width_.size();
}
inline int PriorBox3DODParameter::anchor_width_size() const {
  return _internal_anchor_width_size();
}
inline void PriorBox3DODParameter::clear_anchor_width() {
  anchor_width_.Clear();
}
inline float PriorBox3DODParameter::_internal_anchor_width(int index) const {
  return anchor_width_.Get(index);
}
inline float PriorBox3DODParameter::anchor_width(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.anchor_width)
  return _internal_anchor_width(index);
}
inline void PriorBox3DODParameter::set_anchor_width(int index, float value) {
  anchor_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.anchor_width)
}
inline void PriorBox3DODParameter::_internal_add_anchor_width(float value) {
  anchor_width_.Add(value);
}
inline void PriorBox3DODParameter::add_anchor_width(float value) {
  _internal_add_anchor_width(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.PriorBox3DODParameter.anchor_width)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBox3DODParameter::_internal_anchor_width() const {
  return anchor_width_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBox3DODParameter::anchor_width() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.PriorBox3DODParameter.anchor_width)
  return _internal_anchor_width();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBox3DODParameter::_internal_mutable_anchor_width() {
  return &anchor_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBox3DODParameter::mutable_anchor_width() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.PriorBox3DODParameter.anchor_width)
  return _internal_mutable_anchor_width();
}

// repeated float anchor_height = 2;
inline int PriorBox3DODParameter::_internal_anchor_height_size() const {
  return anchor_height_.size();
}
inline int PriorBox3DODParameter::anchor_height_size() const {
  return _internal_anchor_height_size();
}
inline void PriorBox3DODParameter::clear_anchor_height() {
  anchor_height_.Clear();
}
inline float PriorBox3DODParameter::_internal_anchor_height(int index) const {
  return anchor_height_.Get(index);
}
inline float PriorBox3DODParameter::anchor_height(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.anchor_height)
  return _internal_anchor_height(index);
}
inline void PriorBox3DODParameter::set_anchor_height(int index, float value) {
  anchor_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.anchor_height)
}
inline void PriorBox3DODParameter::_internal_add_anchor_height(float value) {
  anchor_height_.Add(value);
}
inline void PriorBox3DODParameter::add_anchor_height(float value) {
  _internal_add_anchor_height(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.PriorBox3DODParameter.anchor_height)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBox3DODParameter::_internal_anchor_height() const {
  return anchor_height_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBox3DODParameter::anchor_height() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.PriorBox3DODParameter.anchor_height)
  return _internal_anchor_height();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBox3DODParameter::_internal_mutable_anchor_height() {
  return &anchor_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBox3DODParameter::mutable_anchor_height() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.PriorBox3DODParameter.anchor_height)
  return _internal_mutable_anchor_height();
}

// repeated float anchor_length = 3;
inline int PriorBox3DODParameter::_internal_anchor_length_size() const {
  return anchor_length_.size();
}
inline int PriorBox3DODParameter::anchor_length_size() const {
  return _internal_anchor_length_size();
}
inline void PriorBox3DODParameter::clear_anchor_length() {
  anchor_length_.Clear();
}
inline float PriorBox3DODParameter::_internal_anchor_length(int index) const {
  return anchor_length_.Get(index);
}
inline float PriorBox3DODParameter::anchor_length(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.anchor_length)
  return _internal_anchor_length(index);
}
inline void PriorBox3DODParameter::set_anchor_length(int index, float value) {
  anchor_length_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.anchor_length)
}
inline void PriorBox3DODParameter::_internal_add_anchor_length(float value) {
  anchor_length_.Add(value);
}
inline void PriorBox3DODParameter::add_anchor_length(float value) {
  _internal_add_anchor_length(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.PriorBox3DODParameter.anchor_length)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBox3DODParameter::_internal_anchor_length() const {
  return anchor_length_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBox3DODParameter::anchor_length() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.PriorBox3DODParameter.anchor_length)
  return _internal_anchor_length();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBox3DODParameter::_internal_mutable_anchor_length() {
  return &anchor_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBox3DODParameter::mutable_anchor_length() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.PriorBox3DODParameter.anchor_length)
  return _internal_mutable_anchor_length();
}

// required float step_x = 4;
inline bool PriorBox3DODParameter::_internal_has_step_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PriorBox3DODParameter::has_step_x() const {
  return _internal_has_step_x();
}
inline void PriorBox3DODParameter::clear_step_x() {
  step_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PriorBox3DODParameter::_internal_step_x() const {
  return step_x_;
}
inline float PriorBox3DODParameter::step_x() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.step_x)
  return _internal_step_x();
}
inline void PriorBox3DODParameter::_internal_set_step_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  step_x_ = value;
}
inline void PriorBox3DODParameter::set_step_x(float value) {
  _internal_set_step_x(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.step_x)
}

// required float step_y = 5;
inline bool PriorBox3DODParameter::_internal_has_step_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PriorBox3DODParameter::has_step_y() const {
  return _internal_has_step_y();
}
inline void PriorBox3DODParameter::clear_step_y() {
  step_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PriorBox3DODParameter::_internal_step_y() const {
  return step_y_;
}
inline float PriorBox3DODParameter::step_y() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.step_y)
  return _internal_step_y();
}
inline void PriorBox3DODParameter::_internal_set_step_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  step_y_ = value;
}
inline void PriorBox3DODParameter::set_step_y(float value) {
  _internal_set_step_y(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.step_y)
}

// required float step_z = 6;
inline bool PriorBox3DODParameter::_internal_has_step_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PriorBox3DODParameter::has_step_z() const {
  return _internal_has_step_z();
}
inline void PriorBox3DODParameter::clear_step_z() {
  step_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PriorBox3DODParameter::_internal_step_z() const {
  return step_z_;
}
inline float PriorBox3DODParameter::step_z() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.step_z)
  return _internal_step_z();
}
inline void PriorBox3DODParameter::_internal_set_step_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  step_z_ = value;
}
inline void PriorBox3DODParameter::set_step_z(float value) {
  _internal_set_step_z(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.step_z)
}

// required float offset_x = 7;
inline bool PriorBox3DODParameter::_internal_has_offset_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PriorBox3DODParameter::has_offset_x() const {
  return _internal_has_offset_x();
}
inline void PriorBox3DODParameter::clear_offset_x() {
  offset_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PriorBox3DODParameter::_internal_offset_x() const {
  return offset_x_;
}
inline float PriorBox3DODParameter::offset_x() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.offset_x)
  return _internal_offset_x();
}
inline void PriorBox3DODParameter::_internal_set_offset_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  offset_x_ = value;
}
inline void PriorBox3DODParameter::set_offset_x(float value) {
  _internal_set_offset_x(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.offset_x)
}

// required float offset_y = 8;
inline bool PriorBox3DODParameter::_internal_has_offset_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PriorBox3DODParameter::has_offset_y() const {
  return _internal_has_offset_y();
}
inline void PriorBox3DODParameter::clear_offset_y() {
  offset_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PriorBox3DODParameter::_internal_offset_y() const {
  return offset_y_;
}
inline float PriorBox3DODParameter::offset_y() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.offset_y)
  return _internal_offset_y();
}
inline void PriorBox3DODParameter::_internal_set_offset_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  offset_y_ = value;
}
inline void PriorBox3DODParameter::set_offset_y(float value) {
  _internal_set_offset_y(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.offset_y)
}

// required float offset_z = 9;
inline bool PriorBox3DODParameter::_internal_has_offset_z() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PriorBox3DODParameter::has_offset_z() const {
  return _internal_has_offset_z();
}
inline void PriorBox3DODParameter::clear_offset_z() {
  offset_z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PriorBox3DODParameter::_internal_offset_z() const {
  return offset_z_;
}
inline float PriorBox3DODParameter::offset_z() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.offset_z)
  return _internal_offset_z();
}
inline void PriorBox3DODParameter::_internal_set_offset_z(float value) {
  _has_bits_[0] |= 0x00000020u;
  offset_z_ = value;
}
inline void PriorBox3DODParameter::set_offset_z(float value) {
  _internal_set_offset_z(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.offset_z)
}

// required float offset_dir = 10;
inline bool PriorBox3DODParameter::_internal_has_offset_dir() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PriorBox3DODParameter::has_offset_dir() const {
  return _internal_has_offset_dir();
}
inline void PriorBox3DODParameter::clear_offset_dir() {
  offset_dir_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PriorBox3DODParameter::_internal_offset_dir() const {
  return offset_dir_;
}
inline float PriorBox3DODParameter::offset_dir() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.offset_dir)
  return _internal_offset_dir();
}
inline void PriorBox3DODParameter::_internal_set_offset_dir(float value) {
  _has_bits_[0] |= 0x00000040u;
  offset_dir_ = value;
}
inline void PriorBox3DODParameter::set_offset_dir(float value) {
  _internal_set_offset_dir(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.offset_dir)
}

// repeated float rotation = 11;
inline int PriorBox3DODParameter::_internal_rotation_size() const {
  return rotation_.size();
}
inline int PriorBox3DODParameter::rotation_size() const {
  return _internal_rotation_size();
}
inline void PriorBox3DODParameter::clear_rotation() {
  rotation_.Clear();
}
inline float PriorBox3DODParameter::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline float PriorBox3DODParameter::rotation(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.PriorBox3DODParameter.rotation)
  return _internal_rotation(index);
}
inline void PriorBox3DODParameter::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.PriorBox3DODParameter.rotation)
}
inline void PriorBox3DODParameter::_internal_add_rotation(float value) {
  rotation_.Add(value);
}
inline void PriorBox3DODParameter::add_rotation(float value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.PriorBox3DODParameter.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBox3DODParameter::_internal_rotation() const {
  return rotation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PriorBox3DODParameter::rotation() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.PriorBox3DODParameter.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBox3DODParameter::_internal_mutable_rotation() {
  return &rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PriorBox3DODParameter::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.PriorBox3DODParameter.rotation)
  return _internal_mutable_rotation();
}

// -------------------------------------------------------------------

// TIDLOdSaveParams

// optional string output_directory = 1;
inline bool TIDLOdSaveParams::_internal_has_output_directory() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TIDLOdSaveParams::has_output_directory() const {
  return _internal_has_output_directory();
}
inline void TIDLOdSaveParams::clear_output_directory() {
  output_directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TIDLOdSaveParams::output_directory() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdSaveParams.output_directory)
  return _internal_output_directory();
}
inline void TIDLOdSaveParams::set_output_directory(const std::string& value) {
  _internal_set_output_directory(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdSaveParams.output_directory)
}
inline std::string* TIDLOdSaveParams::mutable_output_directory() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdSaveParams.output_directory)
  return _internal_mutable_output_directory();
}
inline const std::string& TIDLOdSaveParams::_internal_output_directory() const {
  return output_directory_.GetNoArena();
}
inline void TIDLOdSaveParams::_internal_set_output_directory(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  output_directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLOdSaveParams::set_output_directory(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  output_directory_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLOdSaveParams.output_directory)
}
inline void TIDLOdSaveParams::set_output_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  output_directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLOdSaveParams.output_directory)
}
inline void TIDLOdSaveParams::set_output_directory(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  output_directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLOdSaveParams.output_directory)
}
inline std::string* TIDLOdSaveParams::_internal_mutable_output_directory() {
  _has_bits_[0] |= 0x00000001u;
  return output_directory_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLOdSaveParams::release_output_directory() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdSaveParams.output_directory)
  if (!_internal_has_output_directory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return output_directory_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLOdSaveParams::set_allocated_output_directory(std::string* output_directory) {
  if (output_directory != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_directory_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_directory);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdSaveParams.output_directory)
}

// optional string output_name_prefix = 2;
inline bool TIDLOdSaveParams::_internal_has_output_name_prefix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TIDLOdSaveParams::has_output_name_prefix() const {
  return _internal_has_output_name_prefix();
}
inline void TIDLOdSaveParams::clear_output_name_prefix() {
  output_name_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TIDLOdSaveParams::output_name_prefix() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdSaveParams.output_name_prefix)
  return _internal_output_name_prefix();
}
inline void TIDLOdSaveParams::set_output_name_prefix(const std::string& value) {
  _internal_set_output_name_prefix(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdSaveParams.output_name_prefix)
}
inline std::string* TIDLOdSaveParams::mutable_output_name_prefix() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdSaveParams.output_name_prefix)
  return _internal_mutable_output_name_prefix();
}
inline const std::string& TIDLOdSaveParams::_internal_output_name_prefix() const {
  return output_name_prefix_.GetNoArena();
}
inline void TIDLOdSaveParams::_internal_set_output_name_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  output_name_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLOdSaveParams::set_output_name_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  output_name_prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLOdSaveParams.output_name_prefix)
}
inline void TIDLOdSaveParams::set_output_name_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  output_name_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLOdSaveParams.output_name_prefix)
}
inline void TIDLOdSaveParams::set_output_name_prefix(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  output_name_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLOdSaveParams.output_name_prefix)
}
inline std::string* TIDLOdSaveParams::_internal_mutable_output_name_prefix() {
  _has_bits_[0] |= 0x00000002u;
  return output_name_prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLOdSaveParams::release_output_name_prefix() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdSaveParams.output_name_prefix)
  if (!_internal_has_output_name_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return output_name_prefix_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLOdSaveParams::set_allocated_output_name_prefix(std::string* output_name_prefix) {
  if (output_name_prefix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_name_prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_name_prefix);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdSaveParams.output_name_prefix)
}

// optional string output_format = 3;
inline bool TIDLOdSaveParams::_internal_has_output_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TIDLOdSaveParams::has_output_format() const {
  return _internal_has_output_format();
}
inline void TIDLOdSaveParams::clear_output_format() {
  output_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TIDLOdSaveParams::output_format() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdSaveParams.output_format)
  return _internal_output_format();
}
inline void TIDLOdSaveParams::set_output_format(const std::string& value) {
  _internal_set_output_format(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdSaveParams.output_format)
}
inline std::string* TIDLOdSaveParams::mutable_output_format() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdSaveParams.output_format)
  return _internal_mutable_output_format();
}
inline const std::string& TIDLOdSaveParams::_internal_output_format() const {
  return output_format_.GetNoArena();
}
inline void TIDLOdSaveParams::_internal_set_output_format(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  output_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLOdSaveParams::set_output_format(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  output_format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLOdSaveParams.output_format)
}
inline void TIDLOdSaveParams::set_output_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  output_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLOdSaveParams.output_format)
}
inline void TIDLOdSaveParams::set_output_format(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  output_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLOdSaveParams.output_format)
}
inline std::string* TIDLOdSaveParams::_internal_mutable_output_format() {
  _has_bits_[0] |= 0x00000004u;
  return output_format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLOdSaveParams::release_output_format() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdSaveParams.output_format)
  if (!_internal_has_output_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return output_format_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLOdSaveParams::set_allocated_output_format(std::string* output_format) {
  if (output_format != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  output_format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_format);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdSaveParams.output_format)
}

// optional string label_map_file = 4;
inline bool TIDLOdSaveParams::_internal_has_label_map_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TIDLOdSaveParams::has_label_map_file() const {
  return _internal_has_label_map_file();
}
inline void TIDLOdSaveParams::clear_label_map_file() {
  label_map_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TIDLOdSaveParams::label_map_file() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdSaveParams.label_map_file)
  return _internal_label_map_file();
}
inline void TIDLOdSaveParams::set_label_map_file(const std::string& value) {
  _internal_set_label_map_file(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdSaveParams.label_map_file)
}
inline std::string* TIDLOdSaveParams::mutable_label_map_file() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdSaveParams.label_map_file)
  return _internal_mutable_label_map_file();
}
inline const std::string& TIDLOdSaveParams::_internal_label_map_file() const {
  return label_map_file_.GetNoArena();
}
inline void TIDLOdSaveParams::_internal_set_label_map_file(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  label_map_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLOdSaveParams::set_label_map_file(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  label_map_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLOdSaveParams.label_map_file)
}
inline void TIDLOdSaveParams::set_label_map_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  label_map_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLOdSaveParams.label_map_file)
}
inline void TIDLOdSaveParams::set_label_map_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  label_map_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLOdSaveParams.label_map_file)
}
inline std::string* TIDLOdSaveParams::_internal_mutable_label_map_file() {
  _has_bits_[0] |= 0x00000008u;
  return label_map_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLOdSaveParams::release_label_map_file() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdSaveParams.label_map_file)
  if (!_internal_has_label_map_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return label_map_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLOdSaveParams::set_allocated_label_map_file(std::string* label_map_file) {
  if (label_map_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  label_map_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_map_file);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdSaveParams.label_map_file)
}

// optional string name_size_file = 5;
inline bool TIDLOdSaveParams::_internal_has_name_size_file() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TIDLOdSaveParams::has_name_size_file() const {
  return _internal_has_name_size_file();
}
inline void TIDLOdSaveParams::clear_name_size_file() {
  name_size_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TIDLOdSaveParams::name_size_file() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdSaveParams.name_size_file)
  return _internal_name_size_file();
}
inline void TIDLOdSaveParams::set_name_size_file(const std::string& value) {
  _internal_set_name_size_file(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdSaveParams.name_size_file)
}
inline std::string* TIDLOdSaveParams::mutable_name_size_file() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdSaveParams.name_size_file)
  return _internal_mutable_name_size_file();
}
inline const std::string& TIDLOdSaveParams::_internal_name_size_file() const {
  return name_size_file_.GetNoArena();
}
inline void TIDLOdSaveParams::_internal_set_name_size_file(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  name_size_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLOdSaveParams::set_name_size_file(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  name_size_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLOdSaveParams.name_size_file)
}
inline void TIDLOdSaveParams::set_name_size_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  name_size_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLOdSaveParams.name_size_file)
}
inline void TIDLOdSaveParams::set_name_size_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  name_size_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLOdSaveParams.name_size_file)
}
inline std::string* TIDLOdSaveParams::_internal_mutable_name_size_file() {
  _has_bits_[0] |= 0x00000010u;
  return name_size_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLOdSaveParams::release_name_size_file() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdSaveParams.name_size_file)
  if (!_internal_has_name_size_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return name_size_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLOdSaveParams::set_allocated_name_size_file(std::string* name_size_file) {
  if (name_size_file != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  name_size_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_size_file);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdSaveParams.name_size_file)
}

// optional uint32 num_test_image = 6;
inline bool TIDLOdSaveParams::_internal_has_num_test_image() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TIDLOdSaveParams::has_num_test_image() const {
  return _internal_has_num_test_image();
}
inline void TIDLOdSaveParams::clear_num_test_image() {
  num_test_image_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TIDLOdSaveParams::_internal_num_test_image() const {
  return num_test_image_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TIDLOdSaveParams::num_test_image() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdSaveParams.num_test_image)
  return _internal_num_test_image();
}
inline void TIDLOdSaveParams::_internal_set_num_test_image(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_test_image_ = value;
}
inline void TIDLOdSaveParams::set_num_test_image(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_test_image(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdSaveParams.num_test_image)
}

// optional string resize_param = 7;
inline bool TIDLOdSaveParams::_internal_has_resize_param() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TIDLOdSaveParams::has_resize_param() const {
  return _internal_has_resize_param();
}
inline void TIDLOdSaveParams::clear_resize_param() {
  resize_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TIDLOdSaveParams::resize_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdSaveParams.resize_param)
  return _internal_resize_param();
}
inline void TIDLOdSaveParams::set_resize_param(const std::string& value) {
  _internal_set_resize_param(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdSaveParams.resize_param)
}
inline std::string* TIDLOdSaveParams::mutable_resize_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdSaveParams.resize_param)
  return _internal_mutable_resize_param();
}
inline const std::string& TIDLOdSaveParams::_internal_resize_param() const {
  return resize_param_.GetNoArena();
}
inline void TIDLOdSaveParams::_internal_set_resize_param(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  resize_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLOdSaveParams::set_resize_param(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  resize_param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLOdSaveParams.resize_param)
}
inline void TIDLOdSaveParams::set_resize_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  resize_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLOdSaveParams.resize_param)
}
inline void TIDLOdSaveParams::set_resize_param(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  resize_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLOdSaveParams.resize_param)
}
inline std::string* TIDLOdSaveParams::_internal_mutable_resize_param() {
  _has_bits_[0] |= 0x00000020u;
  return resize_param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLOdSaveParams::release_resize_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdSaveParams.resize_param)
  if (!_internal_has_resize_param()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return resize_param_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLOdSaveParams::set_allocated_resize_param(std::string* resize_param) {
  if (resize_param != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  resize_param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resize_param);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdSaveParams.resize_param)
}

// -------------------------------------------------------------------

// TIDLOdPostProc

// optional uint32 num_classes = 1;
inline bool TIDLOdPostProc::_internal_has_num_classes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_num_classes() const {
  return _internal_has_num_classes();
}
inline void TIDLOdPostProc::clear_num_classes() {
  num_classes_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TIDLOdPostProc::_internal_num_classes() const {
  return num_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TIDLOdPostProc::num_classes() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.num_classes)
  return _internal_num_classes();
}
inline void TIDLOdPostProc::_internal_set_num_classes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_classes_ = value;
}
inline void TIDLOdPostProc::set_num_classes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.num_classes)
}

// optional bool share_location = 2 [default = true];
inline bool TIDLOdPostProc::_internal_has_share_location() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_share_location() const {
  return _internal_has_share_location();
}
inline void TIDLOdPostProc::clear_share_location() {
  share_location_ = true;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool TIDLOdPostProc::_internal_share_location() const {
  return share_location_;
}
inline bool TIDLOdPostProc::share_location() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.share_location)
  return _internal_share_location();
}
inline void TIDLOdPostProc::_internal_set_share_location(bool value) {
  _has_bits_[0] |= 0x00004000u;
  share_location_ = value;
}
inline void TIDLOdPostProc::set_share_location(bool value) {
  _internal_set_share_location(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.share_location)
}

// optional int32 background_label_id = 3 [default = 0];
inline bool TIDLOdPostProc::_internal_has_background_label_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_background_label_id() const {
  return _internal_has_background_label_id();
}
inline void TIDLOdPostProc::clear_background_label_id() {
  background_label_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TIDLOdPostProc::_internal_background_label_id() const {
  return background_label_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TIDLOdPostProc::background_label_id() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.background_label_id)
  return _internal_background_label_id();
}
inline void TIDLOdPostProc::_internal_set_background_label_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  background_label_id_ = value;
}
inline void TIDLOdPostProc::set_background_label_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_background_label_id(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.background_label_id)
}

// optional .tidl_meta_arch.TIDLNmsParam nms_param = 4;
inline bool TIDLOdPostProc::_internal_has_nms_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || nms_param_ != nullptr);
  return value;
}
inline bool TIDLOdPostProc::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void TIDLOdPostProc::clear_nms_param() {
  if (nms_param_ != nullptr) nms_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tidl_meta_arch::TIDLNmsParam& TIDLOdPostProc::_internal_nms_param() const {
  const ::tidl_meta_arch::TIDLNmsParam* p = nms_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::TIDLNmsParam*>(
      &::tidl_meta_arch::_TIDLNmsParam_default_instance_);
}
inline const ::tidl_meta_arch::TIDLNmsParam& TIDLOdPostProc::nms_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.nms_param)
  return _internal_nms_param();
}
inline ::tidl_meta_arch::TIDLNmsParam* TIDLOdPostProc::release_nms_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdPostProc.nms_param)
  _has_bits_[0] &= ~0x00000002u;
  ::tidl_meta_arch::TIDLNmsParam* temp = nms_param_;
  nms_param_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::TIDLNmsParam* TIDLOdPostProc::_internal_mutable_nms_param() {
  _has_bits_[0] |= 0x00000002u;
  if (nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::TIDLNmsParam>(GetArenaNoVirtual());
    nms_param_ = p;
  }
  return nms_param_;
}
inline ::tidl_meta_arch::TIDLNmsParam* TIDLOdPostProc::mutable_nms_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdPostProc.nms_param)
  return _internal_mutable_nms_param();
}
inline void TIDLOdPostProc::set_allocated_nms_param(::tidl_meta_arch::TIDLNmsParam* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdPostProc.nms_param)
}

// optional .tidl_meta_arch.TIDLOdSaveParams save_output_param = 5;
inline bool TIDLOdPostProc::_internal_has_save_output_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || save_output_param_ != nullptr);
  return value;
}
inline bool TIDLOdPostProc::has_save_output_param() const {
  return _internal_has_save_output_param();
}
inline void TIDLOdPostProc::clear_save_output_param() {
  if (save_output_param_ != nullptr) save_output_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tidl_meta_arch::TIDLOdSaveParams& TIDLOdPostProc::_internal_save_output_param() const {
  const ::tidl_meta_arch::TIDLOdSaveParams* p = save_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::TIDLOdSaveParams*>(
      &::tidl_meta_arch::_TIDLOdSaveParams_default_instance_);
}
inline const ::tidl_meta_arch::TIDLOdSaveParams& TIDLOdPostProc::save_output_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.save_output_param)
  return _internal_save_output_param();
}
inline ::tidl_meta_arch::TIDLOdSaveParams* TIDLOdPostProc::release_save_output_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdPostProc.save_output_param)
  _has_bits_[0] &= ~0x00000004u;
  ::tidl_meta_arch::TIDLOdSaveParams* temp = save_output_param_;
  save_output_param_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::TIDLOdSaveParams* TIDLOdPostProc::_internal_mutable_save_output_param() {
  _has_bits_[0] |= 0x00000004u;
  if (save_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::TIDLOdSaveParams>(GetArenaNoVirtual());
    save_output_param_ = p;
  }
  return save_output_param_;
}
inline ::tidl_meta_arch::TIDLOdSaveParams* TIDLOdPostProc::mutable_save_output_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdPostProc.save_output_param)
  return _internal_mutable_save_output_param();
}
inline void TIDLOdPostProc::set_allocated_save_output_param(::tidl_meta_arch::TIDLOdSaveParams* save_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete save_output_param_;
  }
  if (save_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      save_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  save_output_param_ = save_output_param;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdPostProc.save_output_param)
}

// optional .tidl_meta_arch.TIDLBoxCodeType code_type = 6 [default = CORNER];
inline bool TIDLOdPostProc::_internal_has_code_type() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_code_type() const {
  return _internal_has_code_type();
}
inline void TIDLOdPostProc::clear_code_type() {
  code_type_ = 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::tidl_meta_arch::TIDLBoxCodeType TIDLOdPostProc::_internal_code_type() const {
  return static_cast< ::tidl_meta_arch::TIDLBoxCodeType >(code_type_);
}
inline ::tidl_meta_arch::TIDLBoxCodeType TIDLOdPostProc::code_type() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.code_type)
  return _internal_code_type();
}
inline void TIDLOdPostProc::_internal_set_code_type(::tidl_meta_arch::TIDLBoxCodeType value) {
  assert(::tidl_meta_arch::TIDLBoxCodeType_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  code_type_ = value;
}
inline void TIDLOdPostProc::set_code_type(::tidl_meta_arch::TIDLBoxCodeType value) {
  _internal_set_code_type(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.code_type)
}

// optional bool variance_encoded_in_target = 8 [default = false];
inline bool TIDLOdPostProc::_internal_has_variance_encoded_in_target() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_variance_encoded_in_target() const {
  return _internal_has_variance_encoded_in_target();
}
inline void TIDLOdPostProc::clear_variance_encoded_in_target() {
  variance_encoded_in_target_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TIDLOdPostProc::_internal_variance_encoded_in_target() const {
  return variance_encoded_in_target_;
}
inline bool TIDLOdPostProc::variance_encoded_in_target() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.variance_encoded_in_target)
  return _internal_variance_encoded_in_target();
}
inline void TIDLOdPostProc::_internal_set_variance_encoded_in_target(bool value) {
  _has_bits_[0] |= 0x00000080u;
  variance_encoded_in_target_ = value;
}
inline void TIDLOdPostProc::set_variance_encoded_in_target(bool value) {
  _internal_set_variance_encoded_in_target(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.variance_encoded_in_target)
}

// optional int32 keep_top_k = 7 [default = -1];
inline bool TIDLOdPostProc::_internal_has_keep_top_k() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_keep_top_k() const {
  return _internal_has_keep_top_k();
}
inline void TIDLOdPostProc::clear_keep_top_k() {
  keep_top_k_ = -1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TIDLOdPostProc::_internal_keep_top_k() const {
  return keep_top_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TIDLOdPostProc::keep_top_k() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.keep_top_k)
  return _internal_keep_top_k();
}
inline void TIDLOdPostProc::_internal_set_keep_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  keep_top_k_ = value;
}
inline void TIDLOdPostProc::set_keep_top_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keep_top_k(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.keep_top_k)
}

// optional float confidence_threshold = 9;
inline bool TIDLOdPostProc::_internal_has_confidence_threshold() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void TIDLOdPostProc::clear_confidence_threshold() {
  confidence_threshold_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TIDLOdPostProc::_internal_confidence_threshold() const {
  return confidence_threshold_;
}
inline float TIDLOdPostProc::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void TIDLOdPostProc::_internal_set_confidence_threshold(float value) {
  _has_bits_[0] |= 0x00000040u;
  confidence_threshold_ = value;
}
inline void TIDLOdPostProc::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.confidence_threshold)
}

// optional bool visualize = 10 [default = false];
inline bool TIDLOdPostProc::_internal_has_visualize() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_visualize() const {
  return _internal_has_visualize();
}
inline void TIDLOdPostProc::clear_visualize() {
  visualize_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TIDLOdPostProc::_internal_visualize() const {
  return visualize_;
}
inline bool TIDLOdPostProc::visualize() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.visualize)
  return _internal_visualize();
}
inline void TIDLOdPostProc::_internal_set_visualize(bool value) {
  _has_bits_[0] |= 0x00000100u;
  visualize_ = value;
}
inline void TIDLOdPostProc::set_visualize(bool value) {
  _internal_set_visualize(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.visualize)
}

// optional float visualize_threshold = 11;
inline bool TIDLOdPostProc::_internal_has_visualize_threshold() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_visualize_threshold() const {
  return _internal_has_visualize_threshold();
}
inline void TIDLOdPostProc::clear_visualize_threshold() {
  visualize_threshold_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float TIDLOdPostProc::_internal_visualize_threshold() const {
  return visualize_threshold_;
}
inline float TIDLOdPostProc::visualize_threshold() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.visualize_threshold)
  return _internal_visualize_threshold();
}
inline void TIDLOdPostProc::_internal_set_visualize_threshold(float value) {
  _has_bits_[0] |= 0x00000400u;
  visualize_threshold_ = value;
}
inline void TIDLOdPostProc::set_visualize_threshold(float value) {
  _internal_set_visualize_threshold(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.visualize_threshold)
}

// optional string save_file = 12;
inline bool TIDLOdPostProc::_internal_has_save_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_save_file() const {
  return _internal_has_save_file();
}
inline void TIDLOdPostProc::clear_save_file() {
  save_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TIDLOdPostProc::save_file() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.save_file)
  return _internal_save_file();
}
inline void TIDLOdPostProc::set_save_file(const std::string& value) {
  _internal_set_save_file(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.save_file)
}
inline std::string* TIDLOdPostProc::mutable_save_file() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdPostProc.save_file)
  return _internal_mutable_save_file();
}
inline const std::string& TIDLOdPostProc::_internal_save_file() const {
  return save_file_.GetNoArena();
}
inline void TIDLOdPostProc::_internal_set_save_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  save_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLOdPostProc::set_save_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  save_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLOdPostProc.save_file)
}
inline void TIDLOdPostProc::set_save_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  save_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLOdPostProc.save_file)
}
inline void TIDLOdPostProc::set_save_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  save_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLOdPostProc.save_file)
}
inline std::string* TIDLOdPostProc::_internal_mutable_save_file() {
  _has_bits_[0] |= 0x00000001u;
  return save_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLOdPostProc::release_save_file() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdPostProc.save_file)
  if (!_internal_has_save_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return save_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLOdPostProc::set_allocated_save_file(std::string* save_file) {
  if (save_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  save_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), save_file);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdPostProc.save_file)
}

// optional uint32 num_keypoint = 13 [default = 0];
inline bool TIDLOdPostProc::_internal_has_num_keypoint() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_num_keypoint() const {
  return _internal_has_num_keypoint();
}
inline void TIDLOdPostProc::clear_num_keypoint() {
  num_keypoint_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TIDLOdPostProc::_internal_num_keypoint() const {
  return num_keypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TIDLOdPostProc::num_keypoint() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.num_keypoint)
  return _internal_num_keypoint();
}
inline void TIDLOdPostProc::_internal_set_num_keypoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  num_keypoint_ = value;
}
inline void TIDLOdPostProc::set_num_keypoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_keypoint(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.num_keypoint)
}

// optional bool keypoint_confidence = 14 [default = false];
inline bool TIDLOdPostProc::_internal_has_keypoint_confidence() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_keypoint_confidence() const {
  return _internal_has_keypoint_confidence();
}
inline void TIDLOdPostProc::clear_keypoint_confidence() {
  keypoint_confidence_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TIDLOdPostProc::_internal_keypoint_confidence() const {
  return keypoint_confidence_;
}
inline bool TIDLOdPostProc::keypoint_confidence() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.keypoint_confidence)
  return _internal_keypoint_confidence();
}
inline void TIDLOdPostProc::_internal_set_keypoint_confidence(bool value) {
  _has_bits_[0] |= 0x00000200u;
  keypoint_confidence_ = value;
}
inline void TIDLOdPostProc::set_keypoint_confidence(bool value) {
  _internal_set_keypoint_confidence(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.keypoint_confidence)
}

// optional uint32 sub_code_type = 15 [default = 0];
inline bool TIDLOdPostProc::_internal_has_sub_code_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TIDLOdPostProc::has_sub_code_type() const {
  return _internal_has_sub_code_type();
}
inline void TIDLOdPostProc::clear_sub_code_type() {
  sub_code_type_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TIDLOdPostProc::_internal_sub_code_type() const {
  return sub_code_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TIDLOdPostProc::sub_code_type() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.sub_code_type)
  return _internal_sub_code_type();
}
inline void TIDLOdPostProc::_internal_set_sub_code_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  sub_code_type_ = value;
}
inline void TIDLOdPostProc::set_sub_code_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_code_type(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLOdPostProc.sub_code_type)
}

// optional .tidl_meta_arch.TIDLCameraIntrinsicParams camera_intrinsic_params = 16;
inline bool TIDLOdPostProc::_internal_has_camera_intrinsic_params() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || camera_intrinsic_params_ != nullptr);
  return value;
}
inline bool TIDLOdPostProc::has_camera_intrinsic_params() const {
  return _internal_has_camera_intrinsic_params();
}
inline void TIDLOdPostProc::clear_camera_intrinsic_params() {
  if (camera_intrinsic_params_ != nullptr) camera_intrinsic_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::tidl_meta_arch::TIDLCameraIntrinsicParams& TIDLOdPostProc::_internal_camera_intrinsic_params() const {
  const ::tidl_meta_arch::TIDLCameraIntrinsicParams* p = camera_intrinsic_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::TIDLCameraIntrinsicParams*>(
      &::tidl_meta_arch::_TIDLCameraIntrinsicParams_default_instance_);
}
inline const ::tidl_meta_arch::TIDLCameraIntrinsicParams& TIDLOdPostProc::camera_intrinsic_params() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLOdPostProc.camera_intrinsic_params)
  return _internal_camera_intrinsic_params();
}
inline ::tidl_meta_arch::TIDLCameraIntrinsicParams* TIDLOdPostProc::release_camera_intrinsic_params() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLOdPostProc.camera_intrinsic_params)
  _has_bits_[0] &= ~0x00000008u;
  ::tidl_meta_arch::TIDLCameraIntrinsicParams* temp = camera_intrinsic_params_;
  camera_intrinsic_params_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::TIDLCameraIntrinsicParams* TIDLOdPostProc::_internal_mutable_camera_intrinsic_params() {
  _has_bits_[0] |= 0x00000008u;
  if (camera_intrinsic_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::TIDLCameraIntrinsicParams>(GetArenaNoVirtual());
    camera_intrinsic_params_ = p;
  }
  return camera_intrinsic_params_;
}
inline ::tidl_meta_arch::TIDLCameraIntrinsicParams* TIDLOdPostProc::mutable_camera_intrinsic_params() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLOdPostProc.camera_intrinsic_params)
  return _internal_mutable_camera_intrinsic_params();
}
inline void TIDLOdPostProc::set_allocated_camera_intrinsic_params(::tidl_meta_arch::TIDLCameraIntrinsicParams* camera_intrinsic_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_intrinsic_params_;
  }
  if (camera_intrinsic_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_intrinsic_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_intrinsic_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  camera_intrinsic_params_ = camera_intrinsic_params;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLOdPostProc.camera_intrinsic_params)
}

// -------------------------------------------------------------------

// TidlMaSsd

// repeated string box_input = 1;
inline int TidlMaSsd::_internal_box_input_size() const {
  return box_input_.size();
}
inline int TidlMaSsd::box_input_size() const {
  return _internal_box_input_size();
}
inline void TidlMaSsd::clear_box_input() {
  box_input_.Clear();
}
inline std::string* TidlMaSsd::add_box_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMaSsd.box_input)
  return _internal_add_box_input();
}
inline const std::string& TidlMaSsd::_internal_box_input(int index) const {
  return box_input_.Get(index);
}
inline const std::string& TidlMaSsd::box_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.box_input)
  return _internal_box_input(index);
}
inline std::string* TidlMaSsd::mutable_box_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaSsd.box_input)
  return box_input_.Mutable(index);
}
inline void TidlMaSsd::set_box_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.box_input)
  box_input_.Mutable(index)->assign(value);
}
inline void TidlMaSsd::set_box_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.box_input)
  box_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMaSsd::set_box_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  box_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaSsd.box_input)
}
inline void TidlMaSsd::set_box_input(int index, const char* value, size_t size) {
  box_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaSsd.box_input)
}
inline std::string* TidlMaSsd::_internal_add_box_input() {
  return box_input_.Add();
}
inline void TidlMaSsd::add_box_input(const std::string& value) {
  box_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaSsd.box_input)
}
inline void TidlMaSsd::add_box_input(std::string&& value) {
  box_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaSsd.box_input)
}
inline void TidlMaSsd::add_box_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  box_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMaSsd.box_input)
}
inline void TidlMaSsd::add_box_input(const char* value, size_t size) {
  box_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMaSsd.box_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMaSsd::box_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaSsd.box_input)
  return box_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMaSsd::mutable_box_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaSsd.box_input)
  return &box_input_;
}

// repeated string class_input = 2;
inline int TidlMaSsd::_internal_class_input_size() const {
  return class_input_.size();
}
inline int TidlMaSsd::class_input_size() const {
  return _internal_class_input_size();
}
inline void TidlMaSsd::clear_class_input() {
  class_input_.Clear();
}
inline std::string* TidlMaSsd::add_class_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMaSsd.class_input)
  return _internal_add_class_input();
}
inline const std::string& TidlMaSsd::_internal_class_input(int index) const {
  return class_input_.Get(index);
}
inline const std::string& TidlMaSsd::class_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.class_input)
  return _internal_class_input(index);
}
inline std::string* TidlMaSsd::mutable_class_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaSsd.class_input)
  return class_input_.Mutable(index);
}
inline void TidlMaSsd::set_class_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.class_input)
  class_input_.Mutable(index)->assign(value);
}
inline void TidlMaSsd::set_class_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.class_input)
  class_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMaSsd::set_class_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaSsd.class_input)
}
inline void TidlMaSsd::set_class_input(int index, const char* value, size_t size) {
  class_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaSsd.class_input)
}
inline std::string* TidlMaSsd::_internal_add_class_input() {
  return class_input_.Add();
}
inline void TidlMaSsd::add_class_input(const std::string& value) {
  class_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaSsd.class_input)
}
inline void TidlMaSsd::add_class_input(std::string&& value) {
  class_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaSsd.class_input)
}
inline void TidlMaSsd::add_class_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMaSsd.class_input)
}
inline void TidlMaSsd::add_class_input(const char* value, size_t size) {
  class_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMaSsd.class_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMaSsd::class_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaSsd.class_input)
  return class_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMaSsd::mutable_class_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaSsd.class_input)
  return &class_input_;
}

// optional string output = 3;
inline bool TidlMaSsd::_internal_has_output() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TidlMaSsd::has_output() const {
  return _internal_has_output();
}
inline void TidlMaSsd::clear_output() {
  output_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TidlMaSsd::output() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.output)
  return _internal_output();
}
inline void TidlMaSsd::set_output(const std::string& value) {
  _internal_set_output(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.output)
}
inline std::string* TidlMaSsd::mutable_output() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaSsd.output)
  return _internal_mutable_output();
}
inline const std::string& TidlMaSsd::_internal_output() const {
  return output_.GetNoArena();
}
inline void TidlMaSsd::_internal_set_output(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMaSsd::set_output(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  output_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMaSsd.output)
}
inline void TidlMaSsd::set_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaSsd.output)
}
inline void TidlMaSsd::set_output(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaSsd.output)
}
inline std::string* TidlMaSsd::_internal_mutable_output() {
  _has_bits_[0] |= 0x00000001u;
  return output_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMaSsd::release_output() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaSsd.output)
  if (!_internal_has_output()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return output_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMaSsd::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaSsd.output)
}

// optional string name = 4;
inline bool TidlMaSsd::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TidlMaSsd::has_name() const {
  return _internal_has_name();
}
inline void TidlMaSsd::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TidlMaSsd::name() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.name)
  return _internal_name();
}
inline void TidlMaSsd::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.name)
}
inline std::string* TidlMaSsd::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaSsd.name)
  return _internal_mutable_name();
}
inline const std::string& TidlMaSsd::_internal_name() const {
  return name_.GetNoArena();
}
inline void TidlMaSsd::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMaSsd::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMaSsd.name)
}
inline void TidlMaSsd::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaSsd.name)
}
inline void TidlMaSsd::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaSsd.name)
}
inline std::string* TidlMaSsd::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMaSsd::release_name() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaSsd.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMaSsd::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaSsd.name)
}

// optional uint32 in_width = 5;
inline bool TidlMaSsd::_internal_has_in_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TidlMaSsd::has_in_width() const {
  return _internal_has_in_width();
}
inline void TidlMaSsd::clear_in_width() {
  in_width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaSsd::_internal_in_width() const {
  return in_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaSsd::in_width() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.in_width)
  return _internal_in_width();
}
inline void TidlMaSsd::_internal_set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  in_width_ = value;
}
inline void TidlMaSsd::set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in_width(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.in_width)
}

// optional uint32 in_height = 6;
inline bool TidlMaSsd::_internal_has_in_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TidlMaSsd::has_in_height() const {
  return _internal_has_in_height();
}
inline void TidlMaSsd::clear_in_height() {
  in_height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaSsd::_internal_in_height() const {
  return in_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaSsd::in_height() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.in_height)
  return _internal_in_height();
}
inline void TidlMaSsd::_internal_set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  in_height_ = value;
}
inline void TidlMaSsd::set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in_height(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.in_height)
}

// optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
inline bool TidlMaSsd::_internal_has_score_converter() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TidlMaSsd::has_score_converter() const {
  return _internal_has_score_converter();
}
inline void TidlMaSsd::clear_score_converter() {
  score_converter_ = 2;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::tidl_meta_arch::TIDLScoreConverter TidlMaSsd::_internal_score_converter() const {
  return static_cast< ::tidl_meta_arch::TIDLScoreConverter >(score_converter_);
}
inline ::tidl_meta_arch::TIDLScoreConverter TidlMaSsd::score_converter() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.score_converter)
  return _internal_score_converter();
}
inline void TidlMaSsd::_internal_set_score_converter(::tidl_meta_arch::TIDLScoreConverter value) {
  assert(::tidl_meta_arch::TIDLScoreConverter_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  score_converter_ = value;
}
inline void TidlMaSsd::set_score_converter(::tidl_meta_arch::TIDLScoreConverter value) {
  _internal_set_score_converter(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.score_converter)
}

// repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
inline int TidlMaSsd::_internal_prior_box_param_size() const {
  return prior_box_param_.size();
}
inline int TidlMaSsd::prior_box_param_size() const {
  return _internal_prior_box_param_size();
}
inline void TidlMaSsd::clear_prior_box_param() {
  prior_box_param_.Clear();
}
inline ::tidl_meta_arch::PriorBoxParameter* TidlMaSsd::mutable_prior_box_param(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaSsd.prior_box_param)
  return prior_box_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter >*
TidlMaSsd::mutable_prior_box_param() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaSsd.prior_box_param)
  return &prior_box_param_;
}
inline const ::tidl_meta_arch::PriorBoxParameter& TidlMaSsd::_internal_prior_box_param(int index) const {
  return prior_box_param_.Get(index);
}
inline const ::tidl_meta_arch::PriorBoxParameter& TidlMaSsd::prior_box_param(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.prior_box_param)
  return _internal_prior_box_param(index);
}
inline ::tidl_meta_arch::PriorBoxParameter* TidlMaSsd::_internal_add_prior_box_param() {
  return prior_box_param_.Add();
}
inline ::tidl_meta_arch::PriorBoxParameter* TidlMaSsd::add_prior_box_param() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaSsd.prior_box_param)
  return _internal_add_prior_box_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter >&
TidlMaSsd::prior_box_param() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaSsd.prior_box_param)
  return prior_box_param_;
}

// optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
inline bool TidlMaSsd::_internal_has_detection_output_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || detection_output_param_ != nullptr);
  return value;
}
inline bool TidlMaSsd::has_detection_output_param() const {
  return _internal_has_detection_output_param();
}
inline void TidlMaSsd::clear_detection_output_param() {
  if (detection_output_param_ != nullptr) detection_output_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlMaSsd::_internal_detection_output_param() const {
  const ::tidl_meta_arch::TIDLOdPostProc* p = detection_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::TIDLOdPostProc*>(
      &::tidl_meta_arch::_TIDLOdPostProc_default_instance_);
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlMaSsd::detection_output_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.detection_output_param)
  return _internal_detection_output_param();
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaSsd::release_detection_output_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaSsd.detection_output_param)
  _has_bits_[0] &= ~0x00000004u;
  ::tidl_meta_arch::TIDLOdPostProc* temp = detection_output_param_;
  detection_output_param_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaSsd::_internal_mutable_detection_output_param() {
  _has_bits_[0] |= 0x00000004u;
  if (detection_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::TIDLOdPostProc>(GetArenaNoVirtual());
    detection_output_param_ = p;
  }
  return detection_output_param_;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaSsd::mutable_detection_output_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaSsd.detection_output_param)
  return _internal_mutable_detection_output_param();
}
inline void TidlMaSsd::set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detection_output_param_;
  }
  if (detection_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detection_output_param_ = detection_output_param;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaSsd.detection_output_param)
}

// optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
inline bool TidlMaSsd::_internal_has_data_layout() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TidlMaSsd::has_data_layout() const {
  return _internal_has_data_layout();
}
inline void TidlMaSsd::clear_data_layout() {
  data_layout_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::tidl_meta_arch::TIDLAnchorDataLayout TidlMaSsd::_internal_data_layout() const {
  return static_cast< ::tidl_meta_arch::TIDLAnchorDataLayout >(data_layout_);
}
inline ::tidl_meta_arch::TIDLAnchorDataLayout TidlMaSsd::data_layout() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaSsd.data_layout)
  return _internal_data_layout();
}
inline void TidlMaSsd::_internal_set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value) {
  assert(::tidl_meta_arch::TIDLAnchorDataLayout_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  data_layout_ = value;
}
inline void TidlMaSsd::set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value) {
  _internal_set_data_layout(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaSsd.data_layout)
}

// -------------------------------------------------------------------

// TidlMaCaffeSsd

// repeated string box_input = 1;
inline int TidlMaCaffeSsd::_internal_box_input_size() const {
  return box_input_.size();
}
inline int TidlMaCaffeSsd::box_input_size() const {
  return _internal_box_input_size();
}
inline void TidlMaCaffeSsd::clear_box_input() {
  box_input_.Clear();
}
inline std::string* TidlMaCaffeSsd::add_box_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMaCaffeSsd.box_input)
  return _internal_add_box_input();
}
inline const std::string& TidlMaCaffeSsd::_internal_box_input(int index) const {
  return box_input_.Get(index);
}
inline const std::string& TidlMaCaffeSsd::box_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.box_input)
  return _internal_box_input(index);
}
inline std::string* TidlMaCaffeSsd::mutable_box_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaCaffeSsd.box_input)
  return box_input_.Mutable(index);
}
inline void TidlMaCaffeSsd::set_box_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.box_input)
  box_input_.Mutable(index)->assign(value);
}
inline void TidlMaCaffeSsd::set_box_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.box_input)
  box_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMaCaffeSsd::set_box_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  box_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaCaffeSsd.box_input)
}
inline void TidlMaCaffeSsd::set_box_input(int index, const char* value, size_t size) {
  box_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaCaffeSsd.box_input)
}
inline std::string* TidlMaCaffeSsd::_internal_add_box_input() {
  return box_input_.Add();
}
inline void TidlMaCaffeSsd::add_box_input(const std::string& value) {
  box_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaCaffeSsd.box_input)
}
inline void TidlMaCaffeSsd::add_box_input(std::string&& value) {
  box_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaCaffeSsd.box_input)
}
inline void TidlMaCaffeSsd::add_box_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  box_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMaCaffeSsd.box_input)
}
inline void TidlMaCaffeSsd::add_box_input(const char* value, size_t size) {
  box_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMaCaffeSsd.box_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMaCaffeSsd::box_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaCaffeSsd.box_input)
  return box_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMaCaffeSsd::mutable_box_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaCaffeSsd.box_input)
  return &box_input_;
}

// repeated string class_input = 2;
inline int TidlMaCaffeSsd::_internal_class_input_size() const {
  return class_input_.size();
}
inline int TidlMaCaffeSsd::class_input_size() const {
  return _internal_class_input_size();
}
inline void TidlMaCaffeSsd::clear_class_input() {
  class_input_.Clear();
}
inline std::string* TidlMaCaffeSsd::add_class_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMaCaffeSsd.class_input)
  return _internal_add_class_input();
}
inline const std::string& TidlMaCaffeSsd::_internal_class_input(int index) const {
  return class_input_.Get(index);
}
inline const std::string& TidlMaCaffeSsd::class_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.class_input)
  return _internal_class_input(index);
}
inline std::string* TidlMaCaffeSsd::mutable_class_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaCaffeSsd.class_input)
  return class_input_.Mutable(index);
}
inline void TidlMaCaffeSsd::set_class_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.class_input)
  class_input_.Mutable(index)->assign(value);
}
inline void TidlMaCaffeSsd::set_class_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.class_input)
  class_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMaCaffeSsd::set_class_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaCaffeSsd.class_input)
}
inline void TidlMaCaffeSsd::set_class_input(int index, const char* value, size_t size) {
  class_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaCaffeSsd.class_input)
}
inline std::string* TidlMaCaffeSsd::_internal_add_class_input() {
  return class_input_.Add();
}
inline void TidlMaCaffeSsd::add_class_input(const std::string& value) {
  class_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaCaffeSsd.class_input)
}
inline void TidlMaCaffeSsd::add_class_input(std::string&& value) {
  class_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaCaffeSsd.class_input)
}
inline void TidlMaCaffeSsd::add_class_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMaCaffeSsd.class_input)
}
inline void TidlMaCaffeSsd::add_class_input(const char* value, size_t size) {
  class_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMaCaffeSsd.class_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMaCaffeSsd::class_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaCaffeSsd.class_input)
  return class_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMaCaffeSsd::mutable_class_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaCaffeSsd.class_input)
  return &class_input_;
}

// repeated string output = 3;
inline int TidlMaCaffeSsd::_internal_output_size() const {
  return output_.size();
}
inline int TidlMaCaffeSsd::output_size() const {
  return _internal_output_size();
}
inline void TidlMaCaffeSsd::clear_output() {
  output_.Clear();
}
inline std::string* TidlMaCaffeSsd::add_output() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMaCaffeSsd.output)
  return _internal_add_output();
}
inline const std::string& TidlMaCaffeSsd::_internal_output(int index) const {
  return output_.Get(index);
}
inline const std::string& TidlMaCaffeSsd::output(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.output)
  return _internal_output(index);
}
inline std::string* TidlMaCaffeSsd::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaCaffeSsd.output)
  return output_.Mutable(index);
}
inline void TidlMaCaffeSsd::set_output(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.output)
  output_.Mutable(index)->assign(value);
}
inline void TidlMaCaffeSsd::set_output(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.output)
  output_.Mutable(index)->assign(std::move(value));
}
inline void TidlMaCaffeSsd::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaCaffeSsd.output)
}
inline void TidlMaCaffeSsd::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaCaffeSsd.output)
}
inline std::string* TidlMaCaffeSsd::_internal_add_output() {
  return output_.Add();
}
inline void TidlMaCaffeSsd::add_output(const std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaCaffeSsd.output)
}
inline void TidlMaCaffeSsd::add_output(std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaCaffeSsd.output)
}
inline void TidlMaCaffeSsd::add_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMaCaffeSsd.output)
}
inline void TidlMaCaffeSsd::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMaCaffeSsd.output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMaCaffeSsd::output() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaCaffeSsd.output)
  return output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMaCaffeSsd::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaCaffeSsd.output)
  return &output_;
}

// optional string name = 4;
inline bool TidlMaCaffeSsd::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TidlMaCaffeSsd::has_name() const {
  return _internal_has_name();
}
inline void TidlMaCaffeSsd::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TidlMaCaffeSsd::name() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.name)
  return _internal_name();
}
inline void TidlMaCaffeSsd::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.name)
}
inline std::string* TidlMaCaffeSsd::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaCaffeSsd.name)
  return _internal_mutable_name();
}
inline const std::string& TidlMaCaffeSsd::_internal_name() const {
  return name_.GetNoArena();
}
inline void TidlMaCaffeSsd::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMaCaffeSsd::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMaCaffeSsd.name)
}
inline void TidlMaCaffeSsd::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaCaffeSsd.name)
}
inline void TidlMaCaffeSsd::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaCaffeSsd.name)
}
inline std::string* TidlMaCaffeSsd::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMaCaffeSsd::release_name() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaCaffeSsd.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMaCaffeSsd::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaCaffeSsd.name)
}

// optional uint32 in_width = 5;
inline bool TidlMaCaffeSsd::_internal_has_in_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TidlMaCaffeSsd::has_in_width() const {
  return _internal_has_in_width();
}
inline void TidlMaCaffeSsd::clear_in_width() {
  in_width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaCaffeSsd::_internal_in_width() const {
  return in_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaCaffeSsd::in_width() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.in_width)
  return _internal_in_width();
}
inline void TidlMaCaffeSsd::_internal_set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  in_width_ = value;
}
inline void TidlMaCaffeSsd::set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in_width(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.in_width)
}

// optional uint32 in_height = 6;
inline bool TidlMaCaffeSsd::_internal_has_in_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TidlMaCaffeSsd::has_in_height() const {
  return _internal_has_in_height();
}
inline void TidlMaCaffeSsd::clear_in_height() {
  in_height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaCaffeSsd::_internal_in_height() const {
  return in_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaCaffeSsd::in_height() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.in_height)
  return _internal_in_height();
}
inline void TidlMaCaffeSsd::_internal_set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  in_height_ = value;
}
inline void TidlMaCaffeSsd::set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in_height(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.in_height)
}

// optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
inline bool TidlMaCaffeSsd::_internal_has_score_converter() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TidlMaCaffeSsd::has_score_converter() const {
  return _internal_has_score_converter();
}
inline void TidlMaCaffeSsd::clear_score_converter() {
  score_converter_ = 2;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::tidl_meta_arch::TIDLScoreConverter TidlMaCaffeSsd::_internal_score_converter() const {
  return static_cast< ::tidl_meta_arch::TIDLScoreConverter >(score_converter_);
}
inline ::tidl_meta_arch::TIDLScoreConverter TidlMaCaffeSsd::score_converter() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.score_converter)
  return _internal_score_converter();
}
inline void TidlMaCaffeSsd::_internal_set_score_converter(::tidl_meta_arch::TIDLScoreConverter value) {
  assert(::tidl_meta_arch::TIDLScoreConverter_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  score_converter_ = value;
}
inline void TidlMaCaffeSsd::set_score_converter(::tidl_meta_arch::TIDLScoreConverter value) {
  _internal_set_score_converter(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.score_converter)
}

// repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
inline int TidlMaCaffeSsd::_internal_prior_box_param_size() const {
  return prior_box_param_.size();
}
inline int TidlMaCaffeSsd::prior_box_param_size() const {
  return _internal_prior_box_param_size();
}
inline void TidlMaCaffeSsd::clear_prior_box_param() {
  prior_box_param_.Clear();
}
inline ::tidl_meta_arch::PriorBoxParameter* TidlMaCaffeSsd::mutable_prior_box_param(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaCaffeSsd.prior_box_param)
  return prior_box_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter >*
TidlMaCaffeSsd::mutable_prior_box_param() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaCaffeSsd.prior_box_param)
  return &prior_box_param_;
}
inline const ::tidl_meta_arch::PriorBoxParameter& TidlMaCaffeSsd::_internal_prior_box_param(int index) const {
  return prior_box_param_.Get(index);
}
inline const ::tidl_meta_arch::PriorBoxParameter& TidlMaCaffeSsd::prior_box_param(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.prior_box_param)
  return _internal_prior_box_param(index);
}
inline ::tidl_meta_arch::PriorBoxParameter* TidlMaCaffeSsd::_internal_add_prior_box_param() {
  return prior_box_param_.Add();
}
inline ::tidl_meta_arch::PriorBoxParameter* TidlMaCaffeSsd::add_prior_box_param() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaCaffeSsd.prior_box_param)
  return _internal_add_prior_box_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBoxParameter >&
TidlMaCaffeSsd::prior_box_param() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaCaffeSsd.prior_box_param)
  return prior_box_param_;
}

// optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
inline bool TidlMaCaffeSsd::_internal_has_detection_output_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || detection_output_param_ != nullptr);
  return value;
}
inline bool TidlMaCaffeSsd::has_detection_output_param() const {
  return _internal_has_detection_output_param();
}
inline void TidlMaCaffeSsd::clear_detection_output_param() {
  if (detection_output_param_ != nullptr) detection_output_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlMaCaffeSsd::_internal_detection_output_param() const {
  const ::tidl_meta_arch::TIDLOdPostProc* p = detection_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::TIDLOdPostProc*>(
      &::tidl_meta_arch::_TIDLOdPostProc_default_instance_);
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlMaCaffeSsd::detection_output_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.detection_output_param)
  return _internal_detection_output_param();
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaCaffeSsd::release_detection_output_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaCaffeSsd.detection_output_param)
  _has_bits_[0] &= ~0x00000004u;
  ::tidl_meta_arch::TIDLOdPostProc* temp = detection_output_param_;
  detection_output_param_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaCaffeSsd::_internal_mutable_detection_output_param() {
  _has_bits_[0] |= 0x00000004u;
  if (detection_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::TIDLOdPostProc>(GetArenaNoVirtual());
    detection_output_param_ = p;
  }
  return detection_output_param_;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaCaffeSsd::mutable_detection_output_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaCaffeSsd.detection_output_param)
  return _internal_mutable_detection_output_param();
}
inline void TidlMaCaffeSsd::set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detection_output_param_;
  }
  if (detection_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detection_output_param_ = detection_output_param;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaCaffeSsd.detection_output_param)
}

// optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
inline bool TidlMaCaffeSsd::_internal_has_data_layout() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TidlMaCaffeSsd::has_data_layout() const {
  return _internal_has_data_layout();
}
inline void TidlMaCaffeSsd::clear_data_layout() {
  data_layout_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::tidl_meta_arch::TIDLAnchorDataLayout TidlMaCaffeSsd::_internal_data_layout() const {
  return static_cast< ::tidl_meta_arch::TIDLAnchorDataLayout >(data_layout_);
}
inline ::tidl_meta_arch::TIDLAnchorDataLayout TidlMaCaffeSsd::data_layout() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.data_layout)
  return _internal_data_layout();
}
inline void TidlMaCaffeSsd::_internal_set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value) {
  assert(::tidl_meta_arch::TIDLAnchorDataLayout_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  data_layout_ = value;
}
inline void TidlMaCaffeSsd::set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value) {
  _internal_set_data_layout(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.data_layout)
}

// optional string framework = 11;
inline bool TidlMaCaffeSsd::_internal_has_framework() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TidlMaCaffeSsd::has_framework() const {
  return _internal_has_framework();
}
inline void TidlMaCaffeSsd::clear_framework() {
  framework_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TidlMaCaffeSsd::framework() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaCaffeSsd.framework)
  return _internal_framework();
}
inline void TidlMaCaffeSsd::set_framework(const std::string& value) {
  _internal_set_framework(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaCaffeSsd.framework)
}
inline std::string* TidlMaCaffeSsd::mutable_framework() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaCaffeSsd.framework)
  return _internal_mutable_framework();
}
inline const std::string& TidlMaCaffeSsd::_internal_framework() const {
  return framework_.GetNoArena();
}
inline void TidlMaCaffeSsd::_internal_set_framework(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMaCaffeSsd::set_framework(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMaCaffeSsd.framework)
}
inline void TidlMaCaffeSsd::set_framework(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaCaffeSsd.framework)
}
inline void TidlMaCaffeSsd::set_framework(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaCaffeSsd.framework)
}
inline std::string* TidlMaCaffeSsd::_internal_mutable_framework() {
  _has_bits_[0] |= 0x00000002u;
  return framework_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMaCaffeSsd::release_framework() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaCaffeSsd.framework)
  if (!_internal_has_framework()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return framework_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMaCaffeSsd::set_allocated_framework(std::string* framework) {
  if (framework != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  framework_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), framework);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaCaffeSsd.framework)
}

// -------------------------------------------------------------------

// TidlMaTfOdApiSsd

// optional string name = 1;
inline bool TidlMaTfOdApiSsd::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TidlMaTfOdApiSsd::has_name() const {
  return _internal_has_name();
}
inline void TidlMaTfOdApiSsd::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TidlMaTfOdApiSsd::name() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaTfOdApiSsd.name)
  return _internal_name();
}
inline void TidlMaTfOdApiSsd::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaTfOdApiSsd.name)
}
inline std::string* TidlMaTfOdApiSsd::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaTfOdApiSsd.name)
  return _internal_mutable_name();
}
inline const std::string& TidlMaTfOdApiSsd::_internal_name() const {
  return name_.GetNoArena();
}
inline void TidlMaTfOdApiSsd::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMaTfOdApiSsd::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMaTfOdApiSsd.name)
}
inline void TidlMaTfOdApiSsd::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaTfOdApiSsd.name)
}
inline void TidlMaTfOdApiSsd::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaTfOdApiSsd.name)
}
inline std::string* TidlMaTfOdApiSsd::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMaTfOdApiSsd::release_name() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaTfOdApiSsd.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMaTfOdApiSsd::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaTfOdApiSsd.name)
}

// -------------------------------------------------------------------

// TidlMaFasterRcnn

// optional string name = 1;
inline bool TidlMaFasterRcnn::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TidlMaFasterRcnn::has_name() const {
  return _internal_has_name();
}
inline void TidlMaFasterRcnn::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TidlMaFasterRcnn::name() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaFasterRcnn.name)
  return _internal_name();
}
inline void TidlMaFasterRcnn::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaFasterRcnn.name)
}
inline std::string* TidlMaFasterRcnn::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaFasterRcnn.name)
  return _internal_mutable_name();
}
inline const std::string& TidlMaFasterRcnn::_internal_name() const {
  return name_.GetNoArena();
}
inline void TidlMaFasterRcnn::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMaFasterRcnn::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMaFasterRcnn.name)
}
inline void TidlMaFasterRcnn::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaFasterRcnn.name)
}
inline void TidlMaFasterRcnn::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaFasterRcnn.name)
}
inline std::string* TidlMaFasterRcnn::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMaFasterRcnn::release_name() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaFasterRcnn.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMaFasterRcnn::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaFasterRcnn.name)
}

// -------------------------------------------------------------------

// TidlYoloOd

// repeated .tidl_meta_arch.TIDLYoloParams yolo_param = 1;
inline int TidlYoloOd::_internal_yolo_param_size() const {
  return yolo_param_.size();
}
inline int TidlYoloOd::yolo_param_size() const {
  return _internal_yolo_param_size();
}
inline void TidlYoloOd::clear_yolo_param() {
  yolo_param_.Clear();
}
inline ::tidl_meta_arch::TIDLYoloParams* TidlYoloOd::mutable_yolo_param(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlYoloOd.yolo_param)
  return yolo_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TIDLYoloParams >*
TidlYoloOd::mutable_yolo_param() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlYoloOd.yolo_param)
  return &yolo_param_;
}
inline const ::tidl_meta_arch::TIDLYoloParams& TidlYoloOd::_internal_yolo_param(int index) const {
  return yolo_param_.Get(index);
}
inline const ::tidl_meta_arch::TIDLYoloParams& TidlYoloOd::yolo_param(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlYoloOd.yolo_param)
  return _internal_yolo_param(index);
}
inline ::tidl_meta_arch::TIDLYoloParams* TidlYoloOd::_internal_add_yolo_param() {
  return yolo_param_.Add();
}
inline ::tidl_meta_arch::TIDLYoloParams* TidlYoloOd::add_yolo_param() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlYoloOd.yolo_param)
  return _internal_add_yolo_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::TIDLYoloParams >&
TidlYoloOd::yolo_param() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlYoloOd.yolo_param)
  return yolo_param_;
}

// required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 2;
inline bool TidlYoloOd::_internal_has_detection_output_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || detection_output_param_ != nullptr);
  return value;
}
inline bool TidlYoloOd::has_detection_output_param() const {
  return _internal_has_detection_output_param();
}
inline void TidlYoloOd::clear_detection_output_param() {
  if (detection_output_param_ != nullptr) detection_output_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlYoloOd::_internal_detection_output_param() const {
  const ::tidl_meta_arch::TIDLOdPostProc* p = detection_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::TIDLOdPostProc*>(
      &::tidl_meta_arch::_TIDLOdPostProc_default_instance_);
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlYoloOd::detection_output_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlYoloOd.detection_output_param)
  return _internal_detection_output_param();
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlYoloOd::release_detection_output_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlYoloOd.detection_output_param)
  _has_bits_[0] &= ~0x00000004u;
  ::tidl_meta_arch::TIDLOdPostProc* temp = detection_output_param_;
  detection_output_param_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlYoloOd::_internal_mutable_detection_output_param() {
  _has_bits_[0] |= 0x00000004u;
  if (detection_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::TIDLOdPostProc>(GetArenaNoVirtual());
    detection_output_param_ = p;
  }
  return detection_output_param_;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlYoloOd::mutable_detection_output_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlYoloOd.detection_output_param)
  return _internal_mutable_detection_output_param();
}
inline void TidlYoloOd::set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detection_output_param_;
  }
  if (detection_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detection_output_param_ = detection_output_param;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlYoloOd.detection_output_param)
}

// required string name = 3;
inline bool TidlYoloOd::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TidlYoloOd::has_name() const {
  return _internal_has_name();
}
inline void TidlYoloOd::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TidlYoloOd::name() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlYoloOd.name)
  return _internal_name();
}
inline void TidlYoloOd::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlYoloOd.name)
}
inline std::string* TidlYoloOd::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlYoloOd.name)
  return _internal_mutable_name();
}
inline const std::string& TidlYoloOd::_internal_name() const {
  return name_.GetNoArena();
}
inline void TidlYoloOd::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlYoloOd::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlYoloOd.name)
}
inline void TidlYoloOd::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlYoloOd.name)
}
inline void TidlYoloOd::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlYoloOd.name)
}
inline std::string* TidlYoloOd::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlYoloOd::release_name() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlYoloOd.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlYoloOd::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlYoloOd.name)
}

// required uint32 in_width = 4;
inline bool TidlYoloOd::_internal_has_in_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TidlYoloOd::has_in_width() const {
  return _internal_has_in_width();
}
inline void TidlYoloOd::clear_in_width() {
  in_width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlYoloOd::_internal_in_width() const {
  return in_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlYoloOd::in_width() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlYoloOd.in_width)
  return _internal_in_width();
}
inline void TidlYoloOd::_internal_set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  in_width_ = value;
}
inline void TidlYoloOd::set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in_width(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlYoloOd.in_width)
}

// required uint32 in_height = 5;
inline bool TidlYoloOd::_internal_has_in_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TidlYoloOd::has_in_height() const {
  return _internal_has_in_height();
}
inline void TidlYoloOd::clear_in_height() {
  in_height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlYoloOd::_internal_in_height() const {
  return in_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlYoloOd::in_height() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlYoloOd.in_height)
  return _internal_in_height();
}
inline void TidlYoloOd::_internal_set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  in_height_ = value;
}
inline void TidlYoloOd::set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in_height(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlYoloOd.in_height)
}

// repeated string output = 6;
inline int TidlYoloOd::_internal_output_size() const {
  return output_.size();
}
inline int TidlYoloOd::output_size() const {
  return _internal_output_size();
}
inline void TidlYoloOd::clear_output() {
  output_.Clear();
}
inline std::string* TidlYoloOd::add_output() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlYoloOd.output)
  return _internal_add_output();
}
inline const std::string& TidlYoloOd::_internal_output(int index) const {
  return output_.Get(index);
}
inline const std::string& TidlYoloOd::output(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlYoloOd.output)
  return _internal_output(index);
}
inline std::string* TidlYoloOd::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlYoloOd.output)
  return output_.Mutable(index);
}
inline void TidlYoloOd::set_output(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlYoloOd.output)
  output_.Mutable(index)->assign(value);
}
inline void TidlYoloOd::set_output(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlYoloOd.output)
  output_.Mutable(index)->assign(std::move(value));
}
inline void TidlYoloOd::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlYoloOd.output)
}
inline void TidlYoloOd::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlYoloOd.output)
}
inline std::string* TidlYoloOd::_internal_add_output() {
  return output_.Add();
}
inline void TidlYoloOd::add_output(const std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlYoloOd.output)
}
inline void TidlYoloOd::add_output(std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlYoloOd.output)
}
inline void TidlYoloOd::add_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlYoloOd.output)
}
inline void TidlYoloOd::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlYoloOd.output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlYoloOd::output() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlYoloOd.output)
  return output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlYoloOd::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlYoloOd.output)
  return &output_;
}

// optional string framework = 7;
inline bool TidlYoloOd::_internal_has_framework() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TidlYoloOd::has_framework() const {
  return _internal_has_framework();
}
inline void TidlYoloOd::clear_framework() {
  framework_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TidlYoloOd::framework() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlYoloOd.framework)
  return _internal_framework();
}
inline void TidlYoloOd::set_framework(const std::string& value) {
  _internal_set_framework(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlYoloOd.framework)
}
inline std::string* TidlYoloOd::mutable_framework() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlYoloOd.framework)
  return _internal_mutable_framework();
}
inline const std::string& TidlYoloOd::_internal_framework() const {
  return framework_.GetNoArena();
}
inline void TidlYoloOd::_internal_set_framework(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlYoloOd::set_framework(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlYoloOd.framework)
}
inline void TidlYoloOd::set_framework(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlYoloOd.framework)
}
inline void TidlYoloOd::set_framework(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlYoloOd.framework)
}
inline std::string* TidlYoloOd::_internal_mutable_framework() {
  _has_bits_[0] |= 0x00000002u;
  return framework_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlYoloOd::release_framework() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlYoloOd.framework)
  if (!_internal_has_framework()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return framework_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlYoloOd::set_allocated_framework(std::string* framework) {
  if (framework != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  framework_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), framework);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlYoloOd.framework)
}

// -------------------------------------------------------------------

// TIDLYoloParams

// required string input = 1;
inline bool TIDLYoloParams::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TIDLYoloParams::has_input() const {
  return _internal_has_input();
}
inline void TIDLYoloParams::clear_input() {
  input_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TIDLYoloParams::input() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLYoloParams.input)
  return _internal_input();
}
inline void TIDLYoloParams::set_input(const std::string& value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLYoloParams.input)
}
inline std::string* TIDLYoloParams::mutable_input() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TIDLYoloParams.input)
  return _internal_mutable_input();
}
inline const std::string& TIDLYoloParams::_internal_input() const {
  return input_.GetNoArena();
}
inline void TIDLYoloParams::_internal_set_input(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TIDLYoloParams::set_input(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  input_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TIDLYoloParams.input)
}
inline void TIDLYoloParams::set_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TIDLYoloParams.input)
}
inline void TIDLYoloParams::set_input(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TIDLYoloParams.input)
}
inline std::string* TIDLYoloParams::_internal_mutable_input() {
  _has_bits_[0] |= 0x00000001u;
  return input_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TIDLYoloParams::release_input() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TIDLYoloParams.input)
  if (!_internal_has_input()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return input_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TIDLYoloParams::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  input_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TIDLYoloParams.input)
}

// repeated float anchor_width = 2;
inline int TIDLYoloParams::_internal_anchor_width_size() const {
  return anchor_width_.size();
}
inline int TIDLYoloParams::anchor_width_size() const {
  return _internal_anchor_width_size();
}
inline void TIDLYoloParams::clear_anchor_width() {
  anchor_width_.Clear();
}
inline float TIDLYoloParams::_internal_anchor_width(int index) const {
  return anchor_width_.Get(index);
}
inline float TIDLYoloParams::anchor_width(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLYoloParams.anchor_width)
  return _internal_anchor_width(index);
}
inline void TIDLYoloParams::set_anchor_width(int index, float value) {
  anchor_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLYoloParams.anchor_width)
}
inline void TIDLYoloParams::_internal_add_anchor_width(float value) {
  anchor_width_.Add(value);
}
inline void TIDLYoloParams::add_anchor_width(float value) {
  _internal_add_anchor_width(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLYoloParams.anchor_width)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TIDLYoloParams::_internal_anchor_width() const {
  return anchor_width_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TIDLYoloParams::anchor_width() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLYoloParams.anchor_width)
  return _internal_anchor_width();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TIDLYoloParams::_internal_mutable_anchor_width() {
  return &anchor_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TIDLYoloParams::mutable_anchor_width() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLYoloParams.anchor_width)
  return _internal_mutable_anchor_width();
}

// repeated float anchor_height = 3;
inline int TIDLYoloParams::_internal_anchor_height_size() const {
  return anchor_height_.size();
}
inline int TIDLYoloParams::anchor_height_size() const {
  return _internal_anchor_height_size();
}
inline void TIDLYoloParams::clear_anchor_height() {
  anchor_height_.Clear();
}
inline float TIDLYoloParams::_internal_anchor_height(int index) const {
  return anchor_height_.Get(index);
}
inline float TIDLYoloParams::anchor_height(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLYoloParams.anchor_height)
  return _internal_anchor_height(index);
}
inline void TIDLYoloParams::set_anchor_height(int index, float value) {
  anchor_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLYoloParams.anchor_height)
}
inline void TIDLYoloParams::_internal_add_anchor_height(float value) {
  anchor_height_.Add(value);
}
inline void TIDLYoloParams::add_anchor_height(float value) {
  _internal_add_anchor_height(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TIDLYoloParams.anchor_height)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TIDLYoloParams::_internal_anchor_height() const {
  return anchor_height_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TIDLYoloParams::anchor_height() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TIDLYoloParams.anchor_height)
  return _internal_anchor_height();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TIDLYoloParams::_internal_mutable_anchor_height() {
  return &anchor_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TIDLYoloParams::mutable_anchor_height() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TIDLYoloParams.anchor_height)
  return _internal_mutable_anchor_height();
}

// -------------------------------------------------------------------

// RetinaNetAnchorParameter

// repeated float aspect_ratio = 1;
inline int RetinaNetAnchorParameter::_internal_aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline int RetinaNetAnchorParameter::aspect_ratio_size() const {
  return _internal_aspect_ratio_size();
}
inline void RetinaNetAnchorParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float RetinaNetAnchorParameter::_internal_aspect_ratio(int index) const {
  return aspect_ratio_.Get(index);
}
inline float RetinaNetAnchorParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.RetinaNetAnchorParameter.aspect_ratio)
  return _internal_aspect_ratio(index);
}
inline void RetinaNetAnchorParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.RetinaNetAnchorParameter.aspect_ratio)
}
inline void RetinaNetAnchorParameter::_internal_add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
}
inline void RetinaNetAnchorParameter::add_aspect_ratio(float value) {
  _internal_add_aspect_ratio(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.RetinaNetAnchorParameter.aspect_ratio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetinaNetAnchorParameter::_internal_aspect_ratio() const {
  return aspect_ratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetinaNetAnchorParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.RetinaNetAnchorParameter.aspect_ratio)
  return _internal_aspect_ratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetinaNetAnchorParameter::_internal_mutable_aspect_ratio() {
  return &aspect_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetinaNetAnchorParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.RetinaNetAnchorParameter.aspect_ratio)
  return _internal_mutable_aspect_ratio();
}

// required float octave_base_scale = 2;
inline bool RetinaNetAnchorParameter::_internal_has_octave_base_scale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RetinaNetAnchorParameter::has_octave_base_scale() const {
  return _internal_has_octave_base_scale();
}
inline void RetinaNetAnchorParameter::clear_octave_base_scale() {
  octave_base_scale_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float RetinaNetAnchorParameter::_internal_octave_base_scale() const {
  return octave_base_scale_;
}
inline float RetinaNetAnchorParameter::octave_base_scale() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.RetinaNetAnchorParameter.octave_base_scale)
  return _internal_octave_base_scale();
}
inline void RetinaNetAnchorParameter::_internal_set_octave_base_scale(float value) {
  _has_bits_[0] |= 0x00000001u;
  octave_base_scale_ = value;
}
inline void RetinaNetAnchorParameter::set_octave_base_scale(float value) {
  _internal_set_octave_base_scale(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.RetinaNetAnchorParameter.octave_base_scale)
}

// required uint32 scales_per_octave = 3;
inline bool RetinaNetAnchorParameter::_internal_has_scales_per_octave() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RetinaNetAnchorParameter::has_scales_per_octave() const {
  return _internal_has_scales_per_octave();
}
inline void RetinaNetAnchorParameter::clear_scales_per_octave() {
  scales_per_octave_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RetinaNetAnchorParameter::_internal_scales_per_octave() const {
  return scales_per_octave_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RetinaNetAnchorParameter::scales_per_octave() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.RetinaNetAnchorParameter.scales_per_octave)
  return _internal_scales_per_octave();
}
inline void RetinaNetAnchorParameter::_internal_set_scales_per_octave(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  scales_per_octave_ = value;
}
inline void RetinaNetAnchorParameter::set_scales_per_octave(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scales_per_octave(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.RetinaNetAnchorParameter.scales_per_octave)
}

// -------------------------------------------------------------------

// TidlMaRetinaNet

// repeated string box_input = 1;
inline int TidlMaRetinaNet::_internal_box_input_size() const {
  return box_input_.size();
}
inline int TidlMaRetinaNet::box_input_size() const {
  return _internal_box_input_size();
}
inline void TidlMaRetinaNet::clear_box_input() {
  box_input_.Clear();
}
inline std::string* TidlMaRetinaNet::add_box_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMaRetinaNet.box_input)
  return _internal_add_box_input();
}
inline const std::string& TidlMaRetinaNet::_internal_box_input(int index) const {
  return box_input_.Get(index);
}
inline const std::string& TidlMaRetinaNet::box_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.box_input)
  return _internal_box_input(index);
}
inline std::string* TidlMaRetinaNet::mutable_box_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaRetinaNet.box_input)
  return box_input_.Mutable(index);
}
inline void TidlMaRetinaNet::set_box_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.box_input)
  box_input_.Mutable(index)->assign(value);
}
inline void TidlMaRetinaNet::set_box_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.box_input)
  box_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMaRetinaNet::set_box_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  box_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaRetinaNet.box_input)
}
inline void TidlMaRetinaNet::set_box_input(int index, const char* value, size_t size) {
  box_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaRetinaNet.box_input)
}
inline std::string* TidlMaRetinaNet::_internal_add_box_input() {
  return box_input_.Add();
}
inline void TidlMaRetinaNet::add_box_input(const std::string& value) {
  box_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaRetinaNet.box_input)
}
inline void TidlMaRetinaNet::add_box_input(std::string&& value) {
  box_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaRetinaNet.box_input)
}
inline void TidlMaRetinaNet::add_box_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  box_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMaRetinaNet.box_input)
}
inline void TidlMaRetinaNet::add_box_input(const char* value, size_t size) {
  box_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMaRetinaNet.box_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMaRetinaNet::box_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaRetinaNet.box_input)
  return box_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMaRetinaNet::mutable_box_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaRetinaNet.box_input)
  return &box_input_;
}

// repeated string class_input = 2;
inline int TidlMaRetinaNet::_internal_class_input_size() const {
  return class_input_.size();
}
inline int TidlMaRetinaNet::class_input_size() const {
  return _internal_class_input_size();
}
inline void TidlMaRetinaNet::clear_class_input() {
  class_input_.Clear();
}
inline std::string* TidlMaRetinaNet::add_class_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMaRetinaNet.class_input)
  return _internal_add_class_input();
}
inline const std::string& TidlMaRetinaNet::_internal_class_input(int index) const {
  return class_input_.Get(index);
}
inline const std::string& TidlMaRetinaNet::class_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.class_input)
  return _internal_class_input(index);
}
inline std::string* TidlMaRetinaNet::mutable_class_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaRetinaNet.class_input)
  return class_input_.Mutable(index);
}
inline void TidlMaRetinaNet::set_class_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.class_input)
  class_input_.Mutable(index)->assign(value);
}
inline void TidlMaRetinaNet::set_class_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.class_input)
  class_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMaRetinaNet::set_class_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaRetinaNet.class_input)
}
inline void TidlMaRetinaNet::set_class_input(int index, const char* value, size_t size) {
  class_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaRetinaNet.class_input)
}
inline std::string* TidlMaRetinaNet::_internal_add_class_input() {
  return class_input_.Add();
}
inline void TidlMaRetinaNet::add_class_input(const std::string& value) {
  class_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaRetinaNet.class_input)
}
inline void TidlMaRetinaNet::add_class_input(std::string&& value) {
  class_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaRetinaNet.class_input)
}
inline void TidlMaRetinaNet::add_class_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMaRetinaNet.class_input)
}
inline void TidlMaRetinaNet::add_class_input(const char* value, size_t size) {
  class_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMaRetinaNet.class_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMaRetinaNet::class_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaRetinaNet.class_input)
  return class_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMaRetinaNet::mutable_class_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaRetinaNet.class_input)
  return &class_input_;
}

// repeated string output = 3;
inline int TidlMaRetinaNet::_internal_output_size() const {
  return output_.size();
}
inline int TidlMaRetinaNet::output_size() const {
  return _internal_output_size();
}
inline void TidlMaRetinaNet::clear_output() {
  output_.Clear();
}
inline std::string* TidlMaRetinaNet::add_output() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMaRetinaNet.output)
  return _internal_add_output();
}
inline const std::string& TidlMaRetinaNet::_internal_output(int index) const {
  return output_.Get(index);
}
inline const std::string& TidlMaRetinaNet::output(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.output)
  return _internal_output(index);
}
inline std::string* TidlMaRetinaNet::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaRetinaNet.output)
  return output_.Mutable(index);
}
inline void TidlMaRetinaNet::set_output(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.output)
  output_.Mutable(index)->assign(value);
}
inline void TidlMaRetinaNet::set_output(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.output)
  output_.Mutable(index)->assign(std::move(value));
}
inline void TidlMaRetinaNet::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaRetinaNet.output)
}
inline void TidlMaRetinaNet::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaRetinaNet.output)
}
inline std::string* TidlMaRetinaNet::_internal_add_output() {
  return output_.Add();
}
inline void TidlMaRetinaNet::add_output(const std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaRetinaNet.output)
}
inline void TidlMaRetinaNet::add_output(std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMaRetinaNet.output)
}
inline void TidlMaRetinaNet::add_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMaRetinaNet.output)
}
inline void TidlMaRetinaNet::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMaRetinaNet.output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMaRetinaNet::output() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMaRetinaNet.output)
  return output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMaRetinaNet::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMaRetinaNet.output)
  return &output_;
}

// optional string name = 4;
inline bool TidlMaRetinaNet::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_name() const {
  return _internal_has_name();
}
inline void TidlMaRetinaNet::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TidlMaRetinaNet::name() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.name)
  return _internal_name();
}
inline void TidlMaRetinaNet::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.name)
}
inline std::string* TidlMaRetinaNet::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaRetinaNet.name)
  return _internal_mutable_name();
}
inline const std::string& TidlMaRetinaNet::_internal_name() const {
  return name_.GetNoArena();
}
inline void TidlMaRetinaNet::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMaRetinaNet::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMaRetinaNet.name)
}
inline void TidlMaRetinaNet::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaRetinaNet.name)
}
inline void TidlMaRetinaNet::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaRetinaNet.name)
}
inline std::string* TidlMaRetinaNet::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMaRetinaNet::release_name() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaRetinaNet.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMaRetinaNet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaRetinaNet.name)
}

// required uint32 in_width = 5;
inline bool TidlMaRetinaNet::_internal_has_in_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_in_width() const {
  return _internal_has_in_width();
}
inline void TidlMaRetinaNet::clear_in_width() {
  in_width_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaRetinaNet::_internal_in_width() const {
  return in_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaRetinaNet::in_width() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.in_width)
  return _internal_in_width();
}
inline void TidlMaRetinaNet::_internal_set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  in_width_ = value;
}
inline void TidlMaRetinaNet::set_in_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in_width(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.in_width)
}

// required uint32 in_height = 6;
inline bool TidlMaRetinaNet::_internal_has_in_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_in_height() const {
  return _internal_has_in_height();
}
inline void TidlMaRetinaNet::clear_in_height() {
  in_height_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaRetinaNet::_internal_in_height() const {
  return in_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaRetinaNet::in_height() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.in_height)
  return _internal_in_height();
}
inline void TidlMaRetinaNet::_internal_set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  in_height_ = value;
}
inline void TidlMaRetinaNet::set_in_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in_height(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.in_height)
}

// optional uint32 anchorbox_order = 16 [default = 0];
inline bool TidlMaRetinaNet::_internal_has_anchorbox_order() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_anchorbox_order() const {
  return _internal_has_anchorbox_order();
}
inline void TidlMaRetinaNet::clear_anchorbox_order() {
  anchorbox_order_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaRetinaNet::_internal_anchorbox_order() const {
  return anchorbox_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMaRetinaNet::anchorbox_order() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.anchorbox_order)
  return _internal_anchorbox_order();
}
inline void TidlMaRetinaNet::_internal_set_anchorbox_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  anchorbox_order_ = value;
}
inline void TidlMaRetinaNet::set_anchorbox_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_anchorbox_order(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.anchorbox_order)
}

// optional float x_scale = 7 [default = 10];
inline bool TidlMaRetinaNet::_internal_has_x_scale() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_x_scale() const {
  return _internal_has_x_scale();
}
inline void TidlMaRetinaNet::clear_x_scale() {
  x_scale_ = 10;
  _has_bits_[0] &= ~0x00000400u;
}
inline float TidlMaRetinaNet::_internal_x_scale() const {
  return x_scale_;
}
inline float TidlMaRetinaNet::x_scale() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.x_scale)
  return _internal_x_scale();
}
inline void TidlMaRetinaNet::_internal_set_x_scale(float value) {
  _has_bits_[0] |= 0x00000400u;
  x_scale_ = value;
}
inline void TidlMaRetinaNet::set_x_scale(float value) {
  _internal_set_x_scale(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.x_scale)
}

// optional float y_scale = 8 [default = 10];
inline bool TidlMaRetinaNet::_internal_has_y_scale() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_y_scale() const {
  return _internal_has_y_scale();
}
inline void TidlMaRetinaNet::clear_y_scale() {
  y_scale_ = 10;
  _has_bits_[0] &= ~0x00000800u;
}
inline float TidlMaRetinaNet::_internal_y_scale() const {
  return y_scale_;
}
inline float TidlMaRetinaNet::y_scale() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.y_scale)
  return _internal_y_scale();
}
inline void TidlMaRetinaNet::_internal_set_y_scale(float value) {
  _has_bits_[0] |= 0x00000800u;
  y_scale_ = value;
}
inline void TidlMaRetinaNet::set_y_scale(float value) {
  _internal_set_y_scale(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.y_scale)
}

// optional float x_offset = 14 [default = 0];
inline bool TidlMaRetinaNet::_internal_has_x_offset() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_x_offset() const {
  return _internal_has_x_offset();
}
inline void TidlMaRetinaNet::clear_x_offset() {
  x_offset_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TidlMaRetinaNet::_internal_x_offset() const {
  return x_offset_;
}
inline float TidlMaRetinaNet::x_offset() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.x_offset)
  return _internal_x_offset();
}
inline void TidlMaRetinaNet::_internal_set_x_offset(float value) {
  _has_bits_[0] |= 0x00000040u;
  x_offset_ = value;
}
inline void TidlMaRetinaNet::set_x_offset(float value) {
  _internal_set_x_offset(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.x_offset)
}

// optional float y_offset = 15 [default = 0];
inline bool TidlMaRetinaNet::_internal_has_y_offset() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_y_offset() const {
  return _internal_has_y_offset();
}
inline void TidlMaRetinaNet::clear_y_offset() {
  y_offset_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TidlMaRetinaNet::_internal_y_offset() const {
  return y_offset_;
}
inline float TidlMaRetinaNet::y_offset() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.y_offset)
  return _internal_y_offset();
}
inline void TidlMaRetinaNet::_internal_set_y_offset(float value) {
  _has_bits_[0] |= 0x00000080u;
  y_offset_ = value;
}
inline void TidlMaRetinaNet::set_y_offset(float value) {
  _internal_set_y_offset(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.y_offset)
}

// optional float width_scale = 9 [default = 5];
inline bool TidlMaRetinaNet::_internal_has_width_scale() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_width_scale() const {
  return _internal_has_width_scale();
}
inline void TidlMaRetinaNet::clear_width_scale() {
  width_scale_ = 5;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TidlMaRetinaNet::_internal_width_scale() const {
  return width_scale_;
}
inline float TidlMaRetinaNet::width_scale() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.width_scale)
  return _internal_width_scale();
}
inline void TidlMaRetinaNet::_internal_set_width_scale(float value) {
  _has_bits_[0] |= 0x00001000u;
  width_scale_ = value;
}
inline void TidlMaRetinaNet::set_width_scale(float value) {
  _internal_set_width_scale(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.width_scale)
}

// optional float height_scale = 10 [default = 5];
inline bool TidlMaRetinaNet::_internal_has_height_scale() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_height_scale() const {
  return _internal_has_height_scale();
}
inline void TidlMaRetinaNet::clear_height_scale() {
  height_scale_ = 5;
  _has_bits_[0] &= ~0x00002000u;
}
inline float TidlMaRetinaNet::_internal_height_scale() const {
  return height_scale_;
}
inline float TidlMaRetinaNet::height_scale() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.height_scale)
  return _internal_height_scale();
}
inline void TidlMaRetinaNet::_internal_set_height_scale(float value) {
  _has_bits_[0] |= 0x00002000u;
  height_scale_ = value;
}
inline void TidlMaRetinaNet::set_height_scale(float value) {
  _internal_set_height_scale(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.height_scale)
}

// optional .tidl_meta_arch.TIDLScoreConverter score_converter = 11 [default = SOFTMAX];
inline bool TidlMaRetinaNet::_internal_has_score_converter() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_score_converter() const {
  return _internal_has_score_converter();
}
inline void TidlMaRetinaNet::clear_score_converter() {
  score_converter_ = 2;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::tidl_meta_arch::TIDLScoreConverter TidlMaRetinaNet::_internal_score_converter() const {
  return static_cast< ::tidl_meta_arch::TIDLScoreConverter >(score_converter_);
}
inline ::tidl_meta_arch::TIDLScoreConverter TidlMaRetinaNet::score_converter() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.score_converter)
  return _internal_score_converter();
}
inline void TidlMaRetinaNet::_internal_set_score_converter(::tidl_meta_arch::TIDLScoreConverter value) {
  assert(::tidl_meta_arch::TIDLScoreConverter_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  score_converter_ = value;
}
inline void TidlMaRetinaNet::set_score_converter(::tidl_meta_arch::TIDLScoreConverter value) {
  _internal_set_score_converter(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.score_converter)
}

// required .tidl_meta_arch.RetinaNetAnchorParameter anchor_param = 12;
inline bool TidlMaRetinaNet::_internal_has_anchor_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || anchor_param_ != nullptr);
  return value;
}
inline bool TidlMaRetinaNet::has_anchor_param() const {
  return _internal_has_anchor_param();
}
inline void TidlMaRetinaNet::clear_anchor_param() {
  if (anchor_param_ != nullptr) anchor_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tidl_meta_arch::RetinaNetAnchorParameter& TidlMaRetinaNet::_internal_anchor_param() const {
  const ::tidl_meta_arch::RetinaNetAnchorParameter* p = anchor_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::RetinaNetAnchorParameter*>(
      &::tidl_meta_arch::_RetinaNetAnchorParameter_default_instance_);
}
inline const ::tidl_meta_arch::RetinaNetAnchorParameter& TidlMaRetinaNet::anchor_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.anchor_param)
  return _internal_anchor_param();
}
inline ::tidl_meta_arch::RetinaNetAnchorParameter* TidlMaRetinaNet::release_anchor_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaRetinaNet.anchor_param)
  _has_bits_[0] &= ~0x00000004u;
  ::tidl_meta_arch::RetinaNetAnchorParameter* temp = anchor_param_;
  anchor_param_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::RetinaNetAnchorParameter* TidlMaRetinaNet::_internal_mutable_anchor_param() {
  _has_bits_[0] |= 0x00000004u;
  if (anchor_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::RetinaNetAnchorParameter>(GetArenaNoVirtual());
    anchor_param_ = p;
  }
  return anchor_param_;
}
inline ::tidl_meta_arch::RetinaNetAnchorParameter* TidlMaRetinaNet::mutable_anchor_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaRetinaNet.anchor_param)
  return _internal_mutable_anchor_param();
}
inline void TidlMaRetinaNet::set_allocated_anchor_param(::tidl_meta_arch::RetinaNetAnchorParameter* anchor_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete anchor_param_;
  }
  if (anchor_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anchor_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  anchor_param_ = anchor_param;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaRetinaNet.anchor_param)
}

// required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 13;
inline bool TidlMaRetinaNet::_internal_has_detection_output_param() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || detection_output_param_ != nullptr);
  return value;
}
inline bool TidlMaRetinaNet::has_detection_output_param() const {
  return _internal_has_detection_output_param();
}
inline void TidlMaRetinaNet::clear_detection_output_param() {
  if (detection_output_param_ != nullptr) detection_output_param_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlMaRetinaNet::_internal_detection_output_param() const {
  const ::tidl_meta_arch::TIDLOdPostProc* p = detection_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::TIDLOdPostProc*>(
      &::tidl_meta_arch::_TIDLOdPostProc_default_instance_);
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlMaRetinaNet::detection_output_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.detection_output_param)
  return _internal_detection_output_param();
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaRetinaNet::release_detection_output_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaRetinaNet.detection_output_param)
  _has_bits_[0] &= ~0x00000008u;
  ::tidl_meta_arch::TIDLOdPostProc* temp = detection_output_param_;
  detection_output_param_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaRetinaNet::_internal_mutable_detection_output_param() {
  _has_bits_[0] |= 0x00000008u;
  if (detection_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::TIDLOdPostProc>(GetArenaNoVirtual());
    detection_output_param_ = p;
  }
  return detection_output_param_;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMaRetinaNet::mutable_detection_output_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaRetinaNet.detection_output_param)
  return _internal_mutable_detection_output_param();
}
inline void TidlMaRetinaNet::set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detection_output_param_;
  }
  if (detection_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  detection_output_param_ = detection_output_param;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaRetinaNet.detection_output_param)
}

// optional string framework = 17;
inline bool TidlMaRetinaNet::_internal_has_framework() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TidlMaRetinaNet::has_framework() const {
  return _internal_has_framework();
}
inline void TidlMaRetinaNet::clear_framework() {
  framework_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TidlMaRetinaNet::framework() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMaRetinaNet.framework)
  return _internal_framework();
}
inline void TidlMaRetinaNet::set_framework(const std::string& value) {
  _internal_set_framework(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMaRetinaNet.framework)
}
inline std::string* TidlMaRetinaNet::mutable_framework() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMaRetinaNet.framework)
  return _internal_mutable_framework();
}
inline const std::string& TidlMaRetinaNet::_internal_framework() const {
  return framework_.GetNoArena();
}
inline void TidlMaRetinaNet::_internal_set_framework(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMaRetinaNet::set_framework(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMaRetinaNet.framework)
}
inline void TidlMaRetinaNet::set_framework(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMaRetinaNet.framework)
}
inline void TidlMaRetinaNet::set_framework(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  framework_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMaRetinaNet.framework)
}
inline std::string* TidlMaRetinaNet::_internal_mutable_framework() {
  _has_bits_[0] |= 0x00000002u;
  return framework_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMaRetinaNet::release_framework() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMaRetinaNet.framework)
  if (!_internal_has_framework()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return framework_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMaRetinaNet::set_allocated_framework(std::string* framework) {
  if (framework != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  framework_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), framework);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMaRetinaNet.framework)
}

// -------------------------------------------------------------------

// TidlMa3DOD

// repeated string box_input = 1;
inline int TidlMa3DOD::_internal_box_input_size() const {
  return box_input_.size();
}
inline int TidlMa3DOD::box_input_size() const {
  return _internal_box_input_size();
}
inline void TidlMa3DOD::clear_box_input() {
  box_input_.Clear();
}
inline std::string* TidlMa3DOD::add_box_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMa3DOD.box_input)
  return _internal_add_box_input();
}
inline const std::string& TidlMa3DOD::_internal_box_input(int index) const {
  return box_input_.Get(index);
}
inline const std::string& TidlMa3DOD::box_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.box_input)
  return _internal_box_input(index);
}
inline std::string* TidlMa3DOD::mutable_box_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMa3DOD.box_input)
  return box_input_.Mutable(index);
}
inline void TidlMa3DOD::set_box_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.box_input)
  box_input_.Mutable(index)->assign(value);
}
inline void TidlMa3DOD::set_box_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.box_input)
  box_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMa3DOD::set_box_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  box_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMa3DOD.box_input)
}
inline void TidlMa3DOD::set_box_input(int index, const char* value, size_t size) {
  box_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMa3DOD.box_input)
}
inline std::string* TidlMa3DOD::_internal_add_box_input() {
  return box_input_.Add();
}
inline void TidlMa3DOD::add_box_input(const std::string& value) {
  box_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.box_input)
}
inline void TidlMa3DOD::add_box_input(std::string&& value) {
  box_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.box_input)
}
inline void TidlMa3DOD::add_box_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  box_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMa3DOD.box_input)
}
inline void TidlMa3DOD::add_box_input(const char* value, size_t size) {
  box_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMa3DOD.box_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMa3DOD::box_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMa3DOD.box_input)
  return box_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMa3DOD::mutable_box_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMa3DOD.box_input)
  return &box_input_;
}

// repeated string class_input = 2;
inline int TidlMa3DOD::_internal_class_input_size() const {
  return class_input_.size();
}
inline int TidlMa3DOD::class_input_size() const {
  return _internal_class_input_size();
}
inline void TidlMa3DOD::clear_class_input() {
  class_input_.Clear();
}
inline std::string* TidlMa3DOD::add_class_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMa3DOD.class_input)
  return _internal_add_class_input();
}
inline const std::string& TidlMa3DOD::_internal_class_input(int index) const {
  return class_input_.Get(index);
}
inline const std::string& TidlMa3DOD::class_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.class_input)
  return _internal_class_input(index);
}
inline std::string* TidlMa3DOD::mutable_class_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMa3DOD.class_input)
  return class_input_.Mutable(index);
}
inline void TidlMa3DOD::set_class_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.class_input)
  class_input_.Mutable(index)->assign(value);
}
inline void TidlMa3DOD::set_class_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.class_input)
  class_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMa3DOD::set_class_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMa3DOD.class_input)
}
inline void TidlMa3DOD::set_class_input(int index, const char* value, size_t size) {
  class_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMa3DOD.class_input)
}
inline std::string* TidlMa3DOD::_internal_add_class_input() {
  return class_input_.Add();
}
inline void TidlMa3DOD::add_class_input(const std::string& value) {
  class_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.class_input)
}
inline void TidlMa3DOD::add_class_input(std::string&& value) {
  class_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.class_input)
}
inline void TidlMa3DOD::add_class_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMa3DOD.class_input)
}
inline void TidlMa3DOD::add_class_input(const char* value, size_t size) {
  class_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMa3DOD.class_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMa3DOD::class_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMa3DOD.class_input)
  return class_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMa3DOD::mutable_class_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMa3DOD.class_input)
  return &class_input_;
}

// repeated string dir_input = 3;
inline int TidlMa3DOD::_internal_dir_input_size() const {
  return dir_input_.size();
}
inline int TidlMa3DOD::dir_input_size() const {
  return _internal_dir_input_size();
}
inline void TidlMa3DOD::clear_dir_input() {
  dir_input_.Clear();
}
inline std::string* TidlMa3DOD::add_dir_input() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMa3DOD.dir_input)
  return _internal_add_dir_input();
}
inline const std::string& TidlMa3DOD::_internal_dir_input(int index) const {
  return dir_input_.Get(index);
}
inline const std::string& TidlMa3DOD::dir_input(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.dir_input)
  return _internal_dir_input(index);
}
inline std::string* TidlMa3DOD::mutable_dir_input(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMa3DOD.dir_input)
  return dir_input_.Mutable(index);
}
inline void TidlMa3DOD::set_dir_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.dir_input)
  dir_input_.Mutable(index)->assign(value);
}
inline void TidlMa3DOD::set_dir_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.dir_input)
  dir_input_.Mutable(index)->assign(std::move(value));
}
inline void TidlMa3DOD::set_dir_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dir_input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMa3DOD.dir_input)
}
inline void TidlMa3DOD::set_dir_input(int index, const char* value, size_t size) {
  dir_input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMa3DOD.dir_input)
}
inline std::string* TidlMa3DOD::_internal_add_dir_input() {
  return dir_input_.Add();
}
inline void TidlMa3DOD::add_dir_input(const std::string& value) {
  dir_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.dir_input)
}
inline void TidlMa3DOD::add_dir_input(std::string&& value) {
  dir_input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.dir_input)
}
inline void TidlMa3DOD::add_dir_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dir_input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMa3DOD.dir_input)
}
inline void TidlMa3DOD::add_dir_input(const char* value, size_t size) {
  dir_input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMa3DOD.dir_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMa3DOD::dir_input() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMa3DOD.dir_input)
  return dir_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMa3DOD::mutable_dir_input() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMa3DOD.dir_input)
  return &dir_input_;
}

// repeated string output = 4;
inline int TidlMa3DOD::_internal_output_size() const {
  return output_.size();
}
inline int TidlMa3DOD::output_size() const {
  return _internal_output_size();
}
inline void TidlMa3DOD::clear_output() {
  output_.Clear();
}
inline std::string* TidlMa3DOD::add_output() {
  // @@protoc_insertion_point(field_add_mutable:tidl_meta_arch.TidlMa3DOD.output)
  return _internal_add_output();
}
inline const std::string& TidlMa3DOD::_internal_output(int index) const {
  return output_.Get(index);
}
inline const std::string& TidlMa3DOD::output(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.output)
  return _internal_output(index);
}
inline std::string* TidlMa3DOD::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMa3DOD.output)
  return output_.Mutable(index);
}
inline void TidlMa3DOD::set_output(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.output)
  output_.Mutable(index)->assign(value);
}
inline void TidlMa3DOD::set_output(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.output)
  output_.Mutable(index)->assign(std::move(value));
}
inline void TidlMa3DOD::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMa3DOD.output)
}
inline void TidlMa3DOD::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMa3DOD.output)
}
inline std::string* TidlMa3DOD::_internal_add_output() {
  return output_.Add();
}
inline void TidlMa3DOD::add_output(const std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.output)
}
inline void TidlMa3DOD::add_output(std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.output)
}
inline void TidlMa3DOD::add_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tidl_meta_arch.TidlMa3DOD.output)
}
inline void TidlMa3DOD::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tidl_meta_arch.TidlMa3DOD.output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TidlMa3DOD::output() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMa3DOD.output)
  return output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TidlMa3DOD::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMa3DOD.output)
  return &output_;
}

// optional string name = 5;
inline bool TidlMa3DOD::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_name() const {
  return _internal_has_name();
}
inline void TidlMa3DOD::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TidlMa3DOD::name() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.name)
  return _internal_name();
}
inline void TidlMa3DOD::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.name)
}
inline std::string* TidlMa3DOD::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMa3DOD.name)
  return _internal_mutable_name();
}
inline const std::string& TidlMa3DOD::_internal_name() const {
  return name_.GetNoArena();
}
inline void TidlMa3DOD::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TidlMa3DOD::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tidl_meta_arch.TidlMa3DOD.name)
}
inline void TidlMa3DOD::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tidl_meta_arch.TidlMa3DOD.name)
}
inline void TidlMa3DOD::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tidl_meta_arch.TidlMa3DOD.name)
}
inline std::string* TidlMa3DOD::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TidlMa3DOD::release_name() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMa3DOD.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TidlMa3DOD::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMa3DOD.name)
}

// required float min_x = 6;
inline bool TidlMa3DOD::_internal_has_min_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_min_x() const {
  return _internal_has_min_x();
}
inline void TidlMa3DOD::clear_min_x() {
  min_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TidlMa3DOD::_internal_min_x() const {
  return min_x_;
}
inline float TidlMa3DOD::min_x() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.min_x)
  return _internal_min_x();
}
inline void TidlMa3DOD::_internal_set_min_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  min_x_ = value;
}
inline void TidlMa3DOD::set_min_x(float value) {
  _internal_set_min_x(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.min_x)
}

// required float max_x = 7;
inline bool TidlMa3DOD::_internal_has_max_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_max_x() const {
  return _internal_has_max_x();
}
inline void TidlMa3DOD::clear_max_x() {
  max_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TidlMa3DOD::_internal_max_x() const {
  return max_x_;
}
inline float TidlMa3DOD::max_x() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.max_x)
  return _internal_max_x();
}
inline void TidlMa3DOD::_internal_set_max_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  max_x_ = value;
}
inline void TidlMa3DOD::set_max_x(float value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.max_x)
}

// required float min_y = 8;
inline bool TidlMa3DOD::_internal_has_min_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_min_y() const {
  return _internal_has_min_y();
}
inline void TidlMa3DOD::clear_min_y() {
  min_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TidlMa3DOD::_internal_min_y() const {
  return min_y_;
}
inline float TidlMa3DOD::min_y() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.min_y)
  return _internal_min_y();
}
inline void TidlMa3DOD::_internal_set_min_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  min_y_ = value;
}
inline void TidlMa3DOD::set_min_y(float value) {
  _internal_set_min_y(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.min_y)
}

// required float max_y = 9;
inline bool TidlMa3DOD::_internal_has_max_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_max_y() const {
  return _internal_has_max_y();
}
inline void TidlMa3DOD::clear_max_y() {
  max_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TidlMa3DOD::_internal_max_y() const {
  return max_y_;
}
inline float TidlMa3DOD::max_y() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.max_y)
  return _internal_max_y();
}
inline void TidlMa3DOD::_internal_set_max_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  max_y_ = value;
}
inline void TidlMa3DOD::set_max_y(float value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.max_y)
}

// required float min_z = 10;
inline bool TidlMa3DOD::_internal_has_min_z() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_min_z() const {
  return _internal_has_min_z();
}
inline void TidlMa3DOD::clear_min_z() {
  min_z_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TidlMa3DOD::_internal_min_z() const {
  return min_z_;
}
inline float TidlMa3DOD::min_z() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.min_z)
  return _internal_min_z();
}
inline void TidlMa3DOD::_internal_set_min_z(float value) {
  _has_bits_[0] |= 0x00000040u;
  min_z_ = value;
}
inline void TidlMa3DOD::set_min_z(float value) {
  _internal_set_min_z(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.min_z)
}

// required float max_z = 11;
inline bool TidlMa3DOD::_internal_has_max_z() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_max_z() const {
  return _internal_has_max_z();
}
inline void TidlMa3DOD::clear_max_z() {
  max_z_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TidlMa3DOD::_internal_max_z() const {
  return max_z_;
}
inline float TidlMa3DOD::max_z() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.max_z)
  return _internal_max_z();
}
inline void TidlMa3DOD::_internal_set_max_z(float value) {
  _has_bits_[0] |= 0x00000080u;
  max_z_ = value;
}
inline void TidlMa3DOD::set_max_z(float value) {
  _internal_set_max_z(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.max_z)
}

// required float voxel_size_x = 12;
inline bool TidlMa3DOD::_internal_has_voxel_size_x() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_voxel_size_x() const {
  return _internal_has_voxel_size_x();
}
inline void TidlMa3DOD::clear_voxel_size_x() {
  voxel_size_x_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float TidlMa3DOD::_internal_voxel_size_x() const {
  return voxel_size_x_;
}
inline float TidlMa3DOD::voxel_size_x() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.voxel_size_x)
  return _internal_voxel_size_x();
}
inline void TidlMa3DOD::_internal_set_voxel_size_x(float value) {
  _has_bits_[0] |= 0x00000100u;
  voxel_size_x_ = value;
}
inline void TidlMa3DOD::set_voxel_size_x(float value) {
  _internal_set_voxel_size_x(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.voxel_size_x)
}

// required float voxel_size_y = 13;
inline bool TidlMa3DOD::_internal_has_voxel_size_y() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_voxel_size_y() const {
  return _internal_has_voxel_size_y();
}
inline void TidlMa3DOD::clear_voxel_size_y() {
  voxel_size_y_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float TidlMa3DOD::_internal_voxel_size_y() const {
  return voxel_size_y_;
}
inline float TidlMa3DOD::voxel_size_y() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.voxel_size_y)
  return _internal_voxel_size_y();
}
inline void TidlMa3DOD::_internal_set_voxel_size_y(float value) {
  _has_bits_[0] |= 0x00000200u;
  voxel_size_y_ = value;
}
inline void TidlMa3DOD::set_voxel_size_y(float value) {
  _internal_set_voxel_size_y(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.voxel_size_y)
}

// required float voxel_size_z = 14;
inline bool TidlMa3DOD::_internal_has_voxel_size_z() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_voxel_size_z() const {
  return _internal_has_voxel_size_z();
}
inline void TidlMa3DOD::clear_voxel_size_z() {
  voxel_size_z_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float TidlMa3DOD::_internal_voxel_size_z() const {
  return voxel_size_z_;
}
inline float TidlMa3DOD::voxel_size_z() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.voxel_size_z)
  return _internal_voxel_size_z();
}
inline void TidlMa3DOD::_internal_set_voxel_size_z(float value) {
  _has_bits_[0] |= 0x00000400u;
  voxel_size_z_ = value;
}
inline void TidlMa3DOD::set_voxel_size_z(float value) {
  _internal_set_voxel_size_z(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.voxel_size_z)
}

// required uint32 max_points_per_voxel = 15;
inline bool TidlMa3DOD::_internal_has_max_points_per_voxel() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_max_points_per_voxel() const {
  return _internal_has_max_points_per_voxel();
}
inline void TidlMa3DOD::clear_max_points_per_voxel() {
  max_points_per_voxel_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMa3DOD::_internal_max_points_per_voxel() const {
  return max_points_per_voxel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TidlMa3DOD::max_points_per_voxel() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.max_points_per_voxel)
  return _internal_max_points_per_voxel();
}
inline void TidlMa3DOD::_internal_set_max_points_per_voxel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_points_per_voxel_ = value;
}
inline void TidlMa3DOD::set_max_points_per_voxel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_points_per_voxel(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.max_points_per_voxel)
}

// optional .tidl_meta_arch.TIDLScoreConverter score_converter = 16 [default = SIGMOID];
inline bool TidlMa3DOD::_internal_has_score_converter() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_score_converter() const {
  return _internal_has_score_converter();
}
inline void TidlMa3DOD::clear_score_converter() {
  score_converter_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::tidl_meta_arch::TIDLScoreConverter TidlMa3DOD::_internal_score_converter() const {
  return static_cast< ::tidl_meta_arch::TIDLScoreConverter >(score_converter_);
}
inline ::tidl_meta_arch::TIDLScoreConverter TidlMa3DOD::score_converter() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.score_converter)
  return _internal_score_converter();
}
inline void TidlMa3DOD::_internal_set_score_converter(::tidl_meta_arch::TIDLScoreConverter value) {
  assert(::tidl_meta_arch::TIDLScoreConverter_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  score_converter_ = value;
}
inline void TidlMa3DOD::set_score_converter(::tidl_meta_arch::TIDLScoreConverter value) {
  _internal_set_score_converter(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.score_converter)
}

// repeated .tidl_meta_arch.PriorBox3DODParameter prior_box_3dod_param = 17;
inline int TidlMa3DOD::_internal_prior_box_3dod_param_size() const {
  return prior_box_3dod_param_.size();
}
inline int TidlMa3DOD::prior_box_3dod_param_size() const {
  return _internal_prior_box_3dod_param_size();
}
inline void TidlMa3DOD::clear_prior_box_3dod_param() {
  prior_box_3dod_param_.Clear();
}
inline ::tidl_meta_arch::PriorBox3DODParameter* TidlMa3DOD::mutable_prior_box_3dod_param(int index) {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMa3DOD.prior_box_3dod_param)
  return prior_box_3dod_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBox3DODParameter >*
TidlMa3DOD::mutable_prior_box_3dod_param() {
  // @@protoc_insertion_point(field_mutable_list:tidl_meta_arch.TidlMa3DOD.prior_box_3dod_param)
  return &prior_box_3dod_param_;
}
inline const ::tidl_meta_arch::PriorBox3DODParameter& TidlMa3DOD::_internal_prior_box_3dod_param(int index) const {
  return prior_box_3dod_param_.Get(index);
}
inline const ::tidl_meta_arch::PriorBox3DODParameter& TidlMa3DOD::prior_box_3dod_param(int index) const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.prior_box_3dod_param)
  return _internal_prior_box_3dod_param(index);
}
inline ::tidl_meta_arch::PriorBox3DODParameter* TidlMa3DOD::_internal_add_prior_box_3dod_param() {
  return prior_box_3dod_param_.Add();
}
inline ::tidl_meta_arch::PriorBox3DODParameter* TidlMa3DOD::add_prior_box_3dod_param() {
  // @@protoc_insertion_point(field_add:tidl_meta_arch.TidlMa3DOD.prior_box_3dod_param)
  return _internal_add_prior_box_3dod_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tidl_meta_arch::PriorBox3DODParameter >&
TidlMa3DOD::prior_box_3dod_param() const {
  // @@protoc_insertion_point(field_list:tidl_meta_arch.TidlMa3DOD.prior_box_3dod_param)
  return prior_box_3dod_param_;
}

// optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 18;
inline bool TidlMa3DOD::_internal_has_detection_output_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || detection_output_param_ != nullptr);
  return value;
}
inline bool TidlMa3DOD::has_detection_output_param() const {
  return _internal_has_detection_output_param();
}
inline void TidlMa3DOD::clear_detection_output_param() {
  if (detection_output_param_ != nullptr) detection_output_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlMa3DOD::_internal_detection_output_param() const {
  const ::tidl_meta_arch::TIDLOdPostProc* p = detection_output_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tidl_meta_arch::TIDLOdPostProc*>(
      &::tidl_meta_arch::_TIDLOdPostProc_default_instance_);
}
inline const ::tidl_meta_arch::TIDLOdPostProc& TidlMa3DOD::detection_output_param() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.detection_output_param)
  return _internal_detection_output_param();
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMa3DOD::release_detection_output_param() {
  // @@protoc_insertion_point(field_release:tidl_meta_arch.TidlMa3DOD.detection_output_param)
  _has_bits_[0] &= ~0x00000002u;
  ::tidl_meta_arch::TIDLOdPostProc* temp = detection_output_param_;
  detection_output_param_ = nullptr;
  return temp;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMa3DOD::_internal_mutable_detection_output_param() {
  _has_bits_[0] |= 0x00000002u;
  if (detection_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::tidl_meta_arch::TIDLOdPostProc>(GetArenaNoVirtual());
    detection_output_param_ = p;
  }
  return detection_output_param_;
}
inline ::tidl_meta_arch::TIDLOdPostProc* TidlMa3DOD::mutable_detection_output_param() {
  // @@protoc_insertion_point(field_mutable:tidl_meta_arch.TidlMa3DOD.detection_output_param)
  return _internal_mutable_detection_output_param();
}
inline void TidlMa3DOD::set_allocated_detection_output_param(::tidl_meta_arch::TIDLOdPostProc* detection_output_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detection_output_param_;
  }
  if (detection_output_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_output_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_output_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  detection_output_param_ = detection_output_param;
  // @@protoc_insertion_point(field_set_allocated:tidl_meta_arch.TidlMa3DOD.detection_output_param)
}

// optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 19 [default = SEPARATED];
inline bool TidlMa3DOD::_internal_has_data_layout() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TidlMa3DOD::has_data_layout() const {
  return _internal_has_data_layout();
}
inline void TidlMa3DOD::clear_data_layout() {
  data_layout_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::tidl_meta_arch::TIDLAnchorDataLayout TidlMa3DOD::_internal_data_layout() const {
  return static_cast< ::tidl_meta_arch::TIDLAnchorDataLayout >(data_layout_);
}
inline ::tidl_meta_arch::TIDLAnchorDataLayout TidlMa3DOD::data_layout() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TidlMa3DOD.data_layout)
  return _internal_data_layout();
}
inline void TidlMa3DOD::_internal_set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value) {
  assert(::tidl_meta_arch::TIDLAnchorDataLayout_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  data_layout_ = value;
}
inline void TidlMa3DOD::set_data_layout(::tidl_meta_arch::TIDLAnchorDataLayout value) {
  _internal_set_data_layout(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TidlMa3DOD.data_layout)
}

// -------------------------------------------------------------------

// TIDLCameraIntrinsicParams

// optional float fx = 1 [default = 1];
inline bool TIDLCameraIntrinsicParams::_internal_has_fx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TIDLCameraIntrinsicParams::has_fx() const {
  return _internal_has_fx();
}
inline void TIDLCameraIntrinsicParams::clear_fx() {
  fx_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TIDLCameraIntrinsicParams::_internal_fx() const {
  return fx_;
}
inline float TIDLCameraIntrinsicParams::fx() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLCameraIntrinsicParams.fx)
  return _internal_fx();
}
inline void TIDLCameraIntrinsicParams::_internal_set_fx(float value) {
  _has_bits_[0] |= 0x00000004u;
  fx_ = value;
}
inline void TIDLCameraIntrinsicParams::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLCameraIntrinsicParams.fx)
}

// optional float fy = 2 [default = 1];
inline bool TIDLCameraIntrinsicParams::_internal_has_fy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TIDLCameraIntrinsicParams::has_fy() const {
  return _internal_has_fy();
}
inline void TIDLCameraIntrinsicParams::clear_fy() {
  fy_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TIDLCameraIntrinsicParams::_internal_fy() const {
  return fy_;
}
inline float TIDLCameraIntrinsicParams::fy() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLCameraIntrinsicParams.fy)
  return _internal_fy();
}
inline void TIDLCameraIntrinsicParams::_internal_set_fy(float value) {
  _has_bits_[0] |= 0x00000008u;
  fy_ = value;
}
inline void TIDLCameraIntrinsicParams::set_fy(float value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLCameraIntrinsicParams.fy)
}

// optional float px = 3 [default = 0];
inline bool TIDLCameraIntrinsicParams::_internal_has_px() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TIDLCameraIntrinsicParams::has_px() const {
  return _internal_has_px();
}
inline void TIDLCameraIntrinsicParams::clear_px() {
  px_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TIDLCameraIntrinsicParams::_internal_px() const {
  return px_;
}
inline float TIDLCameraIntrinsicParams::px() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLCameraIntrinsicParams.px)
  return _internal_px();
}
inline void TIDLCameraIntrinsicParams::_internal_set_px(float value) {
  _has_bits_[0] |= 0x00000001u;
  px_ = value;
}
inline void TIDLCameraIntrinsicParams::set_px(float value) {
  _internal_set_px(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLCameraIntrinsicParams.px)
}

// optional float py = 4 [default = 0];
inline bool TIDLCameraIntrinsicParams::_internal_has_py() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TIDLCameraIntrinsicParams::has_py() const {
  return _internal_has_py();
}
inline void TIDLCameraIntrinsicParams::clear_py() {
  py_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TIDLCameraIntrinsicParams::_internal_py() const {
  return py_;
}
inline float TIDLCameraIntrinsicParams::py() const {
  // @@protoc_insertion_point(field_get:tidl_meta_arch.TIDLCameraIntrinsicParams.py)
  return _internal_py();
}
inline void TIDLCameraIntrinsicParams::_internal_set_py(float value) {
  _has_bits_[0] |= 0x00000002u;
  py_ = value;
}
inline void TIDLCameraIntrinsicParams::set_py(float value) {
  _internal_set_py(value);
  // @@protoc_insertion_point(field_set:tidl_meta_arch.TIDLCameraIntrinsicParams.py)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tidl_meta_arch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tidl_meta_arch::TIDLBoxCodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tidl_meta_arch::TIDLBoxCodeType>() {
  return ::tidl_meta_arch::TIDLBoxCodeType_descriptor();
}
template <> struct is_proto_enum< ::tidl_meta_arch::TIDLScoreConverter> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tidl_meta_arch::TIDLScoreConverter>() {
  return ::tidl_meta_arch::TIDLScoreConverter_descriptor();
}
template <> struct is_proto_enum< ::tidl_meta_arch::TIDLAnchorDataLayout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tidl_meta_arch::TIDLAnchorDataLayout>() {
  return ::tidl_meta_arch::TIDLAnchorDataLayout_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tidl_5fmeta_5farch_2eproto
