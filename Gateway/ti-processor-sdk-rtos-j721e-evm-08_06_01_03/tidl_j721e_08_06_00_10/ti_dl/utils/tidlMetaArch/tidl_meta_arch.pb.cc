// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tidl_meta_arch.proto

#include "tidl_meta_arch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriorBox3DODParameter_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriorBoxParameter_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetinaNetAnchorParameter_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIDLCameraIntrinsicParams_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIDLNmsParam_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIDLOdSaveParams_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIDLYoloParams_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlMa3DOD_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlMaCaffeSsd_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TidlMaFasterRcnn_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlMaRetinaNet_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlMaSsd_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TidlMaTfOdApiSsd_tidl_5fmeta_5farch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tidl_5fmeta_5farch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlYoloOd_tidl_5fmeta_5farch_2eproto;
namespace tidl_meta_arch {
class TIDLMetaArchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TIDLMetaArch> _instance;
} _TIDLMetaArch_default_instance_;
class TIDLNmsParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TIDLNmsParam> _instance;
} _TIDLNmsParam_default_instance_;
class PriorBoxParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriorBoxParameter> _instance;
} _PriorBoxParameter_default_instance_;
class PriorBox3DODParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriorBox3DODParameter> _instance;
} _PriorBox3DODParameter_default_instance_;
class TIDLOdSaveParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TIDLOdSaveParams> _instance;
} _TIDLOdSaveParams_default_instance_;
class TIDLOdPostProcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TIDLOdPostProc> _instance;
} _TIDLOdPostProc_default_instance_;
class TidlMaSsdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TidlMaSsd> _instance;
} _TidlMaSsd_default_instance_;
class TidlMaCaffeSsdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TidlMaCaffeSsd> _instance;
} _TidlMaCaffeSsd_default_instance_;
class TidlMaTfOdApiSsdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TidlMaTfOdApiSsd> _instance;
} _TidlMaTfOdApiSsd_default_instance_;
class TidlMaFasterRcnnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TidlMaFasterRcnn> _instance;
} _TidlMaFasterRcnn_default_instance_;
class TidlYoloOdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TidlYoloOd> _instance;
} _TidlYoloOd_default_instance_;
class TIDLYoloParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TIDLYoloParams> _instance;
} _TIDLYoloParams_default_instance_;
class RetinaNetAnchorParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetinaNetAnchorParameter> _instance;
} _RetinaNetAnchorParameter_default_instance_;
class TidlMaRetinaNetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TidlMaRetinaNet> _instance;
} _TidlMaRetinaNet_default_instance_;
class TidlMa3DODDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TidlMa3DOD> _instance;
} _TidlMa3DOD_default_instance_;
class TIDLCameraIntrinsicParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TIDLCameraIntrinsicParams> _instance;
} _TIDLCameraIntrinsicParams_default_instance_;
}  // namespace tidl_meta_arch
static void InitDefaultsscc_info_PriorBox3DODParameter_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_PriorBox3DODParameter_default_instance_;
    new (ptr) ::tidl_meta_arch::PriorBox3DODParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::PriorBox3DODParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriorBox3DODParameter_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriorBox3DODParameter_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_PriorBoxParameter_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_PriorBoxParameter_default_instance_;
    new (ptr) ::tidl_meta_arch::PriorBoxParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::PriorBoxParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriorBoxParameter_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriorBoxParameter_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_RetinaNetAnchorParameter_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_RetinaNetAnchorParameter_default_instance_;
    new (ptr) ::tidl_meta_arch::RetinaNetAnchorParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::RetinaNetAnchorParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetinaNetAnchorParameter_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RetinaNetAnchorParameter_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_TIDLCameraIntrinsicParams_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TIDLCameraIntrinsicParams_default_instance_;
    new (ptr) ::tidl_meta_arch::TIDLCameraIntrinsicParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TIDLCameraIntrinsicParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIDLCameraIntrinsicParams_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TIDLCameraIntrinsicParams_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_TIDLMetaArch_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TIDLMetaArch_default_instance_;
    new (ptr) ::tidl_meta_arch::TIDLMetaArch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TIDLMetaArch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TIDLMetaArch_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_TIDLMetaArch_tidl_5fmeta_5farch_2eproto}, {
      &scc_info_TidlMaCaffeSsd_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TidlMaTfOdApiSsd_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TidlMaSsd_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TidlMaFasterRcnn_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TidlYoloOd_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TidlMaRetinaNet_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TidlMa3DOD_tidl_5fmeta_5farch_2eproto.base,}};

static void InitDefaultsscc_info_TIDLNmsParam_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TIDLNmsParam_default_instance_;
    new (ptr) ::tidl_meta_arch::TIDLNmsParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TIDLNmsParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIDLNmsParam_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TIDLNmsParam_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TIDLOdPostProc_default_instance_;
    new (ptr) ::tidl_meta_arch::TIDLOdPostProc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TIDLOdPostProc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto}, {
      &scc_info_TIDLNmsParam_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TIDLOdSaveParams_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TIDLCameraIntrinsicParams_tidl_5fmeta_5farch_2eproto.base,}};

static void InitDefaultsscc_info_TIDLOdSaveParams_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TIDLOdSaveParams_default_instance_;
    new (ptr) ::tidl_meta_arch::TIDLOdSaveParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TIDLOdSaveParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIDLOdSaveParams_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TIDLOdSaveParams_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_TIDLYoloParams_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TIDLYoloParams_default_instance_;
    new (ptr) ::tidl_meta_arch::TIDLYoloParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TIDLYoloParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TIDLYoloParams_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TIDLYoloParams_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_TidlMa3DOD_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TidlMa3DOD_default_instance_;
    new (ptr) ::tidl_meta_arch::TidlMa3DOD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TidlMa3DOD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlMa3DOD_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TidlMa3DOD_tidl_5fmeta_5farch_2eproto}, {
      &scc_info_PriorBox3DODParameter_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto.base,}};

static void InitDefaultsscc_info_TidlMaCaffeSsd_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TidlMaCaffeSsd_default_instance_;
    new (ptr) ::tidl_meta_arch::TidlMaCaffeSsd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TidlMaCaffeSsd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlMaCaffeSsd_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TidlMaCaffeSsd_tidl_5fmeta_5farch_2eproto}, {
      &scc_info_PriorBoxParameter_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto.base,}};

static void InitDefaultsscc_info_TidlMaFasterRcnn_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TidlMaFasterRcnn_default_instance_;
    new (ptr) ::tidl_meta_arch::TidlMaFasterRcnn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TidlMaFasterRcnn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TidlMaFasterRcnn_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TidlMaFasterRcnn_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_TidlMaRetinaNet_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TidlMaRetinaNet_default_instance_;
    new (ptr) ::tidl_meta_arch::TidlMaRetinaNet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TidlMaRetinaNet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlMaRetinaNet_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TidlMaRetinaNet_tidl_5fmeta_5farch_2eproto}, {
      &scc_info_RetinaNetAnchorParameter_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto.base,}};

static void InitDefaultsscc_info_TidlMaSsd_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TidlMaSsd_default_instance_;
    new (ptr) ::tidl_meta_arch::TidlMaSsd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TidlMaSsd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlMaSsd_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TidlMaSsd_tidl_5fmeta_5farch_2eproto}, {
      &scc_info_PriorBoxParameter_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto.base,}};

static void InitDefaultsscc_info_TidlMaTfOdApiSsd_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TidlMaTfOdApiSsd_default_instance_;
    new (ptr) ::tidl_meta_arch::TidlMaTfOdApiSsd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TidlMaTfOdApiSsd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TidlMaTfOdApiSsd_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TidlMaTfOdApiSsd_tidl_5fmeta_5farch_2eproto}, {}};

static void InitDefaultsscc_info_TidlYoloOd_tidl_5fmeta_5farch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tidl_meta_arch::_TidlYoloOd_default_instance_;
    new (ptr) ::tidl_meta_arch::TidlYoloOd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tidl_meta_arch::TidlYoloOd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TidlYoloOd_tidl_5fmeta_5farch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TidlYoloOd_tidl_5fmeta_5farch_2eproto}, {
      &scc_info_TIDLYoloParams_tidl_5fmeta_5farch_2eproto.base,
      &scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tidl_5fmeta_5farch_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tidl_5fmeta_5farch_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tidl_5fmeta_5farch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tidl_5fmeta_5farch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, name_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, caffe_ssd_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, tf_od_api_ssd_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, tidl_ssd_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, tidl_faster_rcnn_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, tidl_yolo_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, tidl_retinanet_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLMetaArch, tidl_3dod_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLNmsParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLNmsParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLNmsParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLNmsParam, top_k_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLNmsParam, top_k_all_class_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLNmsParam, eta_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, min_size_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, max_size_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, flip_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, clip_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, variance_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, img_size_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, img_h_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, img_w_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, step_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, step_h_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, step_w_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, offset_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBoxParameter, num_keypoint_),
  ~0u,
  ~0u,
  ~0u,
  8,
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, anchor_width_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, anchor_height_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, anchor_length_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, step_x_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, step_y_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, step_z_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, offset_x_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, offset_y_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, offset_z_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, offset_dir_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::PriorBox3DODParameter, rotation_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, output_directory_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, output_name_prefix_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, output_format_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, label_map_file_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, name_size_file_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, num_test_image_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdSaveParams, resize_param_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, num_classes_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, share_location_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, background_label_id_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, nms_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, save_output_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, code_type_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, variance_encoded_in_target_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, confidence_threshold_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, visualize_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, visualize_threshold_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, save_file_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, num_keypoint_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, keypoint_confidence_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, sub_code_type_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLOdPostProc, camera_intrinsic_params_),
  4,
  14,
  5,
  1,
  2,
  15,
  7,
  13,
  6,
  8,
  10,
  0,
  11,
  9,
  12,
  3,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, box_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, class_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, output_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, name_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, in_width_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, in_height_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, score_converter_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, detection_output_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaSsd, data_layout_),
  ~0u,
  ~0u,
  0,
  1,
  3,
  4,
  6,
  ~0u,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, box_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, class_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, output_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, name_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, in_width_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, in_height_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, score_converter_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, detection_output_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, data_layout_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaCaffeSsd, framework_),
  ~0u,
  ~0u,
  ~0u,
  0,
  3,
  4,
  6,
  ~0u,
  2,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaTfOdApiSsd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaTfOdApiSsd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaTfOdApiSsd, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaFasterRcnn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaFasterRcnn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaFasterRcnn, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, yolo_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, detection_output_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, name_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, in_width_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, in_height_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, output_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlYoloOd, framework_),
  ~0u,
  2,
  0,
  3,
  4,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLYoloParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLYoloParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLYoloParams, input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLYoloParams, anchor_width_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLYoloParams, anchor_height_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::RetinaNetAnchorParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::RetinaNetAnchorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::RetinaNetAnchorParameter, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::RetinaNetAnchorParameter, octave_base_scale_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::RetinaNetAnchorParameter, scales_per_octave_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, box_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, class_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, output_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, name_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, in_width_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, in_height_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, anchorbox_order_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, x_scale_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, y_scale_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, x_offset_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, y_offset_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, width_scale_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, height_scale_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, score_converter_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, anchor_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, detection_output_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMaRetinaNet, framework_),
  ~0u,
  ~0u,
  ~0u,
  0,
  4,
  5,
  8,
  10,
  11,
  6,
  7,
  12,
  13,
  9,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, box_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, class_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, dir_input_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, output_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, name_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, min_x_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, max_x_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, min_y_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, max_y_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, min_z_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, max_z_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, voxel_size_x_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, voxel_size_y_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, voxel_size_z_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, max_points_per_voxel_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, score_converter_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, prior_box_3dod_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, detection_output_param_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TidlMa3DOD, data_layout_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  ~0u,
  1,
  12,
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLCameraIntrinsicParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLCameraIntrinsicParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLCameraIntrinsicParams, fx_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLCameraIntrinsicParams, fy_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLCameraIntrinsicParams, px_),
  PROTOBUF_FIELD_OFFSET(::tidl_meta_arch::TIDLCameraIntrinsicParams, py_),
  2,
  3,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::tidl_meta_arch::TIDLMetaArch)},
  { 21, 30, sizeof(::tidl_meta_arch::TIDLNmsParam)},
  { 34, 53, sizeof(::tidl_meta_arch::PriorBoxParameter)},
  { 67, 83, sizeof(::tidl_meta_arch::PriorBox3DODParameter)},
  { 94, 106, sizeof(::tidl_meta_arch::TIDLOdSaveParams)},
  { 113, 134, sizeof(::tidl_meta_arch::TIDLOdPostProc)},
  { 150, 165, sizeof(::tidl_meta_arch::TidlMaSsd)},
  { 175, 191, sizeof(::tidl_meta_arch::TidlMaCaffeSsd)},
  { 202, 208, sizeof(::tidl_meta_arch::TidlMaTfOdApiSsd)},
  { 209, 215, sizeof(::tidl_meta_arch::TidlMaFasterRcnn)},
  { 216, 228, sizeof(::tidl_meta_arch::TidlYoloOd)},
  { 235, 243, sizeof(::tidl_meta_arch::TIDLYoloParams)},
  { 246, 254, sizeof(::tidl_meta_arch::RetinaNetAnchorParameter)},
  { 257, 279, sizeof(::tidl_meta_arch::TidlMaRetinaNet)},
  { 296, 320, sizeof(::tidl_meta_arch::TidlMa3DOD)},
  { 339, 348, sizeof(::tidl_meta_arch::TIDLCameraIntrinsicParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TIDLMetaArch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TIDLNmsParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_PriorBoxParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_PriorBox3DODParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TIDLOdSaveParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TIDLOdPostProc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TidlMaSsd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TidlMaCaffeSsd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TidlMaTfOdApiSsd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TidlMaFasterRcnn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TidlYoloOd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TIDLYoloParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_RetinaNetAnchorParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TidlMaRetinaNet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TidlMa3DOD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tidl_meta_arch::_TIDLCameraIntrinsicParams_default_instance_),
};

const char descriptor_table_protodef_tidl_5fmeta_5farch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024tidl_meta_arch.proto\022\016tidl_meta_arch\"\210"
  "\003\n\014TIDLMetaArch\022\014\n\004name\030\001 \001(\t\0221\n\tcaffe_s"
  "sd\030\002 \003(\0132\036.tidl_meta_arch.TidlMaCaffeSsd"
  "\0227\n\rtf_od_api_ssd\030\003 \003(\0132 .tidl_meta_arch"
  ".TidlMaTfOdApiSsd\022+\n\010tidl_ssd\030\004 \003(\0132\031.ti"
  "dl_meta_arch.TidlMaSsd\022:\n\020tidl_faster_rc"
  "nn\030\005 \003(\0132 .tidl_meta_arch.TidlMaFasterRc"
  "nn\022-\n\ttidl_yolo\030\006 \003(\0132\032.tidl_meta_arch.T"
  "idlYoloOd\0227\n\016tidl_retinanet\030\007 \003(\0132\037.tidl"
  "_meta_arch.TidlMaRetinaNet\022-\n\ttidl_3dod\030"
  "\010 \003(\0132\032.tidl_meta_arch.TidlMa3DOD\"f\n\014TID"
  "LNmsParam\022\032\n\rnms_threshold\030\001 \001(\002:\0030.3\022\r\n"
  "\005top_k\030\002 \001(\005\022\033\n\017top_k_all_class\030\003 \001(\005:\002-"
  "1\022\016\n\003eta\030\004 \001(\002:\0011\"\224\002\n\021PriorBoxParameter\022"
  "\020\n\010min_size\030\001 \003(\002\022\020\n\010max_size\030\002 \003(\002\022\024\n\014a"
  "spect_ratio\030\003 \003(\002\022\022\n\004flip\030\004 \001(\010:\004true\022\023\n"
  "\004clip\030\005 \001(\010:\005false\022\020\n\010variance\030\006 \003(\002\022\020\n\010"
  "img_size\030\007 \001(\r\022\r\n\005img_h\030\010 \001(\r\022\r\n\005img_w\030\t"
  " \001(\r\022\014\n\004step\030\n \001(\002\022\016\n\006step_h\030\013 \001(\002\022\016\n\006st"
  "ep_w\030\014 \001(\002\022\023\n\006offset\030\r \001(\002:\0030.5\022\027\n\014num_k"
  "eypoint\030\016 \001(\r:\0010\"\347\001\n\025PriorBox3DODParamet"
  "er\022\024\n\014anchor_width\030\001 \003(\002\022\025\n\ranchor_heigh"
  "t\030\002 \003(\002\022\025\n\ranchor_length\030\003 \003(\002\022\016\n\006step_x"
  "\030\004 \002(\002\022\016\n\006step_y\030\005 \002(\002\022\016\n\006step_z\030\006 \002(\002\022\020"
  "\n\010offset_x\030\007 \002(\002\022\020\n\010offset_y\030\010 \002(\002\022\020\n\010of"
  "fset_z\030\t \002(\002\022\022\n\noffset_dir\030\n \002(\002\022\020\n\010rota"
  "tion\030\013 \003(\002\"\275\001\n\020TIDLOdSaveParams\022\030\n\020outpu"
  "t_directory\030\001 \001(\t\022\032\n\022output_name_prefix\030"
  "\002 \001(\t\022\025\n\routput_format\030\003 \001(\t\022\026\n\016label_ma"
  "p_file\030\004 \001(\t\022\026\n\016name_size_file\030\005 \001(\t\022\026\n\016"
  "num_test_image\030\006 \001(\r\022\024\n\014resize_param\030\007 \001"
  "(\t\"\333\004\n\016TIDLOdPostProc\022\023\n\013num_classes\030\001 \001"
  "(\r\022\034\n\016share_location\030\002 \001(\010:\004true\022\036\n\023back"
  "ground_label_id\030\003 \001(\005:\0010\022/\n\tnms_param\030\004 "
  "\001(\0132\034.tidl_meta_arch.TIDLNmsParam\022;\n\021sav"
  "e_output_param\030\005 \001(\0132 .tidl_meta_arch.TI"
  "DLOdSaveParams\022:\n\tcode_type\030\006 \001(\0162\037.tidl"
  "_meta_arch.TIDLBoxCodeType:\006CORNER\022)\n\032va"
  "riance_encoded_in_target\030\010 \001(\010:\005false\022\026\n"
  "\nkeep_top_k\030\007 \001(\005:\002-1\022\034\n\024confidence_thre"
  "shold\030\t \001(\002\022\030\n\tvisualize\030\n \001(\010:\005false\022\033\n"
  "\023visualize_threshold\030\013 \001(\002\022\021\n\tsave_file\030"
  "\014 \001(\t\022\027\n\014num_keypoint\030\r \001(\r:\0010\022\"\n\023keypoi"
  "nt_confidence\030\016 \001(\010:\005false\022\030\n\rsub_code_t"
  "ype\030\017 \001(\r:\0010\022J\n\027camera_intrinsic_params\030"
  "\020 \001(\0132).tidl_meta_arch.TIDLCameraIntrins"
  "icParams\"\376\002\n\tTidlMaSsd\022\021\n\tbox_input\030\001 \003("
  "\t\022\023\n\013class_input\030\002 \003(\t\022\016\n\006output\030\003 \001(\t\022\014"
  "\n\004name\030\004 \001(\t\022\020\n\010in_width\030\005 \001(\r\022\021\n\tin_hei"
  "ght\030\006 \001(\r\022D\n\017score_converter\030\007 \001(\0162\".tid"
  "l_meta_arch.TIDLScoreConverter:\007SOFTMAX\022"
  ":\n\017prior_box_param\030\010 \003(\0132!.tidl_meta_arc"
  "h.PriorBoxParameter\022>\n\026detection_output_"
  "param\030\t \001(\0132\036.tidl_meta_arch.TIDLOdPostP"
  "roc\022D\n\013data_layout\030\n \001(\0162$.tidl_meta_arc"
  "h.TIDLAnchorDataLayout:\tSEPARATED\"\226\003\n\016Ti"
  "dlMaCaffeSsd\022\021\n\tbox_input\030\001 \003(\t\022\023\n\013class"
  "_input\030\002 \003(\t\022\016\n\006output\030\003 \003(\t\022\014\n\004name\030\004 \001"
  "(\t\022\020\n\010in_width\030\005 \001(\r\022\021\n\tin_height\030\006 \001(\r\022"
  "D\n\017score_converter\030\007 \001(\0162\".tidl_meta_arc"
  "h.TIDLScoreConverter:\007SOFTMAX\022:\n\017prior_b"
  "ox_param\030\010 \003(\0132!.tidl_meta_arch.PriorBox"
  "Parameter\022>\n\026detection_output_param\030\t \001("
  "\0132\036.tidl_meta_arch.TIDLOdPostProc\022D\n\013dat"
  "a_layout\030\n \001(\0162$.tidl_meta_arch.TIDLAnch"
  "orDataLayout:\tSEPARATED\022\021\n\tframework\030\013 \001"
  "(\t\" \n\020TidlMaTfOdApiSsd\022\014\n\004name\030\001 \001(\t\" \n\020"
  "TidlMaFasterRcnn\022\014\n\004name\030\001 \001(\t\"\326\001\n\nTidlY"
  "oloOd\0222\n\nyolo_param\030\001 \003(\0132\036.tidl_meta_ar"
  "ch.TIDLYoloParams\022>\n\026detection_output_pa"
  "ram\030\002 \002(\0132\036.tidl_meta_arch.TIDLOdPostPro"
  "c\022\014\n\004name\030\003 \002(\t\022\020\n\010in_width\030\004 \002(\r\022\021\n\tin_"
  "height\030\005 \002(\r\022\016\n\006output\030\006 \003(\t\022\021\n\tframewor"
  "k\030\007 \001(\t\"L\n\016TIDLYoloParams\022\r\n\005input\030\001 \002(\t"
  "\022\024\n\014anchor_width\030\002 \003(\002\022\025\n\ranchor_height\030"
  "\003 \003(\002\"f\n\030RetinaNetAnchorParameter\022\024\n\014asp"
  "ect_ratio\030\001 \003(\002\022\031\n\021octave_base_scale\030\002 \002"
  "(\002\022\031\n\021scales_per_octave\030\003 \002(\r\"\366\003\n\017TidlMa"
  "RetinaNet\022\021\n\tbox_input\030\001 \003(\t\022\023\n\013class_in"
  "put\030\002 \003(\t\022\016\n\006output\030\003 \003(\t\022\014\n\004name\030\004 \001(\t\022"
  "\020\n\010in_width\030\005 \002(\r\022\021\n\tin_height\030\006 \002(\r\022\032\n\017"
  "anchorbox_order\030\020 \001(\r:\0010\022\023\n\007x_scale\030\007 \001("
  "\002:\00210\022\023\n\007y_scale\030\010 \001(\002:\00210\022\023\n\010x_offset\030\016"
  " \001(\002:\0010\022\023\n\010y_offset\030\017 \001(\002:\0010\022\026\n\013width_sc"
  "ale\030\t \001(\002:\0015\022\027\n\014height_scale\030\n \001(\002:\0015\022D\n"
  "\017score_converter\030\013 \001(\0162\".tidl_meta_arch."
  "TIDLScoreConverter:\007SOFTMAX\022>\n\014anchor_pa"
  "ram\030\014 \002(\0132(.tidl_meta_arch.RetinaNetAnch"
  "orParameter\022>\n\026detection_output_param\030\r "
  "\002(\0132\036.tidl_meta_arch.TIDLOdPostProc\022\021\n\tf"
  "ramework\030\021 \001(\t\"\260\004\n\nTidlMa3DOD\022\021\n\tbox_inp"
  "ut\030\001 \003(\t\022\023\n\013class_input\030\002 \003(\t\022\021\n\tdir_inp"
  "ut\030\003 \003(\t\022\016\n\006output\030\004 \003(\t\022\014\n\004name\030\005 \001(\t\022\r"
  "\n\005min_x\030\006 \002(\002\022\r\n\005max_x\030\007 \002(\002\022\r\n\005min_y\030\010 "
  "\002(\002\022\r\n\005max_y\030\t \002(\002\022\r\n\005min_z\030\n \002(\002\022\r\n\005max"
  "_z\030\013 \002(\002\022\024\n\014voxel_size_x\030\014 \002(\002\022\024\n\014voxel_"
  "size_y\030\r \002(\002\022\024\n\014voxel_size_z\030\016 \002(\002\022\034\n\024ma"
  "x_points_per_voxel\030\017 \002(\r\022D\n\017score_conver"
  "ter\030\020 \001(\0162\".tidl_meta_arch.TIDLScoreConv"
  "erter:\007SIGMOID\022C\n\024prior_box_3dod_param\030\021"
  " \003(\0132%.tidl_meta_arch.PriorBox3DODParame"
  "ter\022>\n\026detection_output_param\030\022 \001(\0132\036.ti"
  "dl_meta_arch.TIDLOdPostProc\022D\n\013data_layo"
  "ut\030\023 \001(\0162$.tidl_meta_arch.TIDLAnchorData"
  "Layout:\tSEPARATED\"W\n\031TIDLCameraIntrinsic"
  "Params\022\r\n\002fx\030\001 \001(\002:\0011\022\r\n\002fy\030\002 \001(\002:\0011\022\r\n\002"
  "px\030\003 \001(\002:\0010\022\r\n\002py\030\004 \001(\002:\0010*\253\001\n\017TIDLBoxCo"
  "deType\022\n\n\006CORNER\020\001\022\017\n\013CENTER_SIZE\020\002\022\017\n\013C"
  "ORNER_SIZE\020\003\022\023\n\017CENTER_SIZE_EXP\020\004\022\024\n\020CEN"
  "TER_SIZE_YXHW\020\005\022\025\n\021CODE_TYPE_YOLO_V5\020\006\022\024"
  "\n\020CODE_TYPE_YOLO_X\020\007\022\022\n\016CODE_TYPE_3DOD\020\010"
  "*<\n\022TIDLScoreConverter\022\014\n\010IDENTITY\020\000\022\013\n\007"
  "SIGMOID\020\001\022\013\n\007SOFTMAX\020\002*6\n\024TIDLAnchorData"
  "Layout\022\r\n\tSEPARATED\020\000\022\017\n\013INTERLEAVED\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tidl_5fmeta_5farch_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tidl_5fmeta_5farch_2eproto_sccs[16] = {
  &scc_info_PriorBox3DODParameter_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_PriorBoxParameter_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_RetinaNetAnchorParameter_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TIDLCameraIntrinsicParams_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TIDLMetaArch_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TIDLNmsParam_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TIDLOdSaveParams_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TIDLYoloParams_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TidlMa3DOD_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TidlMaCaffeSsd_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TidlMaFasterRcnn_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TidlMaRetinaNet_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TidlMaSsd_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TidlMaTfOdApiSsd_tidl_5fmeta_5farch_2eproto.base,
  &scc_info_TidlYoloOd_tidl_5fmeta_5farch_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tidl_5fmeta_5farch_2eproto_once;
static bool descriptor_table_tidl_5fmeta_5farch_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tidl_5fmeta_5farch_2eproto = {
  &descriptor_table_tidl_5fmeta_5farch_2eproto_initialized, descriptor_table_protodef_tidl_5fmeta_5farch_2eproto, "tidl_meta_arch.proto", 4558,
  &descriptor_table_tidl_5fmeta_5farch_2eproto_once, descriptor_table_tidl_5fmeta_5farch_2eproto_sccs, descriptor_table_tidl_5fmeta_5farch_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_tidl_5fmeta_5farch_2eproto::offsets,
  file_level_metadata_tidl_5fmeta_5farch_2eproto, 16, file_level_enum_descriptors_tidl_5fmeta_5farch_2eproto, file_level_service_descriptors_tidl_5fmeta_5farch_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tidl_5fmeta_5farch_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tidl_5fmeta_5farch_2eproto), true);
namespace tidl_meta_arch {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TIDLBoxCodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tidl_5fmeta_5farch_2eproto);
  return file_level_enum_descriptors_tidl_5fmeta_5farch_2eproto[0];
}
bool TIDLBoxCodeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TIDLScoreConverter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tidl_5fmeta_5farch_2eproto);
  return file_level_enum_descriptors_tidl_5fmeta_5farch_2eproto[1];
}
bool TIDLScoreConverter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TIDLAnchorDataLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tidl_5fmeta_5farch_2eproto);
  return file_level_enum_descriptors_tidl_5fmeta_5farch_2eproto[2];
}
bool TIDLAnchorDataLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TIDLMetaArch::InitAsDefaultInstance() {
}
class TIDLMetaArch::_Internal {
 public:
  using HasBits = decltype(std::declval<TIDLMetaArch>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TIDLMetaArch::TIDLMetaArch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TIDLMetaArch)
}
TIDLMetaArch::TIDLMetaArch(const TIDLMetaArch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      caffe_ssd_(from.caffe_ssd_),
      tf_od_api_ssd_(from.tf_od_api_ssd_),
      tidl_ssd_(from.tidl_ssd_),
      tidl_faster_rcnn_(from.tidl_faster_rcnn_),
      tidl_yolo_(from.tidl_yolo_),
      tidl_retinanet_(from.tidl_retinanet_),
      tidl_3dod_(from.tidl_3dod_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TIDLMetaArch)
}

void TIDLMetaArch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TIDLMetaArch_tidl_5fmeta_5farch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TIDLMetaArch::~TIDLMetaArch() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TIDLMetaArch)
  SharedDtor();
}

void TIDLMetaArch::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TIDLMetaArch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TIDLMetaArch& TIDLMetaArch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TIDLMetaArch_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TIDLMetaArch::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TIDLMetaArch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caffe_ssd_.Clear();
  tf_od_api_ssd_.Clear();
  tidl_ssd_.Clear();
  tidl_faster_rcnn_.Clear();
  tidl_yolo_.Clear();
  tidl_retinanet_.Clear();
  tidl_3dod_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TIDLMetaArch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLMetaArch.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.TidlMaCaffeSsd caffe_ssd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_caffe_ssd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.TidlMaTfOdApiSsd tf_od_api_ssd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tf_od_api_ssd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.TidlMaSsd tidl_ssd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tidl_ssd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.TidlMaFasterRcnn tidl_faster_rcnn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tidl_faster_rcnn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.TidlYoloOd tidl_yolo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tidl_yolo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.TidlMaRetinaNet tidl_retinanet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tidl_retinanet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.TidlMa3DOD tidl_3dod = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tidl_3dod(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TIDLMetaArch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TIDLMetaArch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLMetaArch.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .tidl_meta_arch.TidlMaCaffeSsd caffe_ssd = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_caffe_ssd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_caffe_ssd(i), target, stream);
  }

  // repeated .tidl_meta_arch.TidlMaTfOdApiSsd tf_od_api_ssd = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tf_od_api_ssd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tf_od_api_ssd(i), target, stream);
  }

  // repeated .tidl_meta_arch.TidlMaSsd tidl_ssd = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tidl_ssd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tidl_ssd(i), target, stream);
  }

  // repeated .tidl_meta_arch.TidlMaFasterRcnn tidl_faster_rcnn = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tidl_faster_rcnn_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_tidl_faster_rcnn(i), target, stream);
  }

  // repeated .tidl_meta_arch.TidlYoloOd tidl_yolo = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tidl_yolo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tidl_yolo(i), target, stream);
  }

  // repeated .tidl_meta_arch.TidlMaRetinaNet tidl_retinanet = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tidl_retinanet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tidl_retinanet(i), target, stream);
  }

  // repeated .tidl_meta_arch.TidlMa3DOD tidl_3dod = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tidl_3dod_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_tidl_3dod(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TIDLMetaArch)
  return target;
}

size_t TIDLMetaArch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TIDLMetaArch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tidl_meta_arch.TidlMaCaffeSsd caffe_ssd = 2;
  total_size += 1UL * this->_internal_caffe_ssd_size();
  for (const auto& msg : this->caffe_ssd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tidl_meta_arch.TidlMaTfOdApiSsd tf_od_api_ssd = 3;
  total_size += 1UL * this->_internal_tf_od_api_ssd_size();
  for (const auto& msg : this->tf_od_api_ssd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tidl_meta_arch.TidlMaSsd tidl_ssd = 4;
  total_size += 1UL * this->_internal_tidl_ssd_size();
  for (const auto& msg : this->tidl_ssd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tidl_meta_arch.TidlMaFasterRcnn tidl_faster_rcnn = 5;
  total_size += 1UL * this->_internal_tidl_faster_rcnn_size();
  for (const auto& msg : this->tidl_faster_rcnn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tidl_meta_arch.TidlYoloOd tidl_yolo = 6;
  total_size += 1UL * this->_internal_tidl_yolo_size();
  for (const auto& msg : this->tidl_yolo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tidl_meta_arch.TidlMaRetinaNet tidl_retinanet = 7;
  total_size += 1UL * this->_internal_tidl_retinanet_size();
  for (const auto& msg : this->tidl_retinanet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tidl_meta_arch.TidlMa3DOD tidl_3dod = 8;
  total_size += 1UL * this->_internal_tidl_3dod_size();
  for (const auto& msg : this->tidl_3dod_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TIDLMetaArch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TIDLMetaArch)
  GOOGLE_DCHECK_NE(&from, this);
  const TIDLMetaArch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TIDLMetaArch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TIDLMetaArch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TIDLMetaArch)
    MergeFrom(*source);
  }
}

void TIDLMetaArch::MergeFrom(const TIDLMetaArch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TIDLMetaArch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  caffe_ssd_.MergeFrom(from.caffe_ssd_);
  tf_od_api_ssd_.MergeFrom(from.tf_od_api_ssd_);
  tidl_ssd_.MergeFrom(from.tidl_ssd_);
  tidl_faster_rcnn_.MergeFrom(from.tidl_faster_rcnn_);
  tidl_yolo_.MergeFrom(from.tidl_yolo_);
  tidl_retinanet_.MergeFrom(from.tidl_retinanet_);
  tidl_3dod_.MergeFrom(from.tidl_3dod_);
  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TIDLMetaArch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TIDLMetaArch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIDLMetaArch::CopyFrom(const TIDLMetaArch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TIDLMetaArch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIDLMetaArch::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tidl_yolo_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tidl_retinanet_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tidl_3dod_)) return false;
  return true;
}

void TIDLMetaArch::InternalSwap(TIDLMetaArch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caffe_ssd_.InternalSwap(&other->caffe_ssd_);
  tf_od_api_ssd_.InternalSwap(&other->tf_od_api_ssd_);
  tidl_ssd_.InternalSwap(&other->tidl_ssd_);
  tidl_faster_rcnn_.InternalSwap(&other->tidl_faster_rcnn_);
  tidl_yolo_.InternalSwap(&other->tidl_yolo_);
  tidl_retinanet_.InternalSwap(&other->tidl_retinanet_);
  tidl_3dod_.InternalSwap(&other->tidl_3dod_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TIDLMetaArch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TIDLNmsParam::InitAsDefaultInstance() {
}
class TIDLNmsParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TIDLNmsParam>()._has_bits_);
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_k_all_class(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TIDLNmsParam::TIDLNmsParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TIDLNmsParam)
}
TIDLNmsParam::TIDLNmsParam(const TIDLNmsParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_k_, &from.top_k_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_k_all_class_) -
    reinterpret_cast<char*>(&top_k_)) + sizeof(top_k_all_class_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TIDLNmsParam)
}

void TIDLNmsParam::SharedCtor() {
  top_k_ = 0;
  eta_ = 1;
  nms_threshold_ = 0.3f;
  top_k_all_class_ = -1;
}

TIDLNmsParam::~TIDLNmsParam() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TIDLNmsParam)
  SharedDtor();
}

void TIDLNmsParam::SharedDtor() {
}

void TIDLNmsParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TIDLNmsParam& TIDLNmsParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TIDLNmsParam_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TIDLNmsParam::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TIDLNmsParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    top_k_ = 0;
    eta_ = 1;
    nms_threshold_ = 0.3f;
    top_k_all_class_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TIDLNmsParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float nms_threshold = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k_all_class = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_top_k_all_class(&has_bits);
          top_k_all_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float eta = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_eta(&has_bits);
          eta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TIDLNmsParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TIDLNmsParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float nms_threshold = 1 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_nms_threshold(), target);
  }

  // optional int32 top_k = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_top_k(), target);
  }

  // optional int32 top_k_all_class = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_top_k_all_class(), target);
  }

  // optional float eta = 4 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_eta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TIDLNmsParam)
  return target;
}

size_t TIDLNmsParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TIDLNmsParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 top_k = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_top_k());
    }

    // optional float eta = 4 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float nms_threshold = 1 [default = 0.3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 top_k_all_class = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_top_k_all_class());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TIDLNmsParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TIDLNmsParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TIDLNmsParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TIDLNmsParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TIDLNmsParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TIDLNmsParam)
    MergeFrom(*source);
  }
}

void TIDLNmsParam::MergeFrom(const TIDLNmsParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TIDLNmsParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000002u) {
      eta_ = from.eta_;
    }
    if (cached_has_bits & 0x00000004u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      top_k_all_class_ = from.top_k_all_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TIDLNmsParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TIDLNmsParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIDLNmsParam::CopyFrom(const TIDLNmsParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TIDLNmsParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIDLNmsParam::IsInitialized() const {
  return true;
}

void TIDLNmsParam::InternalSwap(TIDLNmsParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(top_k_, other->top_k_);
  swap(eta_, other->eta_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(top_k_all_class_, other->top_k_all_class_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TIDLNmsParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriorBoxParameter::InitAsDefaultInstance() {
}
class PriorBoxParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PriorBoxParameter>()._has_bits_);
  static void set_has_flip(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_img_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_img_h(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_img_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_step_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_step_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_keypoint(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PriorBoxParameter::PriorBoxParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.PriorBoxParameter)
}
PriorBoxParameter::PriorBoxParameter(const PriorBoxParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      min_size_(from.min_size_),
      max_size_(from.max_size_),
      aspect_ratio_(from.aspect_ratio_),
      variance_(from.variance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clip_, &from.clip_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&clip_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.PriorBoxParameter)
}

void PriorBoxParameter::SharedCtor() {
  ::memset(&clip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_keypoint_) -
      reinterpret_cast<char*>(&clip_)) + sizeof(num_keypoint_));
  flip_ = true;
  offset_ = 0.5f;
}

PriorBoxParameter::~PriorBoxParameter() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.PriorBoxParameter)
  SharedDtor();
}

void PriorBoxParameter::SharedDtor() {
}

void PriorBoxParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriorBoxParameter& PriorBoxParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriorBoxParameter_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void PriorBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.PriorBoxParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_size_.Clear();
  max_size_.Clear();
  aspect_ratio_.Clear();
  variance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&clip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_keypoint_) -
        reinterpret_cast<char*>(&clip_)) + sizeof(num_keypoint_));
  }
  if (cached_has_bits & 0x00000300u) {
    flip_ = true;
    offset_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PriorBoxParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float min_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float aspect_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aspect_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_aspect_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flip = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_flip(&has_bits);
          flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clip = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clip(&has_bits);
          clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float variance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_variance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_variance(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_img_size(&has_bits);
          img_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_img_h(&has_bits);
          img_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_w = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_img_w(&has_bits);
          img_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float step = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float step_h = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_step_h(&has_bits);
          step_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float step_w = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_step_w(&has_bits);
          step_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float offset = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_keypoint = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_num_keypoint(&has_bits);
          num_keypoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriorBoxParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.PriorBoxParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float min_size = 1;
  for (int i = 0, n = this->_internal_min_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_size(i), target);
  }

  // repeated float max_size = 2;
  for (int i = 0, n = this->_internal_max_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_size(i), target);
  }

  // repeated float aspect_ratio = 3;
  for (int i = 0, n = this->_internal_aspect_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_aspect_ratio(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool flip = 4 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_flip(), target);
  }

  // optional bool clip = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_clip(), target);
  }

  // repeated float variance = 6;
  for (int i = 0, n = this->_internal_variance_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_variance(i), target);
  }

  // optional uint32 img_size = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_img_size(), target);
  }

  // optional uint32 img_h = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_img_h(), target);
  }

  // optional uint32 img_w = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_img_w(), target);
  }

  // optional float step = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_step(), target);
  }

  // optional float step_h = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_step_h(), target);
  }

  // optional float step_w = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_step_w(), target);
  }

  // optional float offset = 13 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_offset(), target);
  }

  // optional uint32 num_keypoint = 14 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_num_keypoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.PriorBoxParameter)
  return target;
}

size_t PriorBoxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.PriorBoxParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float min_size = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_min_size_size());
    total_size += data_size;
  }

  // repeated float max_size = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_size_size());
    total_size += data_size;
  }

  // repeated float aspect_ratio = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aspect_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aspect_ratio_size());
    total_size += data_size;
  }

  // repeated float variance = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_variance_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variance_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool clip = 5 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 img_size = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_img_size());
    }

    // optional uint32 img_h = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_img_h());
    }

    // optional uint32 img_w = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_img_w());
    }

    // optional float step = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float step_h = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float step_w = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_keypoint = 14 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_keypoint());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool flip = 4 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float offset = 13 [default = 0.5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriorBoxParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.PriorBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PriorBoxParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriorBoxParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.PriorBoxParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.PriorBoxParameter)
    MergeFrom(*source);
  }
}

void PriorBoxParameter::MergeFrom(const PriorBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.PriorBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_size_.MergeFrom(from.min_size_);
  max_size_.MergeFrom(from.max_size_);
  aspect_ratio_.MergeFrom(from.aspect_ratio_);
  variance_.MergeFrom(from.variance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      clip_ = from.clip_;
    }
    if (cached_has_bits & 0x00000002u) {
      img_size_ = from.img_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      img_h_ = from.img_h_;
    }
    if (cached_has_bits & 0x00000008u) {
      img_w_ = from.img_w_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_h_ = from.step_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      step_w_ = from.step_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_keypoint_ = from.num_keypoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      flip_ = from.flip_;
    }
    if (cached_has_bits & 0x00000200u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PriorBoxParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.PriorBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriorBoxParameter::CopyFrom(const PriorBoxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.PriorBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriorBoxParameter::IsInitialized() const {
  return true;
}

void PriorBoxParameter::InternalSwap(PriorBoxParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  min_size_.InternalSwap(&other->min_size_);
  max_size_.InternalSwap(&other->max_size_);
  aspect_ratio_.InternalSwap(&other->aspect_ratio_);
  variance_.InternalSwap(&other->variance_);
  swap(clip_, other->clip_);
  swap(img_size_, other->img_size_);
  swap(img_h_, other->img_h_);
  swap(img_w_, other->img_w_);
  swap(step_, other->step_);
  swap(step_h_, other->step_h_);
  swap(step_w_, other->step_w_);
  swap(num_keypoint_, other->num_keypoint_);
  swap(flip_, other->flip_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriorBoxParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriorBox3DODParameter::InitAsDefaultInstance() {
}
class PriorBox3DODParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PriorBox3DODParameter>()._has_bits_);
  static void set_has_step_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_step_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_offset_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_offset_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PriorBox3DODParameter::PriorBox3DODParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.PriorBox3DODParameter)
}
PriorBox3DODParameter::PriorBox3DODParameter(const PriorBox3DODParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      anchor_width_(from.anchor_width_),
      anchor_height_(from.anchor_height_),
      anchor_length_(from.anchor_length_),
      rotation_(from.rotation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&step_x_, &from.step_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_dir_) -
    reinterpret_cast<char*>(&step_x_)) + sizeof(offset_dir_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.PriorBox3DODParameter)
}

void PriorBox3DODParameter::SharedCtor() {
  ::memset(&step_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_dir_) -
      reinterpret_cast<char*>(&step_x_)) + sizeof(offset_dir_));
}

PriorBox3DODParameter::~PriorBox3DODParameter() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.PriorBox3DODParameter)
  SharedDtor();
}

void PriorBox3DODParameter::SharedDtor() {
}

void PriorBox3DODParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriorBox3DODParameter& PriorBox3DODParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriorBox3DODParameter_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void PriorBox3DODParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.PriorBox3DODParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchor_width_.Clear();
  anchor_height_.Clear();
  anchor_length_.Clear();
  rotation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&step_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_dir_) -
        reinterpret_cast<char*>(&step_x_)) + sizeof(offset_dir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PriorBox3DODParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float anchor_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_anchor_width(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_anchor_width(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float anchor_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_anchor_height(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_anchor_height(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float anchor_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_anchor_length(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_anchor_length(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float step_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_step_x(&has_bits);
          step_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float step_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_step_y(&has_bits);
          step_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float step_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_step_z(&has_bits);
          step_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float offset_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_offset_x(&has_bits);
          offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float offset_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_offset_y(&has_bits);
          offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float offset_z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_offset_z(&has_bits);
          offset_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float offset_dir = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_offset_dir(&has_bits);
          offset_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rotation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rotation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriorBox3DODParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.PriorBox3DODParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float anchor_width = 1;
  for (int i = 0, n = this->_internal_anchor_width_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_anchor_width(i), target);
  }

  // repeated float anchor_height = 2;
  for (int i = 0, n = this->_internal_anchor_height_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_anchor_height(i), target);
  }

  // repeated float anchor_length = 3;
  for (int i = 0, n = this->_internal_anchor_length_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_anchor_length(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required float step_x = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_step_x(), target);
  }

  // required float step_y = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_step_y(), target);
  }

  // required float step_z = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_step_z(), target);
  }

  // required float offset_x = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_offset_x(), target);
  }

  // required float offset_y = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_offset_y(), target);
  }

  // required float offset_z = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_offset_z(), target);
  }

  // required float offset_dir = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_offset_dir(), target);
  }

  // repeated float rotation = 11;
  for (int i = 0, n = this->_internal_rotation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_rotation(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.PriorBox3DODParameter)
  return target;
}

size_t PriorBox3DODParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tidl_meta_arch.PriorBox3DODParameter)
  size_t total_size = 0;

  if (_internal_has_step_x()) {
    // required float step_x = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_step_y()) {
    // required float step_y = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_step_z()) {
    // required float step_z = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_offset_x()) {
    // required float offset_x = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_offset_y()) {
    // required float offset_y = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_offset_z()) {
    // required float offset_z = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_offset_dir()) {
    // required float offset_dir = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PriorBox3DODParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.PriorBox3DODParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required float step_x = 4;
    total_size += 1 + 4;

    // required float step_y = 5;
    total_size += 1 + 4;

    // required float step_z = 6;
    total_size += 1 + 4;

    // required float offset_x = 7;
    total_size += 1 + 4;

    // required float offset_y = 8;
    total_size += 1 + 4;

    // required float offset_z = 9;
    total_size += 1 + 4;

    // required float offset_dir = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float anchor_width = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anchor_width_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_anchor_width_size());
    total_size += data_size;
  }

  // repeated float anchor_height = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anchor_height_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_anchor_height_size());
    total_size += data_size;
  }

  // repeated float anchor_length = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anchor_length_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_anchor_length_size());
    total_size += data_size;
  }

  // repeated float rotation = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotation_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rotation_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriorBox3DODParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.PriorBox3DODParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PriorBox3DODParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriorBox3DODParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.PriorBox3DODParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.PriorBox3DODParameter)
    MergeFrom(*source);
  }
}

void PriorBox3DODParameter::MergeFrom(const PriorBox3DODParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.PriorBox3DODParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchor_width_.MergeFrom(from.anchor_width_);
  anchor_height_.MergeFrom(from.anchor_height_);
  anchor_length_.MergeFrom(from.anchor_length_);
  rotation_.MergeFrom(from.rotation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      step_x_ = from.step_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      step_y_ = from.step_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      step_z_ = from.step_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_x_ = from.offset_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_y_ = from.offset_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      offset_z_ = from.offset_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      offset_dir_ = from.offset_dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PriorBox3DODParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.PriorBox3DODParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriorBox3DODParameter::CopyFrom(const PriorBox3DODParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.PriorBox3DODParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriorBox3DODParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void PriorBox3DODParameter::InternalSwap(PriorBox3DODParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  anchor_width_.InternalSwap(&other->anchor_width_);
  anchor_height_.InternalSwap(&other->anchor_height_);
  anchor_length_.InternalSwap(&other->anchor_length_);
  rotation_.InternalSwap(&other->rotation_);
  swap(step_x_, other->step_x_);
  swap(step_y_, other->step_y_);
  swap(step_z_, other->step_z_);
  swap(offset_x_, other->offset_x_);
  swap(offset_y_, other->offset_y_);
  swap(offset_z_, other->offset_z_);
  swap(offset_dir_, other->offset_dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriorBox3DODParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TIDLOdSaveParams::InitAsDefaultInstance() {
}
class TIDLOdSaveParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TIDLOdSaveParams>()._has_bits_);
  static void set_has_output_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_name_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_label_map_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name_size_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_test_image(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_resize_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TIDLOdSaveParams::TIDLOdSaveParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TIDLOdSaveParams)
}
TIDLOdSaveParams::TIDLOdSaveParams(const TIDLOdSaveParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_directory()) {
    output_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_directory_);
  }
  output_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_name_prefix()) {
    output_name_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_name_prefix_);
  }
  output_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_format()) {
    output_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_format_);
  }
  label_map_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label_map_file()) {
    label_map_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_map_file_);
  }
  name_size_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_size_file()) {
    name_size_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_size_file_);
  }
  resize_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resize_param()) {
    resize_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resize_param_);
  }
  num_test_image_ = from.num_test_image_;
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TIDLOdSaveParams)
}

void TIDLOdSaveParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TIDLOdSaveParams_tidl_5fmeta_5farch_2eproto.base);
  output_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_map_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_size_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resize_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_test_image_ = 0u;
}

TIDLOdSaveParams::~TIDLOdSaveParams() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TIDLOdSaveParams)
  SharedDtor();
}

void TIDLOdSaveParams::SharedDtor() {
  output_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_name_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_map_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_size_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resize_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TIDLOdSaveParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TIDLOdSaveParams& TIDLOdSaveParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TIDLOdSaveParams_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TIDLOdSaveParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TIDLOdSaveParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      output_directory_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      output_name_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      output_format_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      label_map_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      name_size_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      resize_param_.ClearNonDefaultToEmptyNoArena();
    }
  }
  num_test_image_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TIDLOdSaveParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string output_directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_output_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLOdSaveParams.output_directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_name_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_name_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLOdSaveParams.output_name_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_output_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLOdSaveParams.output_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label_map_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_label_map_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLOdSaveParams.label_map_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_size_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name_size_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLOdSaveParams.name_size_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_test_image = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_test_image(&has_bits);
          num_test_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string resize_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_resize_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLOdSaveParams.resize_param");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TIDLOdSaveParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TIDLOdSaveParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string output_directory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_directory().data(), static_cast<int>(this->_internal_output_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLOdSaveParams.output_directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_directory(), target);
  }

  // optional string output_name_prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_name_prefix().data(), static_cast<int>(this->_internal_output_name_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLOdSaveParams.output_name_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_name_prefix(), target);
  }

  // optional string output_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_format().data(), static_cast<int>(this->_internal_output_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLOdSaveParams.output_format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_output_format(), target);
  }

  // optional string label_map_file = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label_map_file().data(), static_cast<int>(this->_internal_label_map_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLOdSaveParams.label_map_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label_map_file(), target);
  }

  // optional string name_size_file = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_size_file().data(), static_cast<int>(this->_internal_name_size_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLOdSaveParams.name_size_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_size_file(), target);
  }

  // optional uint32 num_test_image = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_test_image(), target);
  }

  // optional string resize_param = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resize_param().data(), static_cast<int>(this->_internal_resize_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLOdSaveParams.resize_param");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_resize_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TIDLOdSaveParams)
  return target;
}

size_t TIDLOdSaveParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TIDLOdSaveParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string output_directory = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_directory());
    }

    // optional string output_name_prefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_name_prefix());
    }

    // optional string output_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_format());
    }

    // optional string label_map_file = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label_map_file());
    }

    // optional string name_size_file = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_size_file());
    }

    // optional string resize_param = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resize_param());
    }

    // optional uint32 num_test_image = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_test_image());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TIDLOdSaveParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TIDLOdSaveParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TIDLOdSaveParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TIDLOdSaveParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TIDLOdSaveParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TIDLOdSaveParams)
    MergeFrom(*source);
  }
}

void TIDLOdSaveParams::MergeFrom(const TIDLOdSaveParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TIDLOdSaveParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      output_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_directory_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      output_name_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_name_prefix_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      output_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_format_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      label_map_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_map_file_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      name_size_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_size_file_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      resize_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resize_param_);
    }
    if (cached_has_bits & 0x00000040u) {
      num_test_image_ = from.num_test_image_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TIDLOdSaveParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TIDLOdSaveParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIDLOdSaveParams::CopyFrom(const TIDLOdSaveParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TIDLOdSaveParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIDLOdSaveParams::IsInitialized() const {
  return true;
}

void TIDLOdSaveParams::InternalSwap(TIDLOdSaveParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  output_directory_.Swap(&other->output_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_name_prefix_.Swap(&other->output_name_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_format_.Swap(&other->output_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_map_file_.Swap(&other->label_map_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_size_file_.Swap(&other->name_size_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resize_param_.Swap(&other->resize_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_test_image_, other->num_test_image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TIDLOdSaveParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TIDLOdPostProc::InitAsDefaultInstance() {
  ::tidl_meta_arch::_TIDLOdPostProc_default_instance_._instance.get_mutable()->nms_param_ = const_cast< ::tidl_meta_arch::TIDLNmsParam*>(
      ::tidl_meta_arch::TIDLNmsParam::internal_default_instance());
  ::tidl_meta_arch::_TIDLOdPostProc_default_instance_._instance.get_mutable()->save_output_param_ = const_cast< ::tidl_meta_arch::TIDLOdSaveParams*>(
      ::tidl_meta_arch::TIDLOdSaveParams::internal_default_instance());
  ::tidl_meta_arch::_TIDLOdPostProc_default_instance_._instance.get_mutable()->camera_intrinsic_params_ = const_cast< ::tidl_meta_arch::TIDLCameraIntrinsicParams*>(
      ::tidl_meta_arch::TIDLCameraIntrinsicParams::internal_default_instance());
}
class TIDLOdPostProc::_Internal {
 public:
  using HasBits = decltype(std::declval<TIDLOdPostProc>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_share_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_background_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::tidl_meta_arch::TIDLNmsParam& nms_param(const TIDLOdPostProc* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tidl_meta_arch::TIDLOdSaveParams& save_output_param(const TIDLOdPostProc* msg);
  static void set_has_save_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_variance_encoded_in_target(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_visualize(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_visualize_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_save_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_keypoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_keypoint_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sub_code_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::tidl_meta_arch::TIDLCameraIntrinsicParams& camera_intrinsic_params(const TIDLOdPostProc* msg);
  static void set_has_camera_intrinsic_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::tidl_meta_arch::TIDLNmsParam&
TIDLOdPostProc::_Internal::nms_param(const TIDLOdPostProc* msg) {
  return *msg->nms_param_;
}
const ::tidl_meta_arch::TIDLOdSaveParams&
TIDLOdPostProc::_Internal::save_output_param(const TIDLOdPostProc* msg) {
  return *msg->save_output_param_;
}
const ::tidl_meta_arch::TIDLCameraIntrinsicParams&
TIDLOdPostProc::_Internal::camera_intrinsic_params(const TIDLOdPostProc* msg) {
  return *msg->camera_intrinsic_params_;
}
TIDLOdPostProc::TIDLOdPostProc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TIDLOdPostProc)
}
TIDLOdPostProc::TIDLOdPostProc(const TIDLOdPostProc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_save_file()) {
    save_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_file_);
  }
  if (from._internal_has_nms_param()) {
    nms_param_ = new ::tidl_meta_arch::TIDLNmsParam(*from.nms_param_);
  } else {
    nms_param_ = nullptr;
  }
  if (from._internal_has_save_output_param()) {
    save_output_param_ = new ::tidl_meta_arch::TIDLOdSaveParams(*from.save_output_param_);
  } else {
    save_output_param_ = nullptr;
  }
  if (from._internal_has_camera_intrinsic_params()) {
    camera_intrinsic_params_ = new ::tidl_meta_arch::TIDLCameraIntrinsicParams(*from.camera_intrinsic_params_);
  } else {
    camera_intrinsic_params_ = nullptr;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_type_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(code_type_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TIDLOdPostProc)
}

void TIDLOdPostProc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto.base);
  save_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nms_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_code_type_) -
      reinterpret_cast<char*>(&nms_param_)) + sizeof(sub_code_type_));
  keep_top_k_ = -1;
  share_location_ = true;
  code_type_ = 1;
}

TIDLOdPostProc::~TIDLOdPostProc() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TIDLOdPostProc)
  SharedDtor();
}

void TIDLOdPostProc::SharedDtor() {
  save_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nms_param_;
  if (this != internal_default_instance()) delete save_output_param_;
  if (this != internal_default_instance()) delete camera_intrinsic_params_;
}

void TIDLOdPostProc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TIDLOdPostProc& TIDLOdPostProc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TIDLOdPostProc_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TIDLOdPostProc::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TIDLOdPostProc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      save_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nms_param_ != nullptr);
      nms_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(save_output_param_ != nullptr);
      save_output_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(camera_intrinsic_params_ != nullptr);
      camera_intrinsic_params_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&variance_encoded_in_target_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(variance_encoded_in_target_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&visualize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_code_type_) -
        reinterpret_cast<char*>(&visualize_)) + sizeof(sub_code_type_));
    keep_top_k_ = -1;
    share_location_ = true;
    code_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TIDLOdPostProc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool share_location = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_share_location(&has_bits);
          share_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 background_label_id = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_background_label_id(&has_bits);
          background_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLNmsParam nms_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLOdSaveParams save_output_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLBoxCodeType code_type = 6 [default = CORNER];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tidl_meta_arch::TIDLBoxCodeType_IsValid(val))) {
            _internal_set_code_type(static_cast<::tidl_meta_arch::TIDLBoxCodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool variance_encoded_in_target = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_variance_encoded_in_target(&has_bits);
          variance_encoded_in_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence_threshold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_confidence_threshold(&has_bits);
          confidence_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool visualize = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_visualize(&has_bits);
          visualize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float visualize_threshold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_visualize_threshold(&has_bits);
          visualize_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string save_file = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_save_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLOdPostProc.save_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_keypoint = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_num_keypoint(&has_bits);
          num_keypoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keypoint_confidence = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_keypoint_confidence(&has_bits);
          keypoint_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sub_code_type = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_sub_code_type(&has_bits);
          sub_code_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLCameraIntrinsicParams camera_intrinsic_params = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_intrinsic_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TIDLOdPostProc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TIDLOdPostProc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional bool share_location = 2 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_share_location(), target);
  }

  // optional int32 background_label_id = 3 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_background_label_id(), target);
  }

  // optional .tidl_meta_arch.TIDLNmsParam nms_param = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nms_param(this), target, stream);
  }

  // optional .tidl_meta_arch.TIDLOdSaveParams save_output_param = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::save_output_param(this), target, stream);
  }

  // optional .tidl_meta_arch.TIDLBoxCodeType code_type = 6 [default = CORNER];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_code_type(), target);
  }

  // optional int32 keep_top_k = 7 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_keep_top_k(), target);
  }

  // optional bool variance_encoded_in_target = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_variance_encoded_in_target(), target);
  }

  // optional float confidence_threshold = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_confidence_threshold(), target);
  }

  // optional bool visualize = 10 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_visualize(), target);
  }

  // optional float visualize_threshold = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_visualize_threshold(), target);
  }

  // optional string save_file = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_save_file().data(), static_cast<int>(this->_internal_save_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLOdPostProc.save_file");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_save_file(), target);
  }

  // optional uint32 num_keypoint = 13 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_num_keypoint(), target);
  }

  // optional bool keypoint_confidence = 14 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_keypoint_confidence(), target);
  }

  // optional uint32 sub_code_type = 15 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_sub_code_type(), target);
  }

  // optional .tidl_meta_arch.TIDLCameraIntrinsicParams camera_intrinsic_params = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::camera_intrinsic_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TIDLOdPostProc)
  return target;
}

size_t TIDLOdPostProc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TIDLOdPostProc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string save_file = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_save_file());
    }

    // optional .tidl_meta_arch.TIDLNmsParam nms_param = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nms_param_);
    }

    // optional .tidl_meta_arch.TIDLOdSaveParams save_output_param = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *save_output_param_);
    }

    // optional .tidl_meta_arch.TIDLCameraIntrinsicParams camera_intrinsic_params = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_intrinsic_params_);
    }

    // optional uint32 num_classes = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_classes());
    }

    // optional int32 background_label_id = 3 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_background_label_id());
    }

    // optional float confidence_threshold = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool variance_encoded_in_target = 8 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool visualize = 10 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool keypoint_confidence = 14 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional float visualize_threshold = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_keypoint = 13 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_keypoint());
    }

    // optional uint32 sub_code_type = 15 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sub_code_type());
    }

    // optional int32 keep_top_k = 7 [default = -1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_keep_top_k());
    }

    // optional bool share_location = 2 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional .tidl_meta_arch.TIDLBoxCodeType code_type = 6 [default = CORNER];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TIDLOdPostProc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TIDLOdPostProc)
  GOOGLE_DCHECK_NE(&from, this);
  const TIDLOdPostProc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TIDLOdPostProc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TIDLOdPostProc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TIDLOdPostProc)
    MergeFrom(*source);
  }
}

void TIDLOdPostProc::MergeFrom(const TIDLOdPostProc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TIDLOdPostProc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      save_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nms_param()->::tidl_meta_arch::TIDLNmsParam::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_save_output_param()->::tidl_meta_arch::TIDLOdSaveParams::MergeFrom(from._internal_save_output_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_camera_intrinsic_params()->::tidl_meta_arch::TIDLCameraIntrinsicParams::MergeFrom(from._internal_camera_intrinsic_params());
    }
    if (cached_has_bits & 0x00000010u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000020u) {
      background_label_id_ = from.background_label_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      confidence_threshold_ = from.confidence_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      variance_encoded_in_target_ = from.variance_encoded_in_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      visualize_ = from.visualize_;
    }
    if (cached_has_bits & 0x00000200u) {
      keypoint_confidence_ = from.keypoint_confidence_;
    }
    if (cached_has_bits & 0x00000400u) {
      visualize_threshold_ = from.visualize_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_keypoint_ = from.num_keypoint_;
    }
    if (cached_has_bits & 0x00001000u) {
      sub_code_type_ = from.sub_code_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00004000u) {
      share_location_ = from.share_location_;
    }
    if (cached_has_bits & 0x00008000u) {
      code_type_ = from.code_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TIDLOdPostProc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TIDLOdPostProc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIDLOdPostProc::CopyFrom(const TIDLOdPostProc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TIDLOdPostProc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIDLOdPostProc::IsInitialized() const {
  return true;
}

void TIDLOdPostProc::InternalSwap(TIDLOdPostProc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  save_file_.Swap(&other->save_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nms_param_, other->nms_param_);
  swap(save_output_param_, other->save_output_param_);
  swap(camera_intrinsic_params_, other->camera_intrinsic_params_);
  swap(num_classes_, other->num_classes_);
  swap(background_label_id_, other->background_label_id_);
  swap(confidence_threshold_, other->confidence_threshold_);
  swap(variance_encoded_in_target_, other->variance_encoded_in_target_);
  swap(visualize_, other->visualize_);
  swap(keypoint_confidence_, other->keypoint_confidence_);
  swap(visualize_threshold_, other->visualize_threshold_);
  swap(num_keypoint_, other->num_keypoint_);
  swap(sub_code_type_, other->sub_code_type_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(share_location_, other->share_location_);
  swap(code_type_, other->code_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TIDLOdPostProc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TidlMaSsd::InitAsDefaultInstance() {
  ::tidl_meta_arch::_TidlMaSsd_default_instance_._instance.get_mutable()->detection_output_param_ = const_cast< ::tidl_meta_arch::TIDLOdPostProc*>(
      ::tidl_meta_arch::TIDLOdPostProc::internal_default_instance());
}
class TidlMaSsd::_Internal {
 public:
  using HasBits = decltype(std::declval<TidlMaSsd>()._has_bits_);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_in_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_score_converter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param(const TidlMaSsd* msg);
  static void set_has_detection_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::tidl_meta_arch::TIDLOdPostProc&
TidlMaSsd::_Internal::detection_output_param(const TidlMaSsd* msg) {
  return *msg->detection_output_param_;
}
TidlMaSsd::TidlMaSsd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TidlMaSsd)
}
TidlMaSsd::TidlMaSsd(const TidlMaSsd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      box_input_(from.box_input_),
      class_input_(from.class_input_),
      prior_box_param_(from.prior_box_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output()) {
    output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_detection_output_param()) {
    detection_output_param_ = new ::tidl_meta_arch::TIDLOdPostProc(*from.detection_output_param_);
  } else {
    detection_output_param_ = nullptr;
  }
  ::memcpy(&in_width_, &from.in_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_converter_) -
    reinterpret_cast<char*>(&in_width_)) + sizeof(score_converter_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TidlMaSsd)
}

void TidlMaSsd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TidlMaSsd_tidl_5fmeta_5farch_2eproto.base);
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&detection_output_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_layout_) -
      reinterpret_cast<char*>(&detection_output_param_)) + sizeof(data_layout_));
  score_converter_ = 2;
}

TidlMaSsd::~TidlMaSsd() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TidlMaSsd)
  SharedDtor();
}

void TidlMaSsd::SharedDtor() {
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detection_output_param_;
}

void TidlMaSsd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TidlMaSsd& TidlMaSsd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TidlMaSsd_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TidlMaSsd::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TidlMaSsd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_input_.Clear();
  class_input_.Clear();
  prior_box_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      output_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_output_param_ != nullptr);
      detection_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&in_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_layout_) -
        reinterpret_cast<char*>(&in_width_)) + sizeof(data_layout_));
    score_converter_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TidlMaSsd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string box_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_box_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaSsd.box_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string class_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_class_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaSsd.class_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_output();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaSsd.output");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaSsd.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 in_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_in_width(&has_bits);
          in_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 in_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_in_height(&has_bits);
          in_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tidl_meta_arch::TIDLScoreConverter_IsValid(val))) {
            _internal_set_score_converter(static_cast<::tidl_meta_arch::TIDLScoreConverter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prior_box_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tidl_meta_arch::TIDLAnchorDataLayout_IsValid(val))) {
            _internal_set_data_layout(static_cast<::tidl_meta_arch::TIDLAnchorDataLayout>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TidlMaSsd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TidlMaSsd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string box_input = 1;
  for (int i = 0, n = this->_internal_box_input_size(); i < n; i++) {
    const auto& s = this->_internal_box_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaSsd.box_input");
    target = stream->WriteString(1, s, target);
  }

  // repeated string class_input = 2;
  for (int i = 0, n = this->_internal_class_input_size(); i < n; i++) {
    const auto& s = this->_internal_class_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaSsd.class_input");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string output = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaSsd.output");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_output(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaSsd.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional uint32 in_width = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_in_width(), target);
  }

  // optional uint32 in_height = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_in_height(), target);
  }

  // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_score_converter(), target);
  }

  // repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prior_box_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_prior_box_param(i), target, stream);
  }

  // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::detection_output_param(this), target, stream);
  }

  // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_data_layout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TidlMaSsd)
  return target;
}

size_t TidlMaSsd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TidlMaSsd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string box_input = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(box_input_.size());
  for (int i = 0, n = box_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      box_input_.Get(i));
  }

  // repeated string class_input = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(class_input_.size());
  for (int i = 0, n = class_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      class_input_.Get(i));
  }

  // repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
  total_size += 1UL * this->_internal_prior_box_param_size();
  for (const auto& msg : this->prior_box_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string output = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output());
    }

    // optional string name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_output_param_);
    }

    // optional uint32 in_width = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_width());
    }

    // optional uint32 in_height = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_height());
    }

    // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_layout());
    }

    // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_score_converter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TidlMaSsd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TidlMaSsd)
  GOOGLE_DCHECK_NE(&from, this);
  const TidlMaSsd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TidlMaSsd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TidlMaSsd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TidlMaSsd)
    MergeFrom(*source);
  }
}

void TidlMaSsd::MergeFrom(const TidlMaSsd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TidlMaSsd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_input_.MergeFrom(from.box_input_);
  class_input_.MergeFrom(from.class_input_);
  prior_box_param_.MergeFrom(from.prior_box_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_detection_output_param()->::tidl_meta_arch::TIDLOdPostProc::MergeFrom(from._internal_detection_output_param());
    }
    if (cached_has_bits & 0x00000008u) {
      in_width_ = from.in_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      in_height_ = from.in_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_layout_ = from.data_layout_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_converter_ = from.score_converter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TidlMaSsd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TidlMaSsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TidlMaSsd::CopyFrom(const TidlMaSsd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TidlMaSsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TidlMaSsd::IsInitialized() const {
  return true;
}

void TidlMaSsd::InternalSwap(TidlMaSsd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  box_input_.InternalSwap(&other->box_input_);
  class_input_.InternalSwap(&other->class_input_);
  prior_box_param_.InternalSwap(&other->prior_box_param_);
  output_.Swap(&other->output_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(detection_output_param_, other->detection_output_param_);
  swap(in_width_, other->in_width_);
  swap(in_height_, other->in_height_);
  swap(data_layout_, other->data_layout_);
  swap(score_converter_, other->score_converter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TidlMaSsd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TidlMaCaffeSsd::InitAsDefaultInstance() {
  ::tidl_meta_arch::_TidlMaCaffeSsd_default_instance_._instance.get_mutable()->detection_output_param_ = const_cast< ::tidl_meta_arch::TIDLOdPostProc*>(
      ::tidl_meta_arch::TIDLOdPostProc::internal_default_instance());
}
class TidlMaCaffeSsd::_Internal {
 public:
  using HasBits = decltype(std::declval<TidlMaCaffeSsd>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_score_converter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param(const TidlMaCaffeSsd* msg);
  static void set_has_detection_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_framework(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tidl_meta_arch::TIDLOdPostProc&
TidlMaCaffeSsd::_Internal::detection_output_param(const TidlMaCaffeSsd* msg) {
  return *msg->detection_output_param_;
}
TidlMaCaffeSsd::TidlMaCaffeSsd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TidlMaCaffeSsd)
}
TidlMaCaffeSsd::TidlMaCaffeSsd(const TidlMaCaffeSsd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      box_input_(from.box_input_),
      class_input_(from.class_input_),
      output_(from.output_),
      prior_box_param_(from.prior_box_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  framework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_framework()) {
    framework_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.framework_);
  }
  if (from._internal_has_detection_output_param()) {
    detection_output_param_ = new ::tidl_meta_arch::TIDLOdPostProc(*from.detection_output_param_);
  } else {
    detection_output_param_ = nullptr;
  }
  ::memcpy(&in_width_, &from.in_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_converter_) -
    reinterpret_cast<char*>(&in_width_)) + sizeof(score_converter_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TidlMaCaffeSsd)
}

void TidlMaCaffeSsd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TidlMaCaffeSsd_tidl_5fmeta_5farch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&detection_output_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_layout_) -
      reinterpret_cast<char*>(&detection_output_param_)) + sizeof(data_layout_));
  score_converter_ = 2;
}

TidlMaCaffeSsd::~TidlMaCaffeSsd() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TidlMaCaffeSsd)
  SharedDtor();
}

void TidlMaCaffeSsd::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framework_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detection_output_param_;
}

void TidlMaCaffeSsd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TidlMaCaffeSsd& TidlMaCaffeSsd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TidlMaCaffeSsd_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TidlMaCaffeSsd::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TidlMaCaffeSsd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_input_.Clear();
  class_input_.Clear();
  output_.Clear();
  prior_box_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      framework_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_output_param_ != nullptr);
      detection_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&in_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_layout_) -
        reinterpret_cast<char*>(&in_width_)) + sizeof(data_layout_));
    score_converter_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TidlMaCaffeSsd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string box_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_box_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaCaffeSsd.box_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string class_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_class_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaCaffeSsd.class_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaCaffeSsd.output");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaCaffeSsd.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 in_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_in_width(&has_bits);
          in_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 in_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_in_height(&has_bits);
          in_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tidl_meta_arch::TIDLScoreConverter_IsValid(val))) {
            _internal_set_score_converter(static_cast<::tidl_meta_arch::TIDLScoreConverter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prior_box_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tidl_meta_arch::TIDLAnchorDataLayout_IsValid(val))) {
            _internal_set_data_layout(static_cast<::tidl_meta_arch::TIDLAnchorDataLayout>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string framework = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_framework();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaCaffeSsd.framework");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TidlMaCaffeSsd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TidlMaCaffeSsd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string box_input = 1;
  for (int i = 0, n = this->_internal_box_input_size(); i < n; i++) {
    const auto& s = this->_internal_box_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaCaffeSsd.box_input");
    target = stream->WriteString(1, s, target);
  }

  // repeated string class_input = 2;
  for (int i = 0, n = this->_internal_class_input_size(); i < n; i++) {
    const auto& s = this->_internal_class_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaCaffeSsd.class_input");
    target = stream->WriteString(2, s, target);
  }

  // repeated string output = 3;
  for (int i = 0, n = this->_internal_output_size(); i < n; i++) {
    const auto& s = this->_internal_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaCaffeSsd.output");
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaCaffeSsd.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional uint32 in_width = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_in_width(), target);
  }

  // optional uint32 in_height = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_in_height(), target);
  }

  // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_score_converter(), target);
  }

  // repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prior_box_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_prior_box_param(i), target, stream);
  }

  // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::detection_output_param(this), target, stream);
  }

  // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_data_layout(), target);
  }

  // optional string framework = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_framework().data(), static_cast<int>(this->_internal_framework().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaCaffeSsd.framework");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_framework(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TidlMaCaffeSsd)
  return target;
}

size_t TidlMaCaffeSsd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TidlMaCaffeSsd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string box_input = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(box_input_.size());
  for (int i = 0, n = box_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      box_input_.Get(i));
  }

  // repeated string class_input = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(class_input_.size());
  for (int i = 0, n = class_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      class_input_.Get(i));
  }

  // repeated string output = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_.size());
  for (int i = 0, n = output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_.Get(i));
  }

  // repeated .tidl_meta_arch.PriorBoxParameter prior_box_param = 8;
  total_size += 1UL * this->_internal_prior_box_param_size();
  for (const auto& msg : this->prior_box_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string framework = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_framework());
    }

    // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_output_param_);
    }

    // optional uint32 in_width = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_width());
    }

    // optional uint32 in_height = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_height());
    }

    // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 10 [default = SEPARATED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_layout());
    }

    // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 7 [default = SOFTMAX];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_score_converter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TidlMaCaffeSsd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TidlMaCaffeSsd)
  GOOGLE_DCHECK_NE(&from, this);
  const TidlMaCaffeSsd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TidlMaCaffeSsd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TidlMaCaffeSsd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TidlMaCaffeSsd)
    MergeFrom(*source);
  }
}

void TidlMaCaffeSsd::MergeFrom(const TidlMaCaffeSsd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TidlMaCaffeSsd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_input_.MergeFrom(from.box_input_);
  class_input_.MergeFrom(from.class_input_);
  output_.MergeFrom(from.output_);
  prior_box_param_.MergeFrom(from.prior_box_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      framework_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.framework_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_detection_output_param()->::tidl_meta_arch::TIDLOdPostProc::MergeFrom(from._internal_detection_output_param());
    }
    if (cached_has_bits & 0x00000008u) {
      in_width_ = from.in_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      in_height_ = from.in_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_layout_ = from.data_layout_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_converter_ = from.score_converter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TidlMaCaffeSsd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TidlMaCaffeSsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TidlMaCaffeSsd::CopyFrom(const TidlMaCaffeSsd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TidlMaCaffeSsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TidlMaCaffeSsd::IsInitialized() const {
  return true;
}

void TidlMaCaffeSsd::InternalSwap(TidlMaCaffeSsd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  box_input_.InternalSwap(&other->box_input_);
  class_input_.InternalSwap(&other->class_input_);
  output_.InternalSwap(&other->output_);
  prior_box_param_.InternalSwap(&other->prior_box_param_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  framework_.Swap(&other->framework_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(detection_output_param_, other->detection_output_param_);
  swap(in_width_, other->in_width_);
  swap(in_height_, other->in_height_);
  swap(data_layout_, other->data_layout_);
  swap(score_converter_, other->score_converter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TidlMaCaffeSsd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TidlMaTfOdApiSsd::InitAsDefaultInstance() {
}
class TidlMaTfOdApiSsd::_Internal {
 public:
  using HasBits = decltype(std::declval<TidlMaTfOdApiSsd>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TidlMaTfOdApiSsd::TidlMaTfOdApiSsd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TidlMaTfOdApiSsd)
}
TidlMaTfOdApiSsd::TidlMaTfOdApiSsd(const TidlMaTfOdApiSsd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TidlMaTfOdApiSsd)
}

void TidlMaTfOdApiSsd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TidlMaTfOdApiSsd_tidl_5fmeta_5farch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TidlMaTfOdApiSsd::~TidlMaTfOdApiSsd() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TidlMaTfOdApiSsd)
  SharedDtor();
}

void TidlMaTfOdApiSsd::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TidlMaTfOdApiSsd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TidlMaTfOdApiSsd& TidlMaTfOdApiSsd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TidlMaTfOdApiSsd_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TidlMaTfOdApiSsd::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TidlMaTfOdApiSsd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TidlMaTfOdApiSsd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaTfOdApiSsd.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TidlMaTfOdApiSsd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TidlMaTfOdApiSsd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaTfOdApiSsd.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TidlMaTfOdApiSsd)
  return target;
}

size_t TidlMaTfOdApiSsd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TidlMaTfOdApiSsd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TidlMaTfOdApiSsd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TidlMaTfOdApiSsd)
  GOOGLE_DCHECK_NE(&from, this);
  const TidlMaTfOdApiSsd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TidlMaTfOdApiSsd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TidlMaTfOdApiSsd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TidlMaTfOdApiSsd)
    MergeFrom(*source);
  }
}

void TidlMaTfOdApiSsd::MergeFrom(const TidlMaTfOdApiSsd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TidlMaTfOdApiSsd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TidlMaTfOdApiSsd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TidlMaTfOdApiSsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TidlMaTfOdApiSsd::CopyFrom(const TidlMaTfOdApiSsd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TidlMaTfOdApiSsd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TidlMaTfOdApiSsd::IsInitialized() const {
  return true;
}

void TidlMaTfOdApiSsd::InternalSwap(TidlMaTfOdApiSsd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TidlMaTfOdApiSsd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TidlMaFasterRcnn::InitAsDefaultInstance() {
}
class TidlMaFasterRcnn::_Internal {
 public:
  using HasBits = decltype(std::declval<TidlMaFasterRcnn>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TidlMaFasterRcnn::TidlMaFasterRcnn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TidlMaFasterRcnn)
}
TidlMaFasterRcnn::TidlMaFasterRcnn(const TidlMaFasterRcnn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TidlMaFasterRcnn)
}

void TidlMaFasterRcnn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TidlMaFasterRcnn_tidl_5fmeta_5farch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TidlMaFasterRcnn::~TidlMaFasterRcnn() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TidlMaFasterRcnn)
  SharedDtor();
}

void TidlMaFasterRcnn::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TidlMaFasterRcnn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TidlMaFasterRcnn& TidlMaFasterRcnn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TidlMaFasterRcnn_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TidlMaFasterRcnn::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TidlMaFasterRcnn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TidlMaFasterRcnn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaFasterRcnn.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TidlMaFasterRcnn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TidlMaFasterRcnn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaFasterRcnn.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TidlMaFasterRcnn)
  return target;
}

size_t TidlMaFasterRcnn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TidlMaFasterRcnn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TidlMaFasterRcnn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TidlMaFasterRcnn)
  GOOGLE_DCHECK_NE(&from, this);
  const TidlMaFasterRcnn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TidlMaFasterRcnn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TidlMaFasterRcnn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TidlMaFasterRcnn)
    MergeFrom(*source);
  }
}

void TidlMaFasterRcnn::MergeFrom(const TidlMaFasterRcnn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TidlMaFasterRcnn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TidlMaFasterRcnn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TidlMaFasterRcnn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TidlMaFasterRcnn::CopyFrom(const TidlMaFasterRcnn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TidlMaFasterRcnn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TidlMaFasterRcnn::IsInitialized() const {
  return true;
}

void TidlMaFasterRcnn::InternalSwap(TidlMaFasterRcnn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TidlMaFasterRcnn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TidlYoloOd::InitAsDefaultInstance() {
  ::tidl_meta_arch::_TidlYoloOd_default_instance_._instance.get_mutable()->detection_output_param_ = const_cast< ::tidl_meta_arch::TIDLOdPostProc*>(
      ::tidl_meta_arch::TIDLOdPostProc::internal_default_instance());
}
class TidlYoloOd::_Internal {
 public:
  using HasBits = decltype(std::declval<TidlYoloOd>()._has_bits_);
  static const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param(const TidlYoloOd* msg);
  static void set_has_detection_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_framework(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tidl_meta_arch::TIDLOdPostProc&
TidlYoloOd::_Internal::detection_output_param(const TidlYoloOd* msg) {
  return *msg->detection_output_param_;
}
TidlYoloOd::TidlYoloOd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TidlYoloOd)
}
TidlYoloOd::TidlYoloOd(const TidlYoloOd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      yolo_param_(from.yolo_param_),
      output_(from.output_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  framework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_framework()) {
    framework_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.framework_);
  }
  if (from._internal_has_detection_output_param()) {
    detection_output_param_ = new ::tidl_meta_arch::TIDLOdPostProc(*from.detection_output_param_);
  } else {
    detection_output_param_ = nullptr;
  }
  ::memcpy(&in_width_, &from.in_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_height_) -
    reinterpret_cast<char*>(&in_width_)) + sizeof(in_height_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TidlYoloOd)
}

void TidlYoloOd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TidlYoloOd_tidl_5fmeta_5farch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&detection_output_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_height_) -
      reinterpret_cast<char*>(&detection_output_param_)) + sizeof(in_height_));
}

TidlYoloOd::~TidlYoloOd() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TidlYoloOd)
  SharedDtor();
}

void TidlYoloOd::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framework_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detection_output_param_;
}

void TidlYoloOd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TidlYoloOd& TidlYoloOd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TidlYoloOd_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TidlYoloOd::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TidlYoloOd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yolo_param_.Clear();
  output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      framework_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_output_param_ != nullptr);
      detection_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&in_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_height_) -
        reinterpret_cast<char*>(&in_width_)) + sizeof(in_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TidlYoloOd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tidl_meta_arch.TIDLYoloParams yolo_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yolo_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlYoloOd.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 in_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_in_width(&has_bits);
          in_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 in_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_in_height(&has_bits);
          in_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlYoloOd.output");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string framework = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_framework();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlYoloOd.framework");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TidlYoloOd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TidlYoloOd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tidl_meta_arch.TIDLYoloParams yolo_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_yolo_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_yolo_param(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::detection_output_param(this), target, stream);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlYoloOd.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // required uint32 in_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_in_width(), target);
  }

  // required uint32 in_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_in_height(), target);
  }

  // repeated string output = 6;
  for (int i = 0, n = this->_internal_output_size(); i < n; i++) {
    const auto& s = this->_internal_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlYoloOd.output");
    target = stream->WriteString(6, s, target);
  }

  // optional string framework = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_framework().data(), static_cast<int>(this->_internal_framework().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlYoloOd.framework");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_framework(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TidlYoloOd)
  return target;
}

size_t TidlYoloOd::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tidl_meta_arch.TidlYoloOd)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_detection_output_param()) {
    // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_output_param_);
  }

  if (_internal_has_in_width()) {
    // required uint32 in_width = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_width());
  }

  if (_internal_has_in_height()) {
    // required uint32 in_height = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_height());
  }

  return total_size;
}
size_t TidlYoloOd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TidlYoloOd)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_output_param_);

    // required uint32 in_width = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_width());

    // required uint32 in_height = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tidl_meta_arch.TIDLYoloParams yolo_param = 1;
  total_size += 1UL * this->_internal_yolo_param_size();
  for (const auto& msg : this->yolo_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string output = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_.size());
  for (int i = 0, n = output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_.Get(i));
  }

  // optional string framework = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_framework());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TidlYoloOd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TidlYoloOd)
  GOOGLE_DCHECK_NE(&from, this);
  const TidlYoloOd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TidlYoloOd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TidlYoloOd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TidlYoloOd)
    MergeFrom(*source);
  }
}

void TidlYoloOd::MergeFrom(const TidlYoloOd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TidlYoloOd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yolo_param_.MergeFrom(from.yolo_param_);
  output_.MergeFrom(from.output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      framework_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.framework_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_detection_output_param()->::tidl_meta_arch::TIDLOdPostProc::MergeFrom(from._internal_detection_output_param());
    }
    if (cached_has_bits & 0x00000008u) {
      in_width_ = from.in_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      in_height_ = from.in_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TidlYoloOd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TidlYoloOd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TidlYoloOd::CopyFrom(const TidlYoloOd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TidlYoloOd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TidlYoloOd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(yolo_param_)) return false;
  return true;
}

void TidlYoloOd::InternalSwap(TidlYoloOd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  yolo_param_.InternalSwap(&other->yolo_param_);
  output_.InternalSwap(&other->output_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  framework_.Swap(&other->framework_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(detection_output_param_, other->detection_output_param_);
  swap(in_width_, other->in_width_);
  swap(in_height_, other->in_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TidlYoloOd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TIDLYoloParams::InitAsDefaultInstance() {
}
class TIDLYoloParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TIDLYoloParams>()._has_bits_);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TIDLYoloParams::TIDLYoloParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TIDLYoloParams)
}
TIDLYoloParams::TIDLYoloParams(const TIDLYoloParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      anchor_width_(from.anchor_width_),
      anchor_height_(from.anchor_height_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_input()) {
    input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_);
  }
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TIDLYoloParams)
}

void TIDLYoloParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TIDLYoloParams_tidl_5fmeta_5farch_2eproto.base);
  input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TIDLYoloParams::~TIDLYoloParams() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TIDLYoloParams)
  SharedDtor();
}

void TIDLYoloParams::SharedDtor() {
  input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TIDLYoloParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TIDLYoloParams& TIDLYoloParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TIDLYoloParams_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TIDLYoloParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TIDLYoloParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchor_width_.Clear();
  anchor_height_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    input_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TIDLYoloParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TIDLYoloParams.input");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float anchor_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_anchor_width(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_anchor_width(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float anchor_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_anchor_height(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_anchor_height(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TIDLYoloParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TIDLYoloParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string input = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input().data(), static_cast<int>(this->_internal_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TIDLYoloParams.input");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_input(), target);
  }

  // repeated float anchor_width = 2;
  for (int i = 0, n = this->_internal_anchor_width_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_anchor_width(i), target);
  }

  // repeated float anchor_height = 3;
  for (int i = 0, n = this->_internal_anchor_height_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_anchor_height(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TIDLYoloParams)
  return target;
}

size_t TIDLYoloParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TIDLYoloParams)
  size_t total_size = 0;

  // required string input = 1;
  if (_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float anchor_width = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anchor_width_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_anchor_width_size());
    total_size += data_size;
  }

  // repeated float anchor_height = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anchor_height_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_anchor_height_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TIDLYoloParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TIDLYoloParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TIDLYoloParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TIDLYoloParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TIDLYoloParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TIDLYoloParams)
    MergeFrom(*source);
  }
}

void TIDLYoloParams::MergeFrom(const TIDLYoloParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TIDLYoloParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchor_width_.MergeFrom(from.anchor_width_);
  anchor_height_.MergeFrom(from.anchor_height_);
  if (from._internal_has_input()) {
    _has_bits_[0] |= 0x00000001u;
    input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_);
  }
}

void TIDLYoloParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TIDLYoloParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIDLYoloParams::CopyFrom(const TIDLYoloParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TIDLYoloParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIDLYoloParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TIDLYoloParams::InternalSwap(TIDLYoloParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  anchor_width_.InternalSwap(&other->anchor_width_);
  anchor_height_.InternalSwap(&other->anchor_height_);
  input_.Swap(&other->input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TIDLYoloParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetinaNetAnchorParameter::InitAsDefaultInstance() {
}
class RetinaNetAnchorParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RetinaNetAnchorParameter>()._has_bits_);
  static void set_has_octave_base_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scales_per_octave(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RetinaNetAnchorParameter::RetinaNetAnchorParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.RetinaNetAnchorParameter)
}
RetinaNetAnchorParameter::RetinaNetAnchorParameter(const RetinaNetAnchorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      aspect_ratio_(from.aspect_ratio_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&octave_base_scale_, &from.octave_base_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&scales_per_octave_) -
    reinterpret_cast<char*>(&octave_base_scale_)) + sizeof(scales_per_octave_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.RetinaNetAnchorParameter)
}

void RetinaNetAnchorParameter::SharedCtor() {
  ::memset(&octave_base_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scales_per_octave_) -
      reinterpret_cast<char*>(&octave_base_scale_)) + sizeof(scales_per_octave_));
}

RetinaNetAnchorParameter::~RetinaNetAnchorParameter() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.RetinaNetAnchorParameter)
  SharedDtor();
}

void RetinaNetAnchorParameter::SharedDtor() {
}

void RetinaNetAnchorParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetinaNetAnchorParameter& RetinaNetAnchorParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetinaNetAnchorParameter_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void RetinaNetAnchorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.RetinaNetAnchorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aspect_ratio_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&octave_base_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scales_per_octave_) -
        reinterpret_cast<char*>(&octave_base_scale_)) + sizeof(scales_per_octave_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RetinaNetAnchorParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float aspect_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aspect_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_aspect_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float octave_base_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_octave_base_scale(&has_bits);
          octave_base_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 scales_per_octave = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_scales_per_octave(&has_bits);
          scales_per_octave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetinaNetAnchorParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.RetinaNetAnchorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float aspect_ratio = 1;
  for (int i = 0, n = this->_internal_aspect_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_aspect_ratio(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required float octave_base_scale = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_octave_base_scale(), target);
  }

  // required uint32 scales_per_octave = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_scales_per_octave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.RetinaNetAnchorParameter)
  return target;
}

size_t RetinaNetAnchorParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tidl_meta_arch.RetinaNetAnchorParameter)
  size_t total_size = 0;

  if (_internal_has_octave_base_scale()) {
    // required float octave_base_scale = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_scales_per_octave()) {
    // required uint32 scales_per_octave = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scales_per_octave());
  }

  return total_size;
}
size_t RetinaNetAnchorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.RetinaNetAnchorParameter)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float octave_base_scale = 2;
    total_size += 1 + 4;

    // required uint32 scales_per_octave = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scales_per_octave());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float aspect_ratio = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aspect_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aspect_ratio_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetinaNetAnchorParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.RetinaNetAnchorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RetinaNetAnchorParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetinaNetAnchorParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.RetinaNetAnchorParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.RetinaNetAnchorParameter)
    MergeFrom(*source);
  }
}

void RetinaNetAnchorParameter::MergeFrom(const RetinaNetAnchorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.RetinaNetAnchorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aspect_ratio_.MergeFrom(from.aspect_ratio_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      octave_base_scale_ = from.octave_base_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      scales_per_octave_ = from.scales_per_octave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RetinaNetAnchorParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.RetinaNetAnchorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetinaNetAnchorParameter::CopyFrom(const RetinaNetAnchorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.RetinaNetAnchorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetinaNetAnchorParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RetinaNetAnchorParameter::InternalSwap(RetinaNetAnchorParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  aspect_ratio_.InternalSwap(&other->aspect_ratio_);
  swap(octave_base_scale_, other->octave_base_scale_);
  swap(scales_per_octave_, other->scales_per_octave_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetinaNetAnchorParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TidlMaRetinaNet::InitAsDefaultInstance() {
  ::tidl_meta_arch::_TidlMaRetinaNet_default_instance_._instance.get_mutable()->anchor_param_ = const_cast< ::tidl_meta_arch::RetinaNetAnchorParameter*>(
      ::tidl_meta_arch::RetinaNetAnchorParameter::internal_default_instance());
  ::tidl_meta_arch::_TidlMaRetinaNet_default_instance_._instance.get_mutable()->detection_output_param_ = const_cast< ::tidl_meta_arch::TIDLOdPostProc*>(
      ::tidl_meta_arch::TIDLOdPostProc::internal_default_instance());
}
class TidlMaRetinaNet::_Internal {
 public:
  using HasBits = decltype(std::declval<TidlMaRetinaNet>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_in_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_anchorbox_order(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_x_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_y_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_x_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_y_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_width_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_height_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_score_converter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::tidl_meta_arch::RetinaNetAnchorParameter& anchor_param(const TidlMaRetinaNet* msg);
  static void set_has_anchor_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param(const TidlMaRetinaNet* msg);
  static void set_has_detection_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_framework(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tidl_meta_arch::RetinaNetAnchorParameter&
TidlMaRetinaNet::_Internal::anchor_param(const TidlMaRetinaNet* msg) {
  return *msg->anchor_param_;
}
const ::tidl_meta_arch::TIDLOdPostProc&
TidlMaRetinaNet::_Internal::detection_output_param(const TidlMaRetinaNet* msg) {
  return *msg->detection_output_param_;
}
TidlMaRetinaNet::TidlMaRetinaNet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TidlMaRetinaNet)
}
TidlMaRetinaNet::TidlMaRetinaNet(const TidlMaRetinaNet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      box_input_(from.box_input_),
      class_input_(from.class_input_),
      output_(from.output_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  framework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_framework()) {
    framework_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.framework_);
  }
  if (from._internal_has_anchor_param()) {
    anchor_param_ = new ::tidl_meta_arch::RetinaNetAnchorParameter(*from.anchor_param_);
  } else {
    anchor_param_ = nullptr;
  }
  if (from._internal_has_detection_output_param()) {
    detection_output_param_ = new ::tidl_meta_arch::TIDLOdPostProc(*from.detection_output_param_);
  } else {
    detection_output_param_ = nullptr;
  }
  ::memcpy(&in_width_, &from.in_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_scale_) -
    reinterpret_cast<char*>(&in_width_)) + sizeof(height_scale_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TidlMaRetinaNet)
}

void TidlMaRetinaNet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TidlMaRetinaNet_tidl_5fmeta_5farch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&anchor_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchorbox_order_) -
      reinterpret_cast<char*>(&anchor_param_)) + sizeof(anchorbox_order_));
  score_converter_ = 2;
  x_scale_ = 10;
  y_scale_ = 10;
  width_scale_ = 5;
  height_scale_ = 5;
}

TidlMaRetinaNet::~TidlMaRetinaNet() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TidlMaRetinaNet)
  SharedDtor();
}

void TidlMaRetinaNet::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framework_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete anchor_param_;
  if (this != internal_default_instance()) delete detection_output_param_;
}

void TidlMaRetinaNet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TidlMaRetinaNet& TidlMaRetinaNet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TidlMaRetinaNet_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TidlMaRetinaNet::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TidlMaRetinaNet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_input_.Clear();
  class_input_.Clear();
  output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      framework_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(anchor_param_ != nullptr);
      anchor_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(detection_output_param_ != nullptr);
      detection_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&in_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_offset_) -
        reinterpret_cast<char*>(&in_width_)) + sizeof(y_offset_));
  }
  if (cached_has_bits & 0x00003f00u) {
    anchorbox_order_ = 0u;
    score_converter_ = 2;
    x_scale_ = 10;
    y_scale_ = 10;
    width_scale_ = 5;
    height_scale_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TidlMaRetinaNet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string box_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_box_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaRetinaNet.box_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string class_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_class_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaRetinaNet.class_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaRetinaNet.output");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaRetinaNet.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 in_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_in_width(&has_bits);
          in_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 in_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_in_height(&has_bits);
          in_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x_scale = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_x_scale(&has_bits);
          x_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y_scale = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_y_scale(&has_bits);
          y_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width_scale = 9 [default = 5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_width_scale(&has_bits);
          width_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height_scale = 10 [default = 5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_height_scale(&has_bits);
          height_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 11 [default = SOFTMAX];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tidl_meta_arch::TIDLScoreConverter_IsValid(val))) {
            _internal_set_score_converter(static_cast<::tidl_meta_arch::TIDLScoreConverter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .tidl_meta_arch.RetinaNetAnchorParameter anchor_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x_offset = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_x_offset(&has_bits);
          x_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y_offset = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_y_offset(&has_bits);
          y_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 anchorbox_order = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_anchorbox_order(&has_bits);
          anchorbox_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string framework = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_framework();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMaRetinaNet.framework");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TidlMaRetinaNet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TidlMaRetinaNet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string box_input = 1;
  for (int i = 0, n = this->_internal_box_input_size(); i < n; i++) {
    const auto& s = this->_internal_box_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaRetinaNet.box_input");
    target = stream->WriteString(1, s, target);
  }

  // repeated string class_input = 2;
  for (int i = 0, n = this->_internal_class_input_size(); i < n; i++) {
    const auto& s = this->_internal_class_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaRetinaNet.class_input");
    target = stream->WriteString(2, s, target);
  }

  // repeated string output = 3;
  for (int i = 0, n = this->_internal_output_size(); i < n; i++) {
    const auto& s = this->_internal_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaRetinaNet.output");
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaRetinaNet.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // required uint32 in_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_in_width(), target);
  }

  // required uint32 in_height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_in_height(), target);
  }

  // optional float x_scale = 7 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_x_scale(), target);
  }

  // optional float y_scale = 8 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_y_scale(), target);
  }

  // optional float width_scale = 9 [default = 5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_width_scale(), target);
  }

  // optional float height_scale = 10 [default = 5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_height_scale(), target);
  }

  // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 11 [default = SOFTMAX];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_score_converter(), target);
  }

  // required .tidl_meta_arch.RetinaNetAnchorParameter anchor_param = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::anchor_param(this), target, stream);
  }

  // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::detection_output_param(this), target, stream);
  }

  // optional float x_offset = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_x_offset(), target);
  }

  // optional float y_offset = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_y_offset(), target);
  }

  // optional uint32 anchorbox_order = 16 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_anchorbox_order(), target);
  }

  // optional string framework = 17;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_framework().data(), static_cast<int>(this->_internal_framework().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMaRetinaNet.framework");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_framework(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TidlMaRetinaNet)
  return target;
}

size_t TidlMaRetinaNet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tidl_meta_arch.TidlMaRetinaNet)
  size_t total_size = 0;

  if (_internal_has_anchor_param()) {
    // required .tidl_meta_arch.RetinaNetAnchorParameter anchor_param = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anchor_param_);
  }

  if (_internal_has_detection_output_param()) {
    // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_output_param_);
  }

  if (_internal_has_in_width()) {
    // required uint32 in_width = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_width());
  }

  if (_internal_has_in_height()) {
    // required uint32 in_height = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_height());
  }

  return total_size;
}
size_t TidlMaRetinaNet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TidlMaRetinaNet)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .tidl_meta_arch.RetinaNetAnchorParameter anchor_param = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anchor_param_);

    // required .tidl_meta_arch.TIDLOdPostProc detection_output_param = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_output_param_);

    // required uint32 in_width = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_width());

    // required uint32 in_height = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string box_input = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(box_input_.size());
  for (int i = 0, n = box_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      box_input_.Get(i));
  }

  // repeated string class_input = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(class_input_.size());
  for (int i = 0, n = class_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      class_input_.Get(i));
  }

  // repeated string output = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_.size());
  for (int i = 0, n = output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string framework = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_framework());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional float x_offset = 14 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float y_offset = 15 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 anchorbox_order = 16 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_anchorbox_order());
    }

    // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 11 [default = SOFTMAX];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_score_converter());
    }

    // optional float x_scale = 7 [default = 10];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float y_scale = 8 [default = 10];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float width_scale = 9 [default = 5];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float height_scale = 10 [default = 5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TidlMaRetinaNet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TidlMaRetinaNet)
  GOOGLE_DCHECK_NE(&from, this);
  const TidlMaRetinaNet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TidlMaRetinaNet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TidlMaRetinaNet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TidlMaRetinaNet)
    MergeFrom(*source);
  }
}

void TidlMaRetinaNet::MergeFrom(const TidlMaRetinaNet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TidlMaRetinaNet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_input_.MergeFrom(from.box_input_);
  class_input_.MergeFrom(from.class_input_);
  output_.MergeFrom(from.output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      framework_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.framework_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_anchor_param()->::tidl_meta_arch::RetinaNetAnchorParameter::MergeFrom(from._internal_anchor_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_detection_output_param()->::tidl_meta_arch::TIDLOdPostProc::MergeFrom(from._internal_detection_output_param());
    }
    if (cached_has_bits & 0x00000010u) {
      in_width_ = from.in_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      in_height_ = from.in_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      x_offset_ = from.x_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      y_offset_ = from.y_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      anchorbox_order_ = from.anchorbox_order_;
    }
    if (cached_has_bits & 0x00000200u) {
      score_converter_ = from.score_converter_;
    }
    if (cached_has_bits & 0x00000400u) {
      x_scale_ = from.x_scale_;
    }
    if (cached_has_bits & 0x00000800u) {
      y_scale_ = from.y_scale_;
    }
    if (cached_has_bits & 0x00001000u) {
      width_scale_ = from.width_scale_;
    }
    if (cached_has_bits & 0x00002000u) {
      height_scale_ = from.height_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TidlMaRetinaNet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TidlMaRetinaNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TidlMaRetinaNet::CopyFrom(const TidlMaRetinaNet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TidlMaRetinaNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TidlMaRetinaNet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  if (_internal_has_anchor_param()) {
    if (!anchor_param_->IsInitialized()) return false;
  }
  return true;
}

void TidlMaRetinaNet::InternalSwap(TidlMaRetinaNet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  box_input_.InternalSwap(&other->box_input_);
  class_input_.InternalSwap(&other->class_input_);
  output_.InternalSwap(&other->output_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  framework_.Swap(&other->framework_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(anchor_param_, other->anchor_param_);
  swap(detection_output_param_, other->detection_output_param_);
  swap(in_width_, other->in_width_);
  swap(in_height_, other->in_height_);
  swap(x_offset_, other->x_offset_);
  swap(y_offset_, other->y_offset_);
  swap(anchorbox_order_, other->anchorbox_order_);
  swap(score_converter_, other->score_converter_);
  swap(x_scale_, other->x_scale_);
  swap(y_scale_, other->y_scale_);
  swap(width_scale_, other->width_scale_);
  swap(height_scale_, other->height_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TidlMaRetinaNet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TidlMa3DOD::InitAsDefaultInstance() {
  ::tidl_meta_arch::_TidlMa3DOD_default_instance_._instance.get_mutable()->detection_output_param_ = const_cast< ::tidl_meta_arch::TIDLOdPostProc*>(
      ::tidl_meta_arch::TIDLOdPostProc::internal_default_instance());
}
class TidlMa3DOD::_Internal {
 public:
  using HasBits = decltype(std::declval<TidlMa3DOD>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_z(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_z(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_voxel_size_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_voxel_size_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_voxel_size_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_points_per_voxel(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_score_converter(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::tidl_meta_arch::TIDLOdPostProc& detection_output_param(const TidlMa3DOD* msg);
  static void set_has_detection_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::tidl_meta_arch::TIDLOdPostProc&
TidlMa3DOD::_Internal::detection_output_param(const TidlMa3DOD* msg) {
  return *msg->detection_output_param_;
}
TidlMa3DOD::TidlMa3DOD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TidlMa3DOD)
}
TidlMa3DOD::TidlMa3DOD(const TidlMa3DOD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      box_input_(from.box_input_),
      class_input_(from.class_input_),
      dir_input_(from.dir_input_),
      output_(from.output_),
      prior_box_3dod_param_(from.prior_box_3dod_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_detection_output_param()) {
    detection_output_param_ = new ::tidl_meta_arch::TIDLOdPostProc(*from.detection_output_param_);
  } else {
    detection_output_param_ = nullptr;
  }
  ::memcpy(&min_x_, &from.min_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_converter_) -
    reinterpret_cast<char*>(&min_x_)) + sizeof(score_converter_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TidlMa3DOD)
}

void TidlMa3DOD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TidlMa3DOD_tidl_5fmeta_5farch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&detection_output_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_layout_) -
      reinterpret_cast<char*>(&detection_output_param_)) + sizeof(data_layout_));
  score_converter_ = 1;
}

TidlMa3DOD::~TidlMa3DOD() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TidlMa3DOD)
  SharedDtor();
}

void TidlMa3DOD::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detection_output_param_;
}

void TidlMa3DOD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TidlMa3DOD& TidlMa3DOD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TidlMa3DOD_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TidlMa3DOD::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TidlMa3DOD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_input_.Clear();
  class_input_.Clear();
  dir_input_.Clear();
  output_.Clear();
  prior_box_3dod_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(detection_output_param_ != nullptr);
      detection_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&min_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_z_) -
        reinterpret_cast<char*>(&min_x_)) + sizeof(max_z_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&voxel_size_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_layout_) -
        reinterpret_cast<char*>(&voxel_size_x_)) + sizeof(data_layout_));
    score_converter_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TidlMa3DOD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string box_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_box_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMa3DOD.box_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string class_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_class_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMa3DOD.class_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string dir_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dir_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMa3DOD.dir_input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMa3DOD.output");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tidl_meta_arch.TidlMa3DOD.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float min_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_min_x(&has_bits);
          min_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float max_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_max_x(&has_bits);
          max_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float min_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_min_y(&has_bits);
          min_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float max_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_max_y(&has_bits);
          max_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float min_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_min_z(&has_bits);
          min_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float max_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_max_z(&has_bits);
          max_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float voxel_size_x = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_voxel_size_x(&has_bits);
          voxel_size_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float voxel_size_y = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_voxel_size_y(&has_bits);
          voxel_size_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float voxel_size_z = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_voxel_size_z(&has_bits);
          voxel_size_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 max_points_per_voxel = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_max_points_per_voxel(&has_bits);
          max_points_per_voxel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 16 [default = SIGMOID];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tidl_meta_arch::TIDLScoreConverter_IsValid(val))) {
            _internal_set_score_converter(static_cast<::tidl_meta_arch::TIDLScoreConverter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .tidl_meta_arch.PriorBox3DODParameter prior_box_3dod_param = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_prior_box_3dod_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 19 [default = SEPARATED];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tidl_meta_arch::TIDLAnchorDataLayout_IsValid(val))) {
            _internal_set_data_layout(static_cast<::tidl_meta_arch::TIDLAnchorDataLayout>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TidlMa3DOD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TidlMa3DOD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string box_input = 1;
  for (int i = 0, n = this->_internal_box_input_size(); i < n; i++) {
    const auto& s = this->_internal_box_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMa3DOD.box_input");
    target = stream->WriteString(1, s, target);
  }

  // repeated string class_input = 2;
  for (int i = 0, n = this->_internal_class_input_size(); i < n; i++) {
    const auto& s = this->_internal_class_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMa3DOD.class_input");
    target = stream->WriteString(2, s, target);
  }

  // repeated string dir_input = 3;
  for (int i = 0, n = this->_internal_dir_input_size(); i < n; i++) {
    const auto& s = this->_internal_dir_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMa3DOD.dir_input");
    target = stream->WriteString(3, s, target);
  }

  // repeated string output = 4;
  for (int i = 0, n = this->_internal_output_size(); i < n; i++) {
    const auto& s = this->_internal_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMa3DOD.output");
    target = stream->WriteString(4, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tidl_meta_arch.TidlMa3DOD.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // required float min_x = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_min_x(), target);
  }

  // required float max_x = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_max_x(), target);
  }

  // required float min_y = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_min_y(), target);
  }

  // required float max_y = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_max_y(), target);
  }

  // required float min_z = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_min_z(), target);
  }

  // required float max_z = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_max_z(), target);
  }

  // required float voxel_size_x = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_voxel_size_x(), target);
  }

  // required float voxel_size_y = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_voxel_size_y(), target);
  }

  // required float voxel_size_z = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_voxel_size_z(), target);
  }

  // required uint32 max_points_per_voxel = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_max_points_per_voxel(), target);
  }

  // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 16 [default = SIGMOID];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_score_converter(), target);
  }

  // repeated .tidl_meta_arch.PriorBox3DODParameter prior_box_3dod_param = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prior_box_3dod_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_prior_box_3dod_param(i), target, stream);
  }

  // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 18;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::detection_output_param(this), target, stream);
  }

  // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 19 [default = SEPARATED];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_data_layout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TidlMa3DOD)
  return target;
}

size_t TidlMa3DOD::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tidl_meta_arch.TidlMa3DOD)
  size_t total_size = 0;

  if (_internal_has_min_x()) {
    // required float min_x = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_max_x()) {
    // required float max_x = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_min_y()) {
    // required float min_y = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_max_y()) {
    // required float max_y = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_min_z()) {
    // required float min_z = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_max_z()) {
    // required float max_z = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_voxel_size_x()) {
    // required float voxel_size_x = 12;
    total_size += 1 + 4;
  }

  if (_internal_has_voxel_size_y()) {
    // required float voxel_size_y = 13;
    total_size += 1 + 4;
  }

  if (_internal_has_voxel_size_z()) {
    // required float voxel_size_z = 14;
    total_size += 1 + 4;
  }

  if (_internal_has_max_points_per_voxel()) {
    // required uint32 max_points_per_voxel = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_points_per_voxel());
  }

  return total_size;
}
size_t TidlMa3DOD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TidlMa3DOD)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000ffc) ^ 0x00000ffc) == 0) {  // All required fields are present.
    // required float min_x = 6;
    total_size += 1 + 4;

    // required float max_x = 7;
    total_size += 1 + 4;

    // required float min_y = 8;
    total_size += 1 + 4;

    // required float max_y = 9;
    total_size += 1 + 4;

    // required float min_z = 10;
    total_size += 1 + 4;

    // required float max_z = 11;
    total_size += 1 + 4;

    // required float voxel_size_x = 12;
    total_size += 1 + 4;

    // required float voxel_size_y = 13;
    total_size += 1 + 4;

    // required float voxel_size_z = 14;
    total_size += 1 + 4;

    // required uint32 max_points_per_voxel = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_points_per_voxel());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string box_input = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(box_input_.size());
  for (int i = 0, n = box_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      box_input_.Get(i));
  }

  // repeated string class_input = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(class_input_.size());
  for (int i = 0, n = class_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      class_input_.Get(i));
  }

  // repeated string dir_input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dir_input_.size());
  for (int i = 0, n = dir_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dir_input_.Get(i));
  }

  // repeated string output = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_.size());
  for (int i = 0, n = output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_.Get(i));
  }

  // repeated .tidl_meta_arch.PriorBox3DODParameter prior_box_3dod_param = 17;
  total_size += 2UL * this->_internal_prior_box_3dod_param_size();
  for (const auto& msg : this->prior_box_3dod_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .tidl_meta_arch.TIDLOdPostProc detection_output_param = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_output_param_);
    }

  }
  if (cached_has_bits & 0x00003000u) {
    // optional .tidl_meta_arch.TIDLAnchorDataLayout data_layout = 19 [default = SEPARATED];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_layout());
    }

    // optional .tidl_meta_arch.TIDLScoreConverter score_converter = 16 [default = SIGMOID];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_score_converter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TidlMa3DOD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TidlMa3DOD)
  GOOGLE_DCHECK_NE(&from, this);
  const TidlMa3DOD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TidlMa3DOD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TidlMa3DOD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TidlMa3DOD)
    MergeFrom(*source);
  }
}

void TidlMa3DOD::MergeFrom(const TidlMa3DOD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TidlMa3DOD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_input_.MergeFrom(from.box_input_);
  class_input_.MergeFrom(from.class_input_);
  dir_input_.MergeFrom(from.dir_input_);
  output_.MergeFrom(from.output_);
  prior_box_3dod_param_.MergeFrom(from.prior_box_3dod_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_detection_output_param()->::tidl_meta_arch::TIDLOdPostProc::MergeFrom(from._internal_detection_output_param());
    }
    if (cached_has_bits & 0x00000004u) {
      min_x_ = from.min_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_x_ = from.max_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_y_ = from.min_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_y_ = from.max_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_z_ = from.min_z_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_z_ = from.max_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      voxel_size_x_ = from.voxel_size_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      voxel_size_y_ = from.voxel_size_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      voxel_size_z_ = from.voxel_size_z_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_points_per_voxel_ = from.max_points_per_voxel_;
    }
    if (cached_has_bits & 0x00001000u) {
      data_layout_ = from.data_layout_;
    }
    if (cached_has_bits & 0x00002000u) {
      score_converter_ = from.score_converter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TidlMa3DOD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TidlMa3DOD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TidlMa3DOD::CopyFrom(const TidlMa3DOD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TidlMa3DOD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TidlMa3DOD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000ffc) != 0x00000ffc) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(prior_box_3dod_param_)) return false;
  return true;
}

void TidlMa3DOD::InternalSwap(TidlMa3DOD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  box_input_.InternalSwap(&other->box_input_);
  class_input_.InternalSwap(&other->class_input_);
  dir_input_.InternalSwap(&other->dir_input_);
  output_.InternalSwap(&other->output_);
  prior_box_3dod_param_.InternalSwap(&other->prior_box_3dod_param_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(detection_output_param_, other->detection_output_param_);
  swap(min_x_, other->min_x_);
  swap(max_x_, other->max_x_);
  swap(min_y_, other->min_y_);
  swap(max_y_, other->max_y_);
  swap(min_z_, other->min_z_);
  swap(max_z_, other->max_z_);
  swap(voxel_size_x_, other->voxel_size_x_);
  swap(voxel_size_y_, other->voxel_size_y_);
  swap(voxel_size_z_, other->voxel_size_z_);
  swap(max_points_per_voxel_, other->max_points_per_voxel_);
  swap(data_layout_, other->data_layout_);
  swap(score_converter_, other->score_converter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TidlMa3DOD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TIDLCameraIntrinsicParams::InitAsDefaultInstance() {
}
class TIDLCameraIntrinsicParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TIDLCameraIntrinsicParams>()._has_bits_);
  static void set_has_fx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_px(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_py(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TIDLCameraIntrinsicParams::TIDLCameraIntrinsicParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tidl_meta_arch.TIDLCameraIntrinsicParams)
}
TIDLCameraIntrinsicParams::TIDLCameraIntrinsicParams(const TIDLCameraIntrinsicParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&px_, &from.px_,
    static_cast<size_t>(reinterpret_cast<char*>(&fy_) -
    reinterpret_cast<char*>(&px_)) + sizeof(fy_));
  // @@protoc_insertion_point(copy_constructor:tidl_meta_arch.TIDLCameraIntrinsicParams)
}

void TIDLCameraIntrinsicParams::SharedCtor() {
  ::memset(&px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&py_) -
      reinterpret_cast<char*>(&px_)) + sizeof(py_));
  fx_ = 1;
  fy_ = 1;
}

TIDLCameraIntrinsicParams::~TIDLCameraIntrinsicParams() {
  // @@protoc_insertion_point(destructor:tidl_meta_arch.TIDLCameraIntrinsicParams)
  SharedDtor();
}

void TIDLCameraIntrinsicParams::SharedDtor() {
}

void TIDLCameraIntrinsicParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TIDLCameraIntrinsicParams& TIDLCameraIntrinsicParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TIDLCameraIntrinsicParams_tidl_5fmeta_5farch_2eproto.base);
  return *internal_default_instance();
}


void TIDLCameraIntrinsicParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tidl_meta_arch.TIDLCameraIntrinsicParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&px_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&py_) -
        reinterpret_cast<char*>(&px_)) + sizeof(py_));
    fx_ = 1;
    fy_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TIDLCameraIntrinsicParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float fx = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_fx(&has_bits);
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fy = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fy(&has_bits);
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float px = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_px(&has_bits);
          px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float py = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_py(&has_bits);
          py_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TIDLCameraIntrinsicParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tidl_meta_arch.TIDLCameraIntrinsicParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fx = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // optional float fy = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fy(), target);
  }

  // optional float px = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_px(), target);
  }

  // optional float py = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_py(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tidl_meta_arch.TIDLCameraIntrinsicParams)
  return target;
}

size_t TIDLCameraIntrinsicParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tidl_meta_arch.TIDLCameraIntrinsicParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float px = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float py = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float fx = 1 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float fy = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TIDLCameraIntrinsicParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tidl_meta_arch.TIDLCameraIntrinsicParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TIDLCameraIntrinsicParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TIDLCameraIntrinsicParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tidl_meta_arch.TIDLCameraIntrinsicParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tidl_meta_arch.TIDLCameraIntrinsicParams)
    MergeFrom(*source);
  }
}

void TIDLCameraIntrinsicParams::MergeFrom(const TIDLCameraIntrinsicParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tidl_meta_arch.TIDLCameraIntrinsicParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      px_ = from.px_;
    }
    if (cached_has_bits & 0x00000002u) {
      py_ = from.py_;
    }
    if (cached_has_bits & 0x00000004u) {
      fx_ = from.fx_;
    }
    if (cached_has_bits & 0x00000008u) {
      fy_ = from.fy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TIDLCameraIntrinsicParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tidl_meta_arch.TIDLCameraIntrinsicParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIDLCameraIntrinsicParams::CopyFrom(const TIDLCameraIntrinsicParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tidl_meta_arch.TIDLCameraIntrinsicParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIDLCameraIntrinsicParams::IsInitialized() const {
  return true;
}

void TIDLCameraIntrinsicParams::InternalSwap(TIDLCameraIntrinsicParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(px_, other->px_);
  swap(py_, other->py_);
  swap(fx_, other->fx_);
  swap(fy_, other->fy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TIDLCameraIntrinsicParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tidl_meta_arch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TIDLMetaArch* Arena::CreateMaybeMessage< ::tidl_meta_arch::TIDLMetaArch >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TIDLMetaArch >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TIDLNmsParam* Arena::CreateMaybeMessage< ::tidl_meta_arch::TIDLNmsParam >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TIDLNmsParam >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::PriorBoxParameter* Arena::CreateMaybeMessage< ::tidl_meta_arch::PriorBoxParameter >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::PriorBoxParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::PriorBox3DODParameter* Arena::CreateMaybeMessage< ::tidl_meta_arch::PriorBox3DODParameter >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::PriorBox3DODParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TIDLOdSaveParams* Arena::CreateMaybeMessage< ::tidl_meta_arch::TIDLOdSaveParams >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TIDLOdSaveParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TIDLOdPostProc* Arena::CreateMaybeMessage< ::tidl_meta_arch::TIDLOdPostProc >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TIDLOdPostProc >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TidlMaSsd* Arena::CreateMaybeMessage< ::tidl_meta_arch::TidlMaSsd >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TidlMaSsd >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TidlMaCaffeSsd* Arena::CreateMaybeMessage< ::tidl_meta_arch::TidlMaCaffeSsd >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TidlMaCaffeSsd >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TidlMaTfOdApiSsd* Arena::CreateMaybeMessage< ::tidl_meta_arch::TidlMaTfOdApiSsd >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TidlMaTfOdApiSsd >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TidlMaFasterRcnn* Arena::CreateMaybeMessage< ::tidl_meta_arch::TidlMaFasterRcnn >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TidlMaFasterRcnn >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TidlYoloOd* Arena::CreateMaybeMessage< ::tidl_meta_arch::TidlYoloOd >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TidlYoloOd >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TIDLYoloParams* Arena::CreateMaybeMessage< ::tidl_meta_arch::TIDLYoloParams >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TIDLYoloParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::RetinaNetAnchorParameter* Arena::CreateMaybeMessage< ::tidl_meta_arch::RetinaNetAnchorParameter >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::RetinaNetAnchorParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TidlMaRetinaNet* Arena::CreateMaybeMessage< ::tidl_meta_arch::TidlMaRetinaNet >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TidlMaRetinaNet >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TidlMa3DOD* Arena::CreateMaybeMessage< ::tidl_meta_arch::TidlMa3DOD >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TidlMa3DOD >(arena);
}
template<> PROTOBUF_NOINLINE ::tidl_meta_arch::TIDLCameraIntrinsicParams* Arena::CreateMaybeMessage< ::tidl_meta_arch::TIDLCameraIntrinsicParams >(Arena* arena) {
  return Arena::CreateInternal< ::tidl_meta_arch::TIDLCameraIntrinsicParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
